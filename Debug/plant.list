
plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08009d68  08009d68  00019d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a17c  0800a17c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a184  0800a184  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a188  0800a188  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000074  0800a200  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  0800a200  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011666  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b9b  00000000  00000000  00031702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  000342a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000123e6  00000000  00000000  00035f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013368  00000000  00000000  000482fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066e00  00000000  00000000  0005b666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c2466  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004844  00000000  00000000  000c24bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009d50 	.word	0x08009d50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08009d50 	.word	0x08009d50

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_shi>:
 800011c:	b403      	push	{r0, r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0040      	lsls	r0, r0, #1
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	5e09      	ldrsh	r1, [r1, r0]
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	448e      	add	lr, r1
 800012c:	bc03      	pop	{r0, r1}
 800012e:	4770      	bx	lr

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f8f0 	bl	8000418 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__divsi3>:
 8000244:	4603      	mov	r3, r0
 8000246:	430b      	orrs	r3, r1
 8000248:	d47f      	bmi.n	800034a <__divsi3+0x106>
 800024a:	2200      	movs	r2, #0
 800024c:	0843      	lsrs	r3, r0, #1
 800024e:	428b      	cmp	r3, r1
 8000250:	d374      	bcc.n	800033c <__divsi3+0xf8>
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d35f      	bcc.n	8000318 <__divsi3+0xd4>
 8000258:	0a03      	lsrs	r3, r0, #8
 800025a:	428b      	cmp	r3, r1
 800025c:	d344      	bcc.n	80002e8 <__divsi3+0xa4>
 800025e:	0b03      	lsrs	r3, r0, #12
 8000260:	428b      	cmp	r3, r1
 8000262:	d328      	bcc.n	80002b6 <__divsi3+0x72>
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d30d      	bcc.n	8000286 <__divsi3+0x42>
 800026a:	22ff      	movs	r2, #255	; 0xff
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	ba12      	rev	r2, r2
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__divsi3+0x38>
 8000276:	1212      	asrs	r2, r2, #8
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	d065      	beq.n	8000348 <__divsi3+0x104>
 800027c:	0b03      	lsrs	r3, r0, #12
 800027e:	428b      	cmp	r3, r1
 8000280:	d319      	bcc.n	80002b6 <__divsi3+0x72>
 8000282:	e000      	b.n	8000286 <__divsi3+0x42>
 8000284:	0a09      	lsrs	r1, r1, #8
 8000286:	0bc3      	lsrs	r3, r0, #15
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x4c>
 800028c:	03cb      	lsls	r3, r1, #15
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b83      	lsrs	r3, r0, #14
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x58>
 8000298:	038b      	lsls	r3, r1, #14
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b43      	lsrs	r3, r0, #13
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x64>
 80002a4:	034b      	lsls	r3, r1, #13
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b03      	lsrs	r3, r0, #12
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x70>
 80002b0:	030b      	lsls	r3, r1, #12
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0ac3      	lsrs	r3, r0, #11
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x7c>
 80002bc:	02cb      	lsls	r3, r1, #11
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a83      	lsrs	r3, r0, #10
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x88>
 80002c8:	028b      	lsls	r3, r1, #10
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a43      	lsrs	r3, r0, #9
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x94>
 80002d4:	024b      	lsls	r3, r1, #9
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a03      	lsrs	r3, r0, #8
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0xa0>
 80002e0:	020b      	lsls	r3, r1, #8
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	d2cd      	bcs.n	8000284 <__divsi3+0x40>
 80002e8:	09c3      	lsrs	r3, r0, #7
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xae>
 80002ee:	01cb      	lsls	r3, r1, #7
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0983      	lsrs	r3, r0, #6
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xba>
 80002fa:	018b      	lsls	r3, r1, #6
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0943      	lsrs	r3, r0, #5
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xc6>
 8000306:	014b      	lsls	r3, r1, #5
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0903      	lsrs	r3, r0, #4
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xd2>
 8000312:	010b      	lsls	r3, r1, #4
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	08c3      	lsrs	r3, r0, #3
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xde>
 800031e:	00cb      	lsls	r3, r1, #3
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0883      	lsrs	r3, r0, #2
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xea>
 800032a:	008b      	lsls	r3, r1, #2
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0843      	lsrs	r3, r0, #1
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xf6>
 8000336:	004b      	lsls	r3, r1, #1
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	1a41      	subs	r1, r0, r1
 800033e:	d200      	bcs.n	8000342 <__divsi3+0xfe>
 8000340:	4601      	mov	r1, r0
 8000342:	4152      	adcs	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	4770      	bx	lr
 8000348:	e05d      	b.n	8000406 <__divsi3+0x1c2>
 800034a:	0fca      	lsrs	r2, r1, #31
 800034c:	d000      	beq.n	8000350 <__divsi3+0x10c>
 800034e:	4249      	negs	r1, r1
 8000350:	1003      	asrs	r3, r0, #32
 8000352:	d300      	bcc.n	8000356 <__divsi3+0x112>
 8000354:	4240      	negs	r0, r0
 8000356:	4053      	eors	r3, r2
 8000358:	2200      	movs	r2, #0
 800035a:	469c      	mov	ip, r3
 800035c:	0903      	lsrs	r3, r0, #4
 800035e:	428b      	cmp	r3, r1
 8000360:	d32d      	bcc.n	80003be <__divsi3+0x17a>
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d312      	bcc.n	800038e <__divsi3+0x14a>
 8000368:	22fc      	movs	r2, #252	; 0xfc
 800036a:	0189      	lsls	r1, r1, #6
 800036c:	ba12      	rev	r2, r2
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d30c      	bcc.n	800038e <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d308      	bcc.n	800038e <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d304      	bcc.n	800038e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	d03a      	beq.n	80003fe <__divsi3+0x1ba>
 8000388:	1192      	asrs	r2, r2, #6
 800038a:	e000      	b.n	800038e <__divsi3+0x14a>
 800038c:	0989      	lsrs	r1, r1, #6
 800038e:	09c3      	lsrs	r3, r0, #7
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x154>
 8000394:	01cb      	lsls	r3, r1, #7
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0983      	lsrs	r3, r0, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x160>
 80003a0:	018b      	lsls	r3, r1, #6
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0943      	lsrs	r3, r0, #5
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x16c>
 80003ac:	014b      	lsls	r3, r1, #5
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0903      	lsrs	r3, r0, #4
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x178>
 80003b8:	010b      	lsls	r3, r1, #4
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	08c3      	lsrs	r3, r0, #3
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x184>
 80003c4:	00cb      	lsls	r3, r1, #3
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0883      	lsrs	r3, r0, #2
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x190>
 80003d0:	008b      	lsls	r3, r1, #2
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	d2d9      	bcs.n	800038c <__divsi3+0x148>
 80003d8:	0843      	lsrs	r3, r0, #1
 80003da:	428b      	cmp	r3, r1
 80003dc:	d301      	bcc.n	80003e2 <__divsi3+0x19e>
 80003de:	004b      	lsls	r3, r1, #1
 80003e0:	1ac0      	subs	r0, r0, r3
 80003e2:	4152      	adcs	r2, r2
 80003e4:	1a41      	subs	r1, r0, r1
 80003e6:	d200      	bcs.n	80003ea <__divsi3+0x1a6>
 80003e8:	4601      	mov	r1, r0
 80003ea:	4663      	mov	r3, ip
 80003ec:	4152      	adcs	r2, r2
 80003ee:	105b      	asrs	r3, r3, #1
 80003f0:	4610      	mov	r0, r2
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x1b4>
 80003f4:	4240      	negs	r0, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d500      	bpl.n	80003fc <__divsi3+0x1b8>
 80003fa:	4249      	negs	r1, r1
 80003fc:	4770      	bx	lr
 80003fe:	4663      	mov	r3, ip
 8000400:	105b      	asrs	r3, r3, #1
 8000402:	d300      	bcc.n	8000406 <__divsi3+0x1c2>
 8000404:	4240      	negs	r0, r0
 8000406:	b501      	push	{r0, lr}
 8000408:	2000      	movs	r0, #0
 800040a:	f000 f805 	bl	8000418 <__aeabi_idiv0>
 800040e:	bd02      	pop	{r1, pc}

08000410 <__aeabi_idivmod>:
 8000410:	2900      	cmp	r1, #0
 8000412:	d0f8      	beq.n	8000406 <__divsi3+0x1c2>
 8000414:	e716      	b.n	8000244 <__divsi3>
 8000416:	4770      	bx	lr

08000418 <__aeabi_idiv0>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_cdrcmple>:
 800041c:	4684      	mov	ip, r0
 800041e:	1c10      	adds	r0, r2, #0
 8000420:	4662      	mov	r2, ip
 8000422:	468c      	mov	ip, r1
 8000424:	1c19      	adds	r1, r3, #0
 8000426:	4663      	mov	r3, ip
 8000428:	e000      	b.n	800042c <__aeabi_cdcmpeq>
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdcmpeq>:
 800042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042e:	f001 fc23 	bl	8001c78 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	d401      	bmi.n	800043a <__aeabi_cdcmpeq+0xe>
 8000436:	2100      	movs	r1, #0
 8000438:	42c8      	cmn	r0, r1
 800043a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800043c <__aeabi_dcmpeq>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f001 fb6d 	bl	8001b1c <__eqdf2>
 8000442:	4240      	negs	r0, r0
 8000444:	3001      	adds	r0, #1
 8000446:	bd10      	pop	{r4, pc}

08000448 <__aeabi_dcmplt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fc15 	bl	8001c78 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	db01      	blt.n	8000456 <__aeabi_dcmplt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmple>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fc0b 	bl	8001c78 <__ledf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dd01      	ble.n	800046a <__aeabi_dcmple+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpgt>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fb8f 	bl	8001b94 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	dc01      	bgt.n	800047e <__aeabi_dcmpgt+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_dcmpge>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f001 fb85 	bl	8001b94 <__gedf2>
 800048a:	2800      	cmp	r0, #0
 800048c:	da01      	bge.n	8000492 <__aeabi_dcmpge+0xe>
 800048e:	2000      	movs	r0, #0
 8000490:	bd10      	pop	{r4, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	bd10      	pop	{r4, pc}
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_cfrcmple>:
 8000498:	4684      	mov	ip, r0
 800049a:	1c08      	adds	r0, r1, #0
 800049c:	4661      	mov	r1, ip
 800049e:	e7ff      	b.n	80004a0 <__aeabi_cfcmpeq>

080004a0 <__aeabi_cfcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f000 fa35 	bl	8000910 <__lesf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cfcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_fcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f000 f9b9 	bl	8000828 <__eqsf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_fcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa27 	bl	8000910 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_fcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa1d 	bl	8000910 <__lesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_fcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 f9c7 	bl	8000878 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_fcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)

080004f8 <__aeabi_fcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f000 f9bd 	bl	8000878 <__gesf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_fcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			; (mov r8, r8)

0800050c <__aeabi_ldivmod>:
 800050c:	2b00      	cmp	r3, #0
 800050e:	d115      	bne.n	800053c <__aeabi_ldivmod+0x30>
 8000510:	2a00      	cmp	r2, #0
 8000512:	d113      	bne.n	800053c <__aeabi_ldivmod+0x30>
 8000514:	2900      	cmp	r1, #0
 8000516:	db06      	blt.n	8000526 <__aeabi_ldivmod+0x1a>
 8000518:	dc01      	bgt.n	800051e <__aeabi_ldivmod+0x12>
 800051a:	2800      	cmp	r0, #0
 800051c:	d006      	beq.n	800052c <__aeabi_ldivmod+0x20>
 800051e:	2000      	movs	r0, #0
 8000520:	43c0      	mvns	r0, r0
 8000522:	0841      	lsrs	r1, r0, #1
 8000524:	e002      	b.n	800052c <__aeabi_ldivmod+0x20>
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0609      	lsls	r1, r1, #24
 800052a:	2000      	movs	r0, #0
 800052c:	b407      	push	{r0, r1, r2}
 800052e:	4802      	ldr	r0, [pc, #8]	; (8000538 <__aeabi_ldivmod+0x2c>)
 8000530:	a101      	add	r1, pc, #4	; (adr r1, 8000538 <__aeabi_ldivmod+0x2c>)
 8000532:	1840      	adds	r0, r0, r1
 8000534:	9002      	str	r0, [sp, #8]
 8000536:	bd03      	pop	{r0, r1, pc}
 8000538:	fffffee1 	.word	0xfffffee1
 800053c:	b403      	push	{r0, r1}
 800053e:	4668      	mov	r0, sp
 8000540:	b501      	push	{r0, lr}
 8000542:	9802      	ldr	r0, [sp, #8]
 8000544:	f000 f846 	bl	80005d4 <__gnu_ldivmod_helper>
 8000548:	9b01      	ldr	r3, [sp, #4]
 800054a:	469e      	mov	lr, r3
 800054c:	b002      	add	sp, #8
 800054e:	bc0c      	pop	{r2, r3}
 8000550:	4770      	bx	lr
 8000552:	46c0      	nop			; (mov r8, r8)

08000554 <__aeabi_lmul>:
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	0415      	lsls	r5, r2, #16
 8000558:	0c2d      	lsrs	r5, r5, #16
 800055a:	000f      	movs	r7, r1
 800055c:	0001      	movs	r1, r0
 800055e:	002e      	movs	r6, r5
 8000560:	46c6      	mov	lr, r8
 8000562:	4684      	mov	ip, r0
 8000564:	0400      	lsls	r0, r0, #16
 8000566:	0c14      	lsrs	r4, r2, #16
 8000568:	0c00      	lsrs	r0, r0, #16
 800056a:	0c09      	lsrs	r1, r1, #16
 800056c:	4346      	muls	r6, r0
 800056e:	434d      	muls	r5, r1
 8000570:	4360      	muls	r0, r4
 8000572:	4361      	muls	r1, r4
 8000574:	1940      	adds	r0, r0, r5
 8000576:	0c34      	lsrs	r4, r6, #16
 8000578:	1824      	adds	r4, r4, r0
 800057a:	b500      	push	{lr}
 800057c:	42a5      	cmp	r5, r4
 800057e:	d903      	bls.n	8000588 <__aeabi_lmul+0x34>
 8000580:	2080      	movs	r0, #128	; 0x80
 8000582:	0240      	lsls	r0, r0, #9
 8000584:	4680      	mov	r8, r0
 8000586:	4441      	add	r1, r8
 8000588:	0c25      	lsrs	r5, r4, #16
 800058a:	186d      	adds	r5, r5, r1
 800058c:	4661      	mov	r1, ip
 800058e:	4359      	muls	r1, r3
 8000590:	437a      	muls	r2, r7
 8000592:	0430      	lsls	r0, r6, #16
 8000594:	1949      	adds	r1, r1, r5
 8000596:	0424      	lsls	r4, r4, #16
 8000598:	0c00      	lsrs	r0, r0, #16
 800059a:	1820      	adds	r0, r4, r0
 800059c:	1889      	adds	r1, r1, r2
 800059e:	bc80      	pop	{r7}
 80005a0:	46b8      	mov	r8, r7
 80005a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005a4 <__aeabi_f2uiz>:
 80005a4:	219e      	movs	r1, #158	; 0x9e
 80005a6:	b510      	push	{r4, lr}
 80005a8:	05c9      	lsls	r1, r1, #23
 80005aa:	1c04      	adds	r4, r0, #0
 80005ac:	f7ff ffa4 	bl	80004f8 <__aeabi_fcmpge>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d103      	bne.n	80005bc <__aeabi_f2uiz+0x18>
 80005b4:	1c20      	adds	r0, r4, #0
 80005b6:	f000 fbbd 	bl	8000d34 <__aeabi_f2iz>
 80005ba:	bd10      	pop	{r4, pc}
 80005bc:	219e      	movs	r1, #158	; 0x9e
 80005be:	1c20      	adds	r0, r4, #0
 80005c0:	05c9      	lsls	r1, r1, #23
 80005c2:	f000 f9ef 	bl	80009a4 <__aeabi_fsub>
 80005c6:	f000 fbb5 	bl	8000d34 <__aeabi_f2iz>
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	061b      	lsls	r3, r3, #24
 80005ce:	469c      	mov	ip, r3
 80005d0:	4460      	add	r0, ip
 80005d2:	e7f2      	b.n	80005ba <__aeabi_f2uiz+0x16>

080005d4 <__gnu_ldivmod_helper>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	46ce      	mov	lr, r9
 80005d8:	4647      	mov	r7, r8
 80005da:	b580      	push	{r7, lr}
 80005dc:	4691      	mov	r9, r2
 80005de:	4698      	mov	r8, r3
 80005e0:	0004      	movs	r4, r0
 80005e2:	000d      	movs	r5, r1
 80005e4:	f002 faa8 	bl	8002b38 <__divdi3>
 80005e8:	0007      	movs	r7, r0
 80005ea:	000e      	movs	r6, r1
 80005ec:	0002      	movs	r2, r0
 80005ee:	000b      	movs	r3, r1
 80005f0:	4648      	mov	r0, r9
 80005f2:	4641      	mov	r1, r8
 80005f4:	f7ff ffae 	bl	8000554 <__aeabi_lmul>
 80005f8:	1a24      	subs	r4, r4, r0
 80005fa:	418d      	sbcs	r5, r1
 80005fc:	9b08      	ldr	r3, [sp, #32]
 80005fe:	0038      	movs	r0, r7
 8000600:	0031      	movs	r1, r6
 8000602:	601c      	str	r4, [r3, #0]
 8000604:	605d      	str	r5, [r3, #4]
 8000606:	bcc0      	pop	{r6, r7}
 8000608:	46b9      	mov	r9, r7
 800060a:	46b0      	mov	r8, r6
 800060c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)

08000610 <__aeabi_fdiv>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	464f      	mov	r7, r9
 8000614:	4646      	mov	r6, r8
 8000616:	46d6      	mov	lr, sl
 8000618:	0245      	lsls	r5, r0, #9
 800061a:	b5c0      	push	{r6, r7, lr}
 800061c:	0047      	lsls	r7, r0, #1
 800061e:	1c0c      	adds	r4, r1, #0
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e3f      	lsrs	r7, r7, #24
 8000624:	0fc6      	lsrs	r6, r0, #31
 8000626:	2f00      	cmp	r7, #0
 8000628:	d066      	beq.n	80006f8 <__aeabi_fdiv+0xe8>
 800062a:	2fff      	cmp	r7, #255	; 0xff
 800062c:	d06c      	beq.n	8000708 <__aeabi_fdiv+0xf8>
 800062e:	2300      	movs	r3, #0
 8000630:	00ea      	lsls	r2, r5, #3
 8000632:	2580      	movs	r5, #128	; 0x80
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	04ed      	lsls	r5, r5, #19
 800063a:	4315      	orrs	r5, r2
 800063c:	3f7f      	subs	r7, #127	; 0x7f
 800063e:	0260      	lsls	r0, r4, #9
 8000640:	0061      	lsls	r1, r4, #1
 8000642:	0a43      	lsrs	r3, r0, #9
 8000644:	4698      	mov	r8, r3
 8000646:	0e09      	lsrs	r1, r1, #24
 8000648:	0fe4      	lsrs	r4, r4, #31
 800064a:	2900      	cmp	r1, #0
 800064c:	d048      	beq.n	80006e0 <__aeabi_fdiv+0xd0>
 800064e:	29ff      	cmp	r1, #255	; 0xff
 8000650:	d010      	beq.n	8000674 <__aeabi_fdiv+0x64>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	00d8      	lsls	r0, r3, #3
 8000656:	04d2      	lsls	r2, r2, #19
 8000658:	4302      	orrs	r2, r0
 800065a:	4690      	mov	r8, r2
 800065c:	2000      	movs	r0, #0
 800065e:	397f      	subs	r1, #127	; 0x7f
 8000660:	464a      	mov	r2, r9
 8000662:	0033      	movs	r3, r6
 8000664:	1a7f      	subs	r7, r7, r1
 8000666:	4302      	orrs	r2, r0
 8000668:	496c      	ldr	r1, [pc, #432]	; (800081c <__aeabi_fdiv+0x20c>)
 800066a:	0092      	lsls	r2, r2, #2
 800066c:	588a      	ldr	r2, [r1, r2]
 800066e:	4063      	eors	r3, r4
 8000670:	b2db      	uxtb	r3, r3
 8000672:	4697      	mov	pc, r2
 8000674:	2b00      	cmp	r3, #0
 8000676:	d16d      	bne.n	8000754 <__aeabi_fdiv+0x144>
 8000678:	2002      	movs	r0, #2
 800067a:	3fff      	subs	r7, #255	; 0xff
 800067c:	e033      	b.n	80006e6 <__aeabi_fdiv+0xd6>
 800067e:	2300      	movs	r3, #0
 8000680:	4698      	mov	r8, r3
 8000682:	0026      	movs	r6, r4
 8000684:	4645      	mov	r5, r8
 8000686:	4682      	mov	sl, r0
 8000688:	4653      	mov	r3, sl
 800068a:	2b02      	cmp	r3, #2
 800068c:	d100      	bne.n	8000690 <__aeabi_fdiv+0x80>
 800068e:	e07f      	b.n	8000790 <__aeabi_fdiv+0x180>
 8000690:	2b03      	cmp	r3, #3
 8000692:	d100      	bne.n	8000696 <__aeabi_fdiv+0x86>
 8000694:	e094      	b.n	80007c0 <__aeabi_fdiv+0x1b0>
 8000696:	2b01      	cmp	r3, #1
 8000698:	d017      	beq.n	80006ca <__aeabi_fdiv+0xba>
 800069a:	0038      	movs	r0, r7
 800069c:	307f      	adds	r0, #127	; 0x7f
 800069e:	2800      	cmp	r0, #0
 80006a0:	dd5f      	ble.n	8000762 <__aeabi_fdiv+0x152>
 80006a2:	076b      	lsls	r3, r5, #29
 80006a4:	d004      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006a6:	230f      	movs	r3, #15
 80006a8:	402b      	ands	r3, r5
 80006aa:	2b04      	cmp	r3, #4
 80006ac:	d000      	beq.n	80006b0 <__aeabi_fdiv+0xa0>
 80006ae:	3504      	adds	r5, #4
 80006b0:	012b      	lsls	r3, r5, #4
 80006b2:	d503      	bpl.n	80006bc <__aeabi_fdiv+0xac>
 80006b4:	0038      	movs	r0, r7
 80006b6:	4b5a      	ldr	r3, [pc, #360]	; (8000820 <__aeabi_fdiv+0x210>)
 80006b8:	3080      	adds	r0, #128	; 0x80
 80006ba:	401d      	ands	r5, r3
 80006bc:	28fe      	cmp	r0, #254	; 0xfe
 80006be:	dc67      	bgt.n	8000790 <__aeabi_fdiv+0x180>
 80006c0:	01ad      	lsls	r5, r5, #6
 80006c2:	0a6d      	lsrs	r5, r5, #9
 80006c4:	b2c0      	uxtb	r0, r0
 80006c6:	e002      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80006c8:	001e      	movs	r6, r3
 80006ca:	2000      	movs	r0, #0
 80006cc:	2500      	movs	r5, #0
 80006ce:	05c0      	lsls	r0, r0, #23
 80006d0:	4328      	orrs	r0, r5
 80006d2:	07f6      	lsls	r6, r6, #31
 80006d4:	4330      	orrs	r0, r6
 80006d6:	bce0      	pop	{r5, r6, r7}
 80006d8:	46ba      	mov	sl, r7
 80006da:	46b1      	mov	r9, r6
 80006dc:	46a8      	mov	r8, r5
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d12b      	bne.n	800073c <__aeabi_fdiv+0x12c>
 80006e4:	2001      	movs	r0, #1
 80006e6:	464a      	mov	r2, r9
 80006e8:	0033      	movs	r3, r6
 80006ea:	494e      	ldr	r1, [pc, #312]	; (8000824 <__aeabi_fdiv+0x214>)
 80006ec:	4302      	orrs	r2, r0
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	588a      	ldr	r2, [r1, r2]
 80006f2:	4063      	eors	r3, r4
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4697      	mov	pc, r2
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d113      	bne.n	8000724 <__aeabi_fdiv+0x114>
 80006fc:	2304      	movs	r3, #4
 80006fe:	4699      	mov	r9, r3
 8000700:	3b03      	subs	r3, #3
 8000702:	2700      	movs	r7, #0
 8000704:	469a      	mov	sl, r3
 8000706:	e79a      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000708:	2d00      	cmp	r5, #0
 800070a:	d105      	bne.n	8000718 <__aeabi_fdiv+0x108>
 800070c:	2308      	movs	r3, #8
 800070e:	4699      	mov	r9, r3
 8000710:	3b06      	subs	r3, #6
 8000712:	27ff      	movs	r7, #255	; 0xff
 8000714:	469a      	mov	sl, r3
 8000716:	e792      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000718:	230c      	movs	r3, #12
 800071a:	4699      	mov	r9, r3
 800071c:	3b09      	subs	r3, #9
 800071e:	27ff      	movs	r7, #255	; 0xff
 8000720:	469a      	mov	sl, r3
 8000722:	e78c      	b.n	800063e <__aeabi_fdiv+0x2e>
 8000724:	0028      	movs	r0, r5
 8000726:	f002 f9e9 	bl	8002afc <__clzsi2>
 800072a:	2776      	movs	r7, #118	; 0x76
 800072c:	1f43      	subs	r3, r0, #5
 800072e:	409d      	lsls	r5, r3
 8000730:	2300      	movs	r3, #0
 8000732:	427f      	negs	r7, r7
 8000734:	4699      	mov	r9, r3
 8000736:	469a      	mov	sl, r3
 8000738:	1a3f      	subs	r7, r7, r0
 800073a:	e780      	b.n	800063e <__aeabi_fdiv+0x2e>
 800073c:	0018      	movs	r0, r3
 800073e:	f002 f9dd 	bl	8002afc <__clzsi2>
 8000742:	4642      	mov	r2, r8
 8000744:	1f43      	subs	r3, r0, #5
 8000746:	2176      	movs	r1, #118	; 0x76
 8000748:	409a      	lsls	r2, r3
 800074a:	4249      	negs	r1, r1
 800074c:	1a09      	subs	r1, r1, r0
 800074e:	4690      	mov	r8, r2
 8000750:	2000      	movs	r0, #0
 8000752:	e785      	b.n	8000660 <__aeabi_fdiv+0x50>
 8000754:	21ff      	movs	r1, #255	; 0xff
 8000756:	2003      	movs	r0, #3
 8000758:	e782      	b.n	8000660 <__aeabi_fdiv+0x50>
 800075a:	001e      	movs	r6, r3
 800075c:	20ff      	movs	r0, #255	; 0xff
 800075e:	2500      	movs	r5, #0
 8000760:	e7b5      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000762:	2301      	movs	r3, #1
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	2b1b      	cmp	r3, #27
 8000768:	dcaf      	bgt.n	80006ca <__aeabi_fdiv+0xba>
 800076a:	379e      	adds	r7, #158	; 0x9e
 800076c:	0029      	movs	r1, r5
 800076e:	40bd      	lsls	r5, r7
 8000770:	40d9      	lsrs	r1, r3
 8000772:	1e6a      	subs	r2, r5, #1
 8000774:	4195      	sbcs	r5, r2
 8000776:	430d      	orrs	r5, r1
 8000778:	076b      	lsls	r3, r5, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fdiv+0x176>
 800077c:	230f      	movs	r3, #15
 800077e:	402b      	ands	r3, r5
 8000780:	2b04      	cmp	r3, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fdiv+0x176>
 8000784:	3504      	adds	r5, #4
 8000786:	016b      	lsls	r3, r5, #5
 8000788:	d544      	bpl.n	8000814 <__aeabi_fdiv+0x204>
 800078a:	2001      	movs	r0, #1
 800078c:	2500      	movs	r5, #0
 800078e:	e79e      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	2500      	movs	r5, #0
 8000794:	e79b      	b.n	80006ce <__aeabi_fdiv+0xbe>
 8000796:	2580      	movs	r5, #128	; 0x80
 8000798:	2600      	movs	r6, #0
 800079a:	20ff      	movs	r0, #255	; 0xff
 800079c:	03ed      	lsls	r5, r5, #15
 800079e:	e796      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007a0:	2300      	movs	r3, #0
 80007a2:	4698      	mov	r8, r3
 80007a4:	2080      	movs	r0, #128	; 0x80
 80007a6:	03c0      	lsls	r0, r0, #15
 80007a8:	4205      	tst	r5, r0
 80007aa:	d009      	beq.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007ac:	4643      	mov	r3, r8
 80007ae:	4203      	tst	r3, r0
 80007b0:	d106      	bne.n	80007c0 <__aeabi_fdiv+0x1b0>
 80007b2:	4645      	mov	r5, r8
 80007b4:	4305      	orrs	r5, r0
 80007b6:	026d      	lsls	r5, r5, #9
 80007b8:	0026      	movs	r6, r4
 80007ba:	20ff      	movs	r0, #255	; 0xff
 80007bc:	0a6d      	lsrs	r5, r5, #9
 80007be:	e786      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007c0:	2080      	movs	r0, #128	; 0x80
 80007c2:	03c0      	lsls	r0, r0, #15
 80007c4:	4305      	orrs	r5, r0
 80007c6:	026d      	lsls	r5, r5, #9
 80007c8:	20ff      	movs	r0, #255	; 0xff
 80007ca:	0a6d      	lsrs	r5, r5, #9
 80007cc:	e77f      	b.n	80006ce <__aeabi_fdiv+0xbe>
 80007ce:	4641      	mov	r1, r8
 80007d0:	016a      	lsls	r2, r5, #5
 80007d2:	0148      	lsls	r0, r1, #5
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d219      	bcs.n	800080c <__aeabi_fdiv+0x1fc>
 80007d8:	211b      	movs	r1, #27
 80007da:	2500      	movs	r5, #0
 80007dc:	3f01      	subs	r7, #1
 80007de:	2601      	movs	r6, #1
 80007e0:	0014      	movs	r4, r2
 80007e2:	006d      	lsls	r5, r5, #1
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	2c00      	cmp	r4, #0
 80007e8:	db01      	blt.n	80007ee <__aeabi_fdiv+0x1de>
 80007ea:	4290      	cmp	r0, r2
 80007ec:	d801      	bhi.n	80007f2 <__aeabi_fdiv+0x1e2>
 80007ee:	1a12      	subs	r2, r2, r0
 80007f0:	4335      	orrs	r5, r6
 80007f2:	3901      	subs	r1, #1
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d1f3      	bne.n	80007e0 <__aeabi_fdiv+0x1d0>
 80007f8:	1e50      	subs	r0, r2, #1
 80007fa:	4182      	sbcs	r2, r0
 80007fc:	0038      	movs	r0, r7
 80007fe:	307f      	adds	r0, #127	; 0x7f
 8000800:	001e      	movs	r6, r3
 8000802:	4315      	orrs	r5, r2
 8000804:	2800      	cmp	r0, #0
 8000806:	dd00      	ble.n	800080a <__aeabi_fdiv+0x1fa>
 8000808:	e74b      	b.n	80006a2 <__aeabi_fdiv+0x92>
 800080a:	e7aa      	b.n	8000762 <__aeabi_fdiv+0x152>
 800080c:	211a      	movs	r1, #26
 800080e:	2501      	movs	r5, #1
 8000810:	1a12      	subs	r2, r2, r0
 8000812:	e7e4      	b.n	80007de <__aeabi_fdiv+0x1ce>
 8000814:	01ad      	lsls	r5, r5, #6
 8000816:	2000      	movs	r0, #0
 8000818:	0a6d      	lsrs	r5, r5, #9
 800081a:	e758      	b.n	80006ce <__aeabi_fdiv+0xbe>
 800081c:	08009da0 	.word	0x08009da0
 8000820:	f7ffffff 	.word	0xf7ffffff
 8000824:	08009de0 	.word	0x08009de0

08000828 <__eqsf2>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	0042      	lsls	r2, r0, #1
 800082c:	024e      	lsls	r6, r1, #9
 800082e:	004c      	lsls	r4, r1, #1
 8000830:	0245      	lsls	r5, r0, #9
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	0e12      	lsrs	r2, r2, #24
 8000836:	0fc3      	lsrs	r3, r0, #31
 8000838:	0a76      	lsrs	r6, r6, #9
 800083a:	0e24      	lsrs	r4, r4, #24
 800083c:	0fc9      	lsrs	r1, r1, #31
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d00f      	beq.n	8000862 <__eqsf2+0x3a>
 8000842:	2cff      	cmp	r4, #255	; 0xff
 8000844:	d011      	beq.n	800086a <__eqsf2+0x42>
 8000846:	2001      	movs	r0, #1
 8000848:	42a2      	cmp	r2, r4
 800084a:	d000      	beq.n	800084e <__eqsf2+0x26>
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	42b5      	cmp	r5, r6
 8000850:	d1fc      	bne.n	800084c <__eqsf2+0x24>
 8000852:	428b      	cmp	r3, r1
 8000854:	d00d      	beq.n	8000872 <__eqsf2+0x4a>
 8000856:	2a00      	cmp	r2, #0
 8000858:	d1f8      	bne.n	800084c <__eqsf2+0x24>
 800085a:	0028      	movs	r0, r5
 800085c:	1e45      	subs	r5, r0, #1
 800085e:	41a8      	sbcs	r0, r5
 8000860:	e7f4      	b.n	800084c <__eqsf2+0x24>
 8000862:	2001      	movs	r0, #1
 8000864:	2d00      	cmp	r5, #0
 8000866:	d1f1      	bne.n	800084c <__eqsf2+0x24>
 8000868:	e7eb      	b.n	8000842 <__eqsf2+0x1a>
 800086a:	2001      	movs	r0, #1
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1ed      	bne.n	800084c <__eqsf2+0x24>
 8000870:	e7e9      	b.n	8000846 <__eqsf2+0x1e>
 8000872:	2000      	movs	r0, #0
 8000874:	e7ea      	b.n	800084c <__eqsf2+0x24>
 8000876:	46c0      	nop			; (mov r8, r8)

08000878 <__gesf2>:
 8000878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087a:	0042      	lsls	r2, r0, #1
 800087c:	0246      	lsls	r6, r0, #9
 800087e:	024d      	lsls	r5, r1, #9
 8000880:	004c      	lsls	r4, r1, #1
 8000882:	0fc3      	lsrs	r3, r0, #31
 8000884:	0a76      	lsrs	r6, r6, #9
 8000886:	0e12      	lsrs	r2, r2, #24
 8000888:	0a6d      	lsrs	r5, r5, #9
 800088a:	0e24      	lsrs	r4, r4, #24
 800088c:	0fc8      	lsrs	r0, r1, #31
 800088e:	2aff      	cmp	r2, #255	; 0xff
 8000890:	d01f      	beq.n	80008d2 <__gesf2+0x5a>
 8000892:	2cff      	cmp	r4, #255	; 0xff
 8000894:	d010      	beq.n	80008b8 <__gesf2+0x40>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d11f      	bne.n	80008da <__gesf2+0x62>
 800089a:	4271      	negs	r1, r6
 800089c:	4171      	adcs	r1, r6
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d101      	bne.n	80008a6 <__gesf2+0x2e>
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	d01e      	beq.n	80008e4 <__gesf2+0x6c>
 80008a6:	2900      	cmp	r1, #0
 80008a8:	d10e      	bne.n	80008c8 <__gesf2+0x50>
 80008aa:	4283      	cmp	r3, r0
 80008ac:	d01e      	beq.n	80008ec <__gesf2+0x74>
 80008ae:	2102      	movs	r1, #2
 80008b0:	1e58      	subs	r0, r3, #1
 80008b2:	4008      	ands	r0, r1
 80008b4:	3801      	subs	r0, #1
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d126      	bne.n	800090a <__gesf2+0x92>
 80008bc:	2a00      	cmp	r2, #0
 80008be:	d1f4      	bne.n	80008aa <__gesf2+0x32>
 80008c0:	4271      	negs	r1, r6
 80008c2:	4171      	adcs	r1, r6
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0f0      	beq.n	80008aa <__gesf2+0x32>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d1f4      	bne.n	80008b6 <__gesf2+0x3e>
 80008cc:	2001      	movs	r0, #1
 80008ce:	4240      	negs	r0, r0
 80008d0:	e7f1      	b.n	80008b6 <__gesf2+0x3e>
 80008d2:	2e00      	cmp	r6, #0
 80008d4:	d119      	bne.n	800090a <__gesf2+0x92>
 80008d6:	2cff      	cmp	r4, #255	; 0xff
 80008d8:	d0ee      	beq.n	80008b8 <__gesf2+0x40>
 80008da:	2c00      	cmp	r4, #0
 80008dc:	d1e5      	bne.n	80008aa <__gesf2+0x32>
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d1e3      	bne.n	80008aa <__gesf2+0x32>
 80008e2:	e7e4      	b.n	80008ae <__gesf2+0x36>
 80008e4:	2000      	movs	r0, #0
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d0e5      	beq.n	80008b6 <__gesf2+0x3e>
 80008ea:	e7e0      	b.n	80008ae <__gesf2+0x36>
 80008ec:	42a2      	cmp	r2, r4
 80008ee:	dc05      	bgt.n	80008fc <__gesf2+0x84>
 80008f0:	dbea      	blt.n	80008c8 <__gesf2+0x50>
 80008f2:	42ae      	cmp	r6, r5
 80008f4:	d802      	bhi.n	80008fc <__gesf2+0x84>
 80008f6:	d3e7      	bcc.n	80008c8 <__gesf2+0x50>
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7dc      	b.n	80008b6 <__gesf2+0x3e>
 80008fc:	4241      	negs	r1, r0
 80008fe:	4141      	adcs	r1, r0
 8000900:	4248      	negs	r0, r1
 8000902:	2102      	movs	r1, #2
 8000904:	4008      	ands	r0, r1
 8000906:	3801      	subs	r0, #1
 8000908:	e7d5      	b.n	80008b6 <__gesf2+0x3e>
 800090a:	2002      	movs	r0, #2
 800090c:	4240      	negs	r0, r0
 800090e:	e7d2      	b.n	80008b6 <__gesf2+0x3e>

08000910 <__lesf2>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	0042      	lsls	r2, r0, #1
 8000914:	0246      	lsls	r6, r0, #9
 8000916:	024d      	lsls	r5, r1, #9
 8000918:	004c      	lsls	r4, r1, #1
 800091a:	0fc3      	lsrs	r3, r0, #31
 800091c:	0a76      	lsrs	r6, r6, #9
 800091e:	0e12      	lsrs	r2, r2, #24
 8000920:	0a6d      	lsrs	r5, r5, #9
 8000922:	0e24      	lsrs	r4, r4, #24
 8000924:	0fc8      	lsrs	r0, r1, #31
 8000926:	2aff      	cmp	r2, #255	; 0xff
 8000928:	d00d      	beq.n	8000946 <__lesf2+0x36>
 800092a:	2cff      	cmp	r4, #255	; 0xff
 800092c:	d00f      	beq.n	800094e <__lesf2+0x3e>
 800092e:	2a00      	cmp	r2, #0
 8000930:	d123      	bne.n	800097a <__lesf2+0x6a>
 8000932:	4271      	negs	r1, r6
 8000934:	4171      	adcs	r1, r6
 8000936:	2c00      	cmp	r4, #0
 8000938:	d10f      	bne.n	800095a <__lesf2+0x4a>
 800093a:	2d00      	cmp	r5, #0
 800093c:	d10d      	bne.n	800095a <__lesf2+0x4a>
 800093e:	2000      	movs	r0, #0
 8000940:	2e00      	cmp	r6, #0
 8000942:	d014      	beq.n	800096e <__lesf2+0x5e>
 8000944:	e00d      	b.n	8000962 <__lesf2+0x52>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d110      	bne.n	800096c <__lesf2+0x5c>
 800094a:	2cff      	cmp	r4, #255	; 0xff
 800094c:	d115      	bne.n	800097a <__lesf2+0x6a>
 800094e:	2d00      	cmp	r5, #0
 8000950:	d10c      	bne.n	800096c <__lesf2+0x5c>
 8000952:	2a00      	cmp	r2, #0
 8000954:	d103      	bne.n	800095e <__lesf2+0x4e>
 8000956:	4271      	negs	r1, r6
 8000958:	4171      	adcs	r1, r6
 800095a:	2900      	cmp	r1, #0
 800095c:	d108      	bne.n	8000970 <__lesf2+0x60>
 800095e:	4283      	cmp	r3, r0
 8000960:	d010      	beq.n	8000984 <__lesf2+0x74>
 8000962:	2102      	movs	r1, #2
 8000964:	1e58      	subs	r0, r3, #1
 8000966:	4008      	ands	r0, r1
 8000968:	3801      	subs	r0, #1
 800096a:	e000      	b.n	800096e <__lesf2+0x5e>
 800096c:	2002      	movs	r0, #2
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	2800      	cmp	r0, #0
 8000972:	d1fc      	bne.n	800096e <__lesf2+0x5e>
 8000974:	2001      	movs	r0, #1
 8000976:	4240      	negs	r0, r0
 8000978:	e7f9      	b.n	800096e <__lesf2+0x5e>
 800097a:	2c00      	cmp	r4, #0
 800097c:	d1ef      	bne.n	800095e <__lesf2+0x4e>
 800097e:	2d00      	cmp	r5, #0
 8000980:	d1ed      	bne.n	800095e <__lesf2+0x4e>
 8000982:	e7ee      	b.n	8000962 <__lesf2+0x52>
 8000984:	42a2      	cmp	r2, r4
 8000986:	dc05      	bgt.n	8000994 <__lesf2+0x84>
 8000988:	dbf2      	blt.n	8000970 <__lesf2+0x60>
 800098a:	42ae      	cmp	r6, r5
 800098c:	d802      	bhi.n	8000994 <__lesf2+0x84>
 800098e:	d3ef      	bcc.n	8000970 <__lesf2+0x60>
 8000990:	2000      	movs	r0, #0
 8000992:	e7ec      	b.n	800096e <__lesf2+0x5e>
 8000994:	4241      	negs	r1, r0
 8000996:	4141      	adcs	r1, r0
 8000998:	4248      	negs	r0, r1
 800099a:	2102      	movs	r1, #2
 800099c:	4008      	ands	r0, r1
 800099e:	3801      	subs	r0, #1
 80009a0:	e7e5      	b.n	800096e <__lesf2+0x5e>
 80009a2:	46c0      	nop			; (mov r8, r8)

080009a4 <__aeabi_fsub>:
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	4646      	mov	r6, r8
 80009a8:	46d6      	mov	lr, sl
 80009aa:	464f      	mov	r7, r9
 80009ac:	0243      	lsls	r3, r0, #9
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	00da      	lsls	r2, r3, #3
 80009b2:	4694      	mov	ip, r2
 80009b4:	024a      	lsls	r2, r1, #9
 80009b6:	b5c0      	push	{r6, r7, lr}
 80009b8:	0044      	lsls	r4, r0, #1
 80009ba:	0a56      	lsrs	r6, r2, #9
 80009bc:	1c05      	adds	r5, r0, #0
 80009be:	46b0      	mov	r8, r6
 80009c0:	0e24      	lsrs	r4, r4, #24
 80009c2:	004e      	lsls	r6, r1, #1
 80009c4:	0992      	lsrs	r2, r2, #6
 80009c6:	001f      	movs	r7, r3
 80009c8:	0020      	movs	r0, r4
 80009ca:	4692      	mov	sl, r2
 80009cc:	0fed      	lsrs	r5, r5, #31
 80009ce:	0e36      	lsrs	r6, r6, #24
 80009d0:	0fc9      	lsrs	r1, r1, #31
 80009d2:	2eff      	cmp	r6, #255	; 0xff
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0x34>
 80009d6:	e07f      	b.n	8000ad8 <__aeabi_fsub+0x134>
 80009d8:	2201      	movs	r2, #1
 80009da:	4051      	eors	r1, r2
 80009dc:	428d      	cmp	r5, r1
 80009de:	d051      	beq.n	8000a84 <__aeabi_fsub+0xe0>
 80009e0:	1ba2      	subs	r2, r4, r6
 80009e2:	4691      	mov	r9, r2
 80009e4:	2a00      	cmp	r2, #0
 80009e6:	dc00      	bgt.n	80009ea <__aeabi_fsub+0x46>
 80009e8:	e07e      	b.n	8000ae8 <__aeabi_fsub+0x144>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fsub+0x4c>
 80009ee:	e099      	b.n	8000b24 <__aeabi_fsub+0x180>
 80009f0:	2cff      	cmp	r4, #255	; 0xff
 80009f2:	d100      	bne.n	80009f6 <__aeabi_fsub+0x52>
 80009f4:	e08c      	b.n	8000b10 <__aeabi_fsub+0x16c>
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	4652      	mov	r2, sl
 80009fa:	04db      	lsls	r3, r3, #19
 80009fc:	431a      	orrs	r2, r3
 80009fe:	4692      	mov	sl, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	2301      	movs	r3, #1
 8000a04:	2a1b      	cmp	r2, #27
 8000a06:	dc08      	bgt.n	8000a1a <__aeabi_fsub+0x76>
 8000a08:	4653      	mov	r3, sl
 8000a0a:	2120      	movs	r1, #32
 8000a0c:	40d3      	lsrs	r3, r2
 8000a0e:	1a89      	subs	r1, r1, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	408a      	lsls	r2, r1
 8000a14:	1e51      	subs	r1, r2, #1
 8000a16:	418a      	sbcs	r2, r1
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	4662      	mov	r2, ip
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	015a      	lsls	r2, r3, #5
 8000a20:	d400      	bmi.n	8000a24 <__aeabi_fsub+0x80>
 8000a22:	e0f3      	b.n	8000c0c <__aeabi_fsub+0x268>
 8000a24:	019b      	lsls	r3, r3, #6
 8000a26:	099e      	lsrs	r6, r3, #6
 8000a28:	0030      	movs	r0, r6
 8000a2a:	f002 f867 	bl	8002afc <__clzsi2>
 8000a2e:	3805      	subs	r0, #5
 8000a30:	4086      	lsls	r6, r0
 8000a32:	4284      	cmp	r4, r0
 8000a34:	dd00      	ble.n	8000a38 <__aeabi_fsub+0x94>
 8000a36:	e0f7      	b.n	8000c28 <__aeabi_fsub+0x284>
 8000a38:	0032      	movs	r2, r6
 8000a3a:	1b04      	subs	r4, r0, r4
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	3401      	adds	r4, #1
 8000a40:	40e2      	lsrs	r2, r4
 8000a42:	1b04      	subs	r4, r0, r4
 8000a44:	40a6      	lsls	r6, r4
 8000a46:	0033      	movs	r3, r6
 8000a48:	1e5e      	subs	r6, r3, #1
 8000a4a:	41b3      	sbcs	r3, r6
 8000a4c:	2400      	movs	r4, #0
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	075a      	lsls	r2, r3, #29
 8000a52:	d004      	beq.n	8000a5e <__aeabi_fsub+0xba>
 8000a54:	220f      	movs	r2, #15
 8000a56:	401a      	ands	r2, r3
 8000a58:	2a04      	cmp	r2, #4
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_fsub+0xba>
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	015a      	lsls	r2, r3, #5
 8000a60:	d400      	bmi.n	8000a64 <__aeabi_fsub+0xc0>
 8000a62:	e0d6      	b.n	8000c12 <__aeabi_fsub+0x26e>
 8000a64:	1c62      	adds	r2, r4, #1
 8000a66:	2cfe      	cmp	r4, #254	; 0xfe
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fsub+0xc8>
 8000a6a:	e0da      	b.n	8000c22 <__aeabi_fsub+0x27e>
 8000a6c:	019b      	lsls	r3, r3, #6
 8000a6e:	0a5f      	lsrs	r7, r3, #9
 8000a70:	b2d0      	uxtb	r0, r2
 8000a72:	05c0      	lsls	r0, r0, #23
 8000a74:	4338      	orrs	r0, r7
 8000a76:	07ed      	lsls	r5, r5, #31
 8000a78:	4328      	orrs	r0, r5
 8000a7a:	bce0      	pop	{r5, r6, r7}
 8000a7c:	46ba      	mov	sl, r7
 8000a7e:	46b1      	mov	r9, r6
 8000a80:	46a8      	mov	r8, r5
 8000a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a84:	1ba2      	subs	r2, r4, r6
 8000a86:	4691      	mov	r9, r2
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	dd63      	ble.n	8000b54 <__aeabi_fsub+0x1b0>
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0xee>
 8000a90:	e099      	b.n	8000bc6 <__aeabi_fsub+0x222>
 8000a92:	2cff      	cmp	r4, #255	; 0xff
 8000a94:	d03c      	beq.n	8000b10 <__aeabi_fsub+0x16c>
 8000a96:	2380      	movs	r3, #128	; 0x80
 8000a98:	4652      	mov	r2, sl
 8000a9a:	04db      	lsls	r3, r3, #19
 8000a9c:	431a      	orrs	r2, r3
 8000a9e:	4692      	mov	sl, r2
 8000aa0:	464a      	mov	r2, r9
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	2a1b      	cmp	r2, #27
 8000aa6:	dc08      	bgt.n	8000aba <__aeabi_fsub+0x116>
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	2120      	movs	r1, #32
 8000aac:	40d3      	lsrs	r3, r2
 8000aae:	1a89      	subs	r1, r1, r2
 8000ab0:	4652      	mov	r2, sl
 8000ab2:	408a      	lsls	r2, r1
 8000ab4:	1e51      	subs	r1, r2, #1
 8000ab6:	418a      	sbcs	r2, r1
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	4463      	add	r3, ip
 8000abc:	015a      	lsls	r2, r3, #5
 8000abe:	d400      	bmi.n	8000ac2 <__aeabi_fsub+0x11e>
 8000ac0:	e0a4      	b.n	8000c0c <__aeabi_fsub+0x268>
 8000ac2:	3401      	adds	r4, #1
 8000ac4:	2cff      	cmp	r4, #255	; 0xff
 8000ac6:	d100      	bne.n	8000aca <__aeabi_fsub+0x126>
 8000ac8:	e0ab      	b.n	8000c22 <__aeabi_fsub+0x27e>
 8000aca:	2201      	movs	r2, #1
 8000acc:	4997      	ldr	r1, [pc, #604]	; (8000d2c <__aeabi_fsub+0x388>)
 8000ace:	401a      	ands	r2, r3
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	400b      	ands	r3, r1
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	e7bb      	b.n	8000a50 <__aeabi_fsub+0xac>
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	d032      	beq.n	8000b42 <__aeabi_fsub+0x19e>
 8000adc:	428d      	cmp	r5, r1
 8000ade:	d035      	beq.n	8000b4c <__aeabi_fsub+0x1a8>
 8000ae0:	22ff      	movs	r2, #255	; 0xff
 8000ae2:	4252      	negs	r2, r2
 8000ae4:	4691      	mov	r9, r2
 8000ae6:	44a1      	add	r9, r4
 8000ae8:	464a      	mov	r2, r9
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d051      	beq.n	8000b92 <__aeabi_fsub+0x1ee>
 8000aee:	1b30      	subs	r0, r6, r4
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d000      	beq.n	8000af6 <__aeabi_fsub+0x152>
 8000af4:	e09c      	b.n	8000c30 <__aeabi_fsub+0x28c>
 8000af6:	4663      	mov	r3, ip
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_fsub+0x15a>
 8000afc:	e0df      	b.n	8000cbe <__aeabi_fsub+0x31a>
 8000afe:	3801      	subs	r0, #1
 8000b00:	2800      	cmp	r0, #0
 8000b02:	d100      	bne.n	8000b06 <__aeabi_fsub+0x162>
 8000b04:	e0f7      	b.n	8000cf6 <__aeabi_fsub+0x352>
 8000b06:	2eff      	cmp	r6, #255	; 0xff
 8000b08:	d000      	beq.n	8000b0c <__aeabi_fsub+0x168>
 8000b0a:	e099      	b.n	8000c40 <__aeabi_fsub+0x29c>
 8000b0c:	000d      	movs	r5, r1
 8000b0e:	4643      	mov	r3, r8
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fsub+0x172>
 8000b14:	e085      	b.n	8000c22 <__aeabi_fsub+0x27e>
 8000b16:	2780      	movs	r7, #128	; 0x80
 8000b18:	03ff      	lsls	r7, r7, #15
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	027f      	lsls	r7, r7, #9
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	0a7f      	lsrs	r7, r7, #9
 8000b22:	e7a6      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000b24:	4652      	mov	r2, sl
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	d074      	beq.n	8000c14 <__aeabi_fsub+0x270>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	4690      	mov	r8, r2
 8000b30:	44c1      	add	r9, r8
 8000b32:	464a      	mov	r2, r9
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x196>
 8000b38:	e0c8      	b.n	8000ccc <__aeabi_fsub+0x328>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d000      	beq.n	8000b40 <__aeabi_fsub+0x19c>
 8000b3e:	e75f      	b.n	8000a00 <__aeabi_fsub+0x5c>
 8000b40:	e7e6      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000b42:	2201      	movs	r2, #1
 8000b44:	4051      	eors	r1, r2
 8000b46:	42a9      	cmp	r1, r5
 8000b48:	d000      	beq.n	8000b4c <__aeabi_fsub+0x1a8>
 8000b4a:	e749      	b.n	80009e0 <__aeabi_fsub+0x3c>
 8000b4c:	22ff      	movs	r2, #255	; 0xff
 8000b4e:	4252      	negs	r2, r2
 8000b50:	4691      	mov	r9, r2
 8000b52:	44a1      	add	r9, r4
 8000b54:	464a      	mov	r2, r9
 8000b56:	2a00      	cmp	r2, #0
 8000b58:	d043      	beq.n	8000be2 <__aeabi_fsub+0x23e>
 8000b5a:	1b31      	subs	r1, r6, r4
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fsub+0x1be>
 8000b60:	e08c      	b.n	8000c7c <__aeabi_fsub+0x2d8>
 8000b62:	2eff      	cmp	r6, #255	; 0xff
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0x1c4>
 8000b66:	e092      	b.n	8000c8e <__aeabi_fsub+0x2ea>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	4662      	mov	r2, ip
 8000b6c:	04db      	lsls	r3, r3, #19
 8000b6e:	431a      	orrs	r2, r3
 8000b70:	4694      	mov	ip, r2
 8000b72:	2301      	movs	r3, #1
 8000b74:	291b      	cmp	r1, #27
 8000b76:	dc09      	bgt.n	8000b8c <__aeabi_fsub+0x1e8>
 8000b78:	2020      	movs	r0, #32
 8000b7a:	4663      	mov	r3, ip
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	40cb      	lsrs	r3, r1
 8000b80:	1a41      	subs	r1, r0, r1
 8000b82:	408a      	lsls	r2, r1
 8000b84:	0011      	movs	r1, r2
 8000b86:	1e48      	subs	r0, r1, #1
 8000b88:	4181      	sbcs	r1, r0
 8000b8a:	430b      	orrs	r3, r1
 8000b8c:	0034      	movs	r4, r6
 8000b8e:	4453      	add	r3, sl
 8000b90:	e794      	b.n	8000abc <__aeabi_fsub+0x118>
 8000b92:	22fe      	movs	r2, #254	; 0xfe
 8000b94:	1c66      	adds	r6, r4, #1
 8000b96:	4232      	tst	r2, r6
 8000b98:	d164      	bne.n	8000c64 <__aeabi_fsub+0x2c0>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fsub+0x1fc>
 8000b9e:	e082      	b.n	8000ca6 <__aeabi_fsub+0x302>
 8000ba0:	4663      	mov	r3, ip
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fsub+0x204>
 8000ba6:	e0ab      	b.n	8000d00 <__aeabi_fsub+0x35c>
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0x20c>
 8000bae:	e760      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000bb0:	4663      	mov	r3, ip
 8000bb2:	4652      	mov	r2, sl
 8000bb4:	1a9b      	subs	r3, r3, r2
 8000bb6:	015a      	lsls	r2, r3, #5
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_fsub+0x218>
 8000bba:	e0aa      	b.n	8000d12 <__aeabi_fsub+0x36e>
 8000bbc:	4663      	mov	r3, ip
 8000bbe:	4652      	mov	r2, sl
 8000bc0:	000d      	movs	r5, r1
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	e744      	b.n	8000a50 <__aeabi_fsub+0xac>
 8000bc6:	4652      	mov	r2, sl
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d023      	beq.n	8000c14 <__aeabi_fsub+0x270>
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4252      	negs	r2, r2
 8000bd0:	4690      	mov	r8, r2
 8000bd2:	44c1      	add	r9, r8
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d075      	beq.n	8000cc6 <__aeabi_fsub+0x322>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d000      	beq.n	8000be0 <__aeabi_fsub+0x23c>
 8000bde:	e75f      	b.n	8000aa0 <__aeabi_fsub+0xfc>
 8000be0:	e796      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000be2:	26fe      	movs	r6, #254	; 0xfe
 8000be4:	3401      	adds	r4, #1
 8000be6:	4226      	tst	r6, r4
 8000be8:	d153      	bne.n	8000c92 <__aeabi_fsub+0x2ee>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	d172      	bne.n	8000cd4 <__aeabi_fsub+0x330>
 8000bee:	4663      	mov	r3, ip
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_fsub+0x252>
 8000bf4:	e093      	b.n	8000d1e <__aeabi_fsub+0x37a>
 8000bf6:	4653      	mov	r3, sl
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fsub+0x25a>
 8000bfc:	e739      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000bfe:	4463      	add	r3, ip
 8000c00:	2400      	movs	r4, #0
 8000c02:	015a      	lsls	r2, r3, #5
 8000c04:	d502      	bpl.n	8000c0c <__aeabi_fsub+0x268>
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <__aeabi_fsub+0x38c>)
 8000c08:	3401      	adds	r4, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	075a      	lsls	r2, r3, #29
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_fsub+0x26e>
 8000c10:	e720      	b.n	8000a54 <__aeabi_fsub+0xb0>
 8000c12:	08db      	lsrs	r3, r3, #3
 8000c14:	2cff      	cmp	r4, #255	; 0xff
 8000c16:	d100      	bne.n	8000c1a <__aeabi_fsub+0x276>
 8000c18:	e77a      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	0a5f      	lsrs	r7, r3, #9
 8000c1e:	b2e0      	uxtb	r0, r4
 8000c20:	e727      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	2700      	movs	r7, #0
 8000c26:	e724      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <__aeabi_fsub+0x38c>)
 8000c2a:	1a24      	subs	r4, r4, r0
 8000c2c:	4033      	ands	r3, r6
 8000c2e:	e70f      	b.n	8000a50 <__aeabi_fsub+0xac>
 8000c30:	2eff      	cmp	r6, #255	; 0xff
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fsub+0x292>
 8000c34:	e76a      	b.n	8000b0c <__aeabi_fsub+0x168>
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	4662      	mov	r2, ip
 8000c3a:	04db      	lsls	r3, r3, #19
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	4694      	mov	ip, r2
 8000c40:	2301      	movs	r3, #1
 8000c42:	281b      	cmp	r0, #27
 8000c44:	dc09      	bgt.n	8000c5a <__aeabi_fsub+0x2b6>
 8000c46:	2420      	movs	r4, #32
 8000c48:	4663      	mov	r3, ip
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	40c3      	lsrs	r3, r0
 8000c4e:	1a20      	subs	r0, r4, r0
 8000c50:	4082      	lsls	r2, r0
 8000c52:	0010      	movs	r0, r2
 8000c54:	1e44      	subs	r4, r0, #1
 8000c56:	41a0      	sbcs	r0, r4
 8000c58:	4303      	orrs	r3, r0
 8000c5a:	4652      	mov	r2, sl
 8000c5c:	000d      	movs	r5, r1
 8000c5e:	0034      	movs	r4, r6
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	e6dc      	b.n	8000a1e <__aeabi_fsub+0x7a>
 8000c64:	4663      	mov	r3, ip
 8000c66:	4652      	mov	r2, sl
 8000c68:	1a9e      	subs	r6, r3, r2
 8000c6a:	0173      	lsls	r3, r6, #5
 8000c6c:	d417      	bmi.n	8000c9e <__aeabi_fsub+0x2fa>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fsub+0x2d0>
 8000c72:	e6d9      	b.n	8000a28 <__aeabi_fsub+0x84>
 8000c74:	2500      	movs	r5, #0
 8000c76:	2000      	movs	r0, #0
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e6fa      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d044      	beq.n	8000d0c <__aeabi_fsub+0x368>
 8000c82:	3901      	subs	r1, #1
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d04c      	beq.n	8000d22 <__aeabi_fsub+0x37e>
 8000c88:	2eff      	cmp	r6, #255	; 0xff
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0x2ea>
 8000c8c:	e771      	b.n	8000b72 <__aeabi_fsub+0x1ce>
 8000c8e:	4643      	mov	r3, r8
 8000c90:	e73e      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000c92:	2cff      	cmp	r4, #255	; 0xff
 8000c94:	d0c5      	beq.n	8000c22 <__aeabi_fsub+0x27e>
 8000c96:	4652      	mov	r2, sl
 8000c98:	4462      	add	r2, ip
 8000c9a:	0853      	lsrs	r3, r2, #1
 8000c9c:	e7b6      	b.n	8000c0c <__aeabi_fsub+0x268>
 8000c9e:	4663      	mov	r3, ip
 8000ca0:	000d      	movs	r5, r1
 8000ca2:	1ad6      	subs	r6, r2, r3
 8000ca4:	e6c0      	b.n	8000a28 <__aeabi_fsub+0x84>
 8000ca6:	4662      	mov	r2, ip
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d116      	bne.n	8000cda <__aeabi_fsub+0x336>
 8000cac:	4653      	mov	r3, sl
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_fsub+0x310>
 8000cb2:	e72b      	b.n	8000b0c <__aeabi_fsub+0x168>
 8000cb4:	2780      	movs	r7, #128	; 0x80
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	20ff      	movs	r0, #255	; 0xff
 8000cba:	03ff      	lsls	r7, r7, #15
 8000cbc:	e6d9      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000cbe:	000d      	movs	r5, r1
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	0034      	movs	r4, r6
 8000cc4:	e7a6      	b.n	8000c14 <__aeabi_fsub+0x270>
 8000cc6:	4653      	mov	r3, sl
 8000cc8:	4463      	add	r3, ip
 8000cca:	e6f7      	b.n	8000abc <__aeabi_fsub+0x118>
 8000ccc:	4663      	mov	r3, ip
 8000cce:	4652      	mov	r2, sl
 8000cd0:	1a9b      	subs	r3, r3, r2
 8000cd2:	e6a4      	b.n	8000a1e <__aeabi_fsub+0x7a>
 8000cd4:	4662      	mov	r2, ip
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d0d9      	beq.n	8000c8e <__aeabi_fsub+0x2ea>
 8000cda:	4652      	mov	r2, sl
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x33e>
 8000ce0:	e716      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	03d2      	lsls	r2, r2, #15
 8000ce6:	4213      	tst	r3, r2
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x348>
 8000cea:	e711      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000cec:	4640      	mov	r0, r8
 8000cee:	4210      	tst	r0, r2
 8000cf0:	d000      	beq.n	8000cf4 <__aeabi_fsub+0x350>
 8000cf2:	e70d      	b.n	8000b10 <__aeabi_fsub+0x16c>
 8000cf4:	e70a      	b.n	8000b0c <__aeabi_fsub+0x168>
 8000cf6:	4652      	mov	r2, sl
 8000cf8:	000d      	movs	r5, r1
 8000cfa:	0034      	movs	r4, r6
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	e68e      	b.n	8000a1e <__aeabi_fsub+0x7a>
 8000d00:	4653      	mov	r3, sl
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d008      	beq.n	8000d18 <__aeabi_fsub+0x374>
 8000d06:	000d      	movs	r5, r1
 8000d08:	4647      	mov	r7, r8
 8000d0a:	e6b2      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	0034      	movs	r4, r6
 8000d10:	e780      	b.n	8000c14 <__aeabi_fsub+0x270>
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d000      	beq.n	8000d18 <__aeabi_fsub+0x374>
 8000d16:	e779      	b.n	8000c0c <__aeabi_fsub+0x268>
 8000d18:	2500      	movs	r5, #0
 8000d1a:	2700      	movs	r7, #0
 8000d1c:	e6a9      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000d1e:	4647      	mov	r7, r8
 8000d20:	e6a7      	b.n	8000a72 <__aeabi_fsub+0xce>
 8000d22:	4653      	mov	r3, sl
 8000d24:	0034      	movs	r4, r6
 8000d26:	4463      	add	r3, ip
 8000d28:	e6c8      	b.n	8000abc <__aeabi_fsub+0x118>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	7dffffff 	.word	0x7dffffff
 8000d30:	fbffffff 	.word	0xfbffffff

08000d34 <__aeabi_f2iz>:
 8000d34:	0241      	lsls	r1, r0, #9
 8000d36:	0042      	lsls	r2, r0, #1
 8000d38:	0fc3      	lsrs	r3, r0, #31
 8000d3a:	0a49      	lsrs	r1, r1, #9
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	0e12      	lsrs	r2, r2, #24
 8000d40:	2a7e      	cmp	r2, #126	; 0x7e
 8000d42:	d903      	bls.n	8000d4c <__aeabi_f2iz+0x18>
 8000d44:	2a9d      	cmp	r2, #157	; 0x9d
 8000d46:	d902      	bls.n	8000d4e <__aeabi_f2iz+0x1a>
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <__aeabi_f2iz+0x3c>)
 8000d4a:	1898      	adds	r0, r3, r2
 8000d4c:	4770      	bx	lr
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0400      	lsls	r0, r0, #16
 8000d52:	4301      	orrs	r1, r0
 8000d54:	2a95      	cmp	r2, #149	; 0x95
 8000d56:	dc07      	bgt.n	8000d68 <__aeabi_f2iz+0x34>
 8000d58:	2096      	movs	r0, #150	; 0x96
 8000d5a:	1a82      	subs	r2, r0, r2
 8000d5c:	40d1      	lsrs	r1, r2
 8000d5e:	4248      	negs	r0, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1f3      	bne.n	8000d4c <__aeabi_f2iz+0x18>
 8000d64:	0008      	movs	r0, r1
 8000d66:	e7f1      	b.n	8000d4c <__aeabi_f2iz+0x18>
 8000d68:	3a96      	subs	r2, #150	; 0x96
 8000d6a:	4091      	lsls	r1, r2
 8000d6c:	e7f7      	b.n	8000d5e <__aeabi_f2iz+0x2a>
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	7fffffff 	.word	0x7fffffff

08000d74 <__aeabi_i2f>:
 8000d74:	b570      	push	{r4, r5, r6, lr}
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d013      	beq.n	8000da2 <__aeabi_i2f+0x2e>
 8000d7a:	17c3      	asrs	r3, r0, #31
 8000d7c:	18c5      	adds	r5, r0, r3
 8000d7e:	405d      	eors	r5, r3
 8000d80:	0fc4      	lsrs	r4, r0, #31
 8000d82:	0028      	movs	r0, r5
 8000d84:	f001 feba 	bl	8002afc <__clzsi2>
 8000d88:	239e      	movs	r3, #158	; 0x9e
 8000d8a:	0001      	movs	r1, r0
 8000d8c:	1a1b      	subs	r3, r3, r0
 8000d8e:	2b96      	cmp	r3, #150	; 0x96
 8000d90:	dc0f      	bgt.n	8000db2 <__aeabi_i2f+0x3e>
 8000d92:	2808      	cmp	r0, #8
 8000d94:	dd01      	ble.n	8000d9a <__aeabi_i2f+0x26>
 8000d96:	3908      	subs	r1, #8
 8000d98:	408d      	lsls	r5, r1
 8000d9a:	026d      	lsls	r5, r5, #9
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	e002      	b.n	8000da8 <__aeabi_i2f+0x34>
 8000da2:	2400      	movs	r4, #0
 8000da4:	2000      	movs	r0, #0
 8000da6:	2500      	movs	r5, #0
 8000da8:	05c0      	lsls	r0, r0, #23
 8000daa:	4328      	orrs	r0, r5
 8000dac:	07e4      	lsls	r4, r4, #31
 8000dae:	4320      	orrs	r0, r4
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
 8000db2:	2b99      	cmp	r3, #153	; 0x99
 8000db4:	dd0b      	ble.n	8000dce <__aeabi_i2f+0x5a>
 8000db6:	2205      	movs	r2, #5
 8000db8:	002e      	movs	r6, r5
 8000dba:	1a12      	subs	r2, r2, r0
 8000dbc:	40d6      	lsrs	r6, r2
 8000dbe:	0002      	movs	r2, r0
 8000dc0:	321b      	adds	r2, #27
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	0028      	movs	r0, r5
 8000dc6:	1e45      	subs	r5, r0, #1
 8000dc8:	41a8      	sbcs	r0, r5
 8000dca:	0035      	movs	r5, r6
 8000dcc:	4305      	orrs	r5, r0
 8000dce:	2905      	cmp	r1, #5
 8000dd0:	dd01      	ble.n	8000dd6 <__aeabi_i2f+0x62>
 8000dd2:	1f4a      	subs	r2, r1, #5
 8000dd4:	4095      	lsls	r5, r2
 8000dd6:	002a      	movs	r2, r5
 8000dd8:	4e08      	ldr	r6, [pc, #32]	; (8000dfc <__aeabi_i2f+0x88>)
 8000dda:	4032      	ands	r2, r6
 8000ddc:	0768      	lsls	r0, r5, #29
 8000dde:	d009      	beq.n	8000df4 <__aeabi_i2f+0x80>
 8000de0:	200f      	movs	r0, #15
 8000de2:	4028      	ands	r0, r5
 8000de4:	2804      	cmp	r0, #4
 8000de6:	d005      	beq.n	8000df4 <__aeabi_i2f+0x80>
 8000de8:	3204      	adds	r2, #4
 8000dea:	0150      	lsls	r0, r2, #5
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_i2f+0x80>
 8000dee:	239f      	movs	r3, #159	; 0x9f
 8000df0:	4032      	ands	r2, r6
 8000df2:	1a5b      	subs	r3, r3, r1
 8000df4:	0192      	lsls	r2, r2, #6
 8000df6:	0a55      	lsrs	r5, r2, #9
 8000df8:	b2d8      	uxtb	r0, r3
 8000dfa:	e7d5      	b.n	8000da8 <__aeabi_i2f+0x34>
 8000dfc:	fbffffff 	.word	0xfbffffff

08000e00 <__aeabi_ui2f>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	1e05      	subs	r5, r0, #0
 8000e04:	d00e      	beq.n	8000e24 <__aeabi_ui2f+0x24>
 8000e06:	f001 fe79 	bl	8002afc <__clzsi2>
 8000e0a:	239e      	movs	r3, #158	; 0x9e
 8000e0c:	0004      	movs	r4, r0
 8000e0e:	1a1b      	subs	r3, r3, r0
 8000e10:	2b96      	cmp	r3, #150	; 0x96
 8000e12:	dc0c      	bgt.n	8000e2e <__aeabi_ui2f+0x2e>
 8000e14:	2808      	cmp	r0, #8
 8000e16:	dd01      	ble.n	8000e1c <__aeabi_ui2f+0x1c>
 8000e18:	3c08      	subs	r4, #8
 8000e1a:	40a5      	lsls	r5, r4
 8000e1c:	026d      	lsls	r5, r5, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	b2d8      	uxtb	r0, r3
 8000e22:	e001      	b.n	8000e28 <__aeabi_ui2f+0x28>
 8000e24:	2000      	movs	r0, #0
 8000e26:	2500      	movs	r5, #0
 8000e28:	05c0      	lsls	r0, r0, #23
 8000e2a:	4328      	orrs	r0, r5
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
 8000e2e:	2b99      	cmp	r3, #153	; 0x99
 8000e30:	dd09      	ble.n	8000e46 <__aeabi_ui2f+0x46>
 8000e32:	0002      	movs	r2, r0
 8000e34:	0029      	movs	r1, r5
 8000e36:	321b      	adds	r2, #27
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	1e4a      	subs	r2, r1, #1
 8000e3c:	4191      	sbcs	r1, r2
 8000e3e:	2205      	movs	r2, #5
 8000e40:	1a12      	subs	r2, r2, r0
 8000e42:	40d5      	lsrs	r5, r2
 8000e44:	430d      	orrs	r5, r1
 8000e46:	2c05      	cmp	r4, #5
 8000e48:	dd01      	ble.n	8000e4e <__aeabi_ui2f+0x4e>
 8000e4a:	1f62      	subs	r2, r4, #5
 8000e4c:	4095      	lsls	r5, r2
 8000e4e:	0029      	movs	r1, r5
 8000e50:	4e08      	ldr	r6, [pc, #32]	; (8000e74 <__aeabi_ui2f+0x74>)
 8000e52:	4031      	ands	r1, r6
 8000e54:	076a      	lsls	r2, r5, #29
 8000e56:	d009      	beq.n	8000e6c <__aeabi_ui2f+0x6c>
 8000e58:	200f      	movs	r0, #15
 8000e5a:	4028      	ands	r0, r5
 8000e5c:	2804      	cmp	r0, #4
 8000e5e:	d005      	beq.n	8000e6c <__aeabi_ui2f+0x6c>
 8000e60:	3104      	adds	r1, #4
 8000e62:	014a      	lsls	r2, r1, #5
 8000e64:	d502      	bpl.n	8000e6c <__aeabi_ui2f+0x6c>
 8000e66:	239f      	movs	r3, #159	; 0x9f
 8000e68:	4031      	ands	r1, r6
 8000e6a:	1b1b      	subs	r3, r3, r4
 8000e6c:	0189      	lsls	r1, r1, #6
 8000e6e:	0a4d      	lsrs	r5, r1, #9
 8000e70:	b2d8      	uxtb	r0, r3
 8000e72:	e7d9      	b.n	8000e28 <__aeabi_ui2f+0x28>
 8000e74:	fbffffff 	.word	0xfbffffff

08000e78 <__aeabi_dadd>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	464f      	mov	r7, r9
 8000e7c:	46d6      	mov	lr, sl
 8000e7e:	4646      	mov	r6, r8
 8000e80:	000d      	movs	r5, r1
 8000e82:	0001      	movs	r1, r0
 8000e84:	0018      	movs	r0, r3
 8000e86:	b5c0      	push	{r6, r7, lr}
 8000e88:	0017      	movs	r7, r2
 8000e8a:	032b      	lsls	r3, r5, #12
 8000e8c:	0a5a      	lsrs	r2, r3, #9
 8000e8e:	0f4b      	lsrs	r3, r1, #29
 8000e90:	4313      	orrs	r3, r2
 8000e92:	00ca      	lsls	r2, r1, #3
 8000e94:	4691      	mov	r9, r2
 8000e96:	0302      	lsls	r2, r0, #12
 8000e98:	006e      	lsls	r6, r5, #1
 8000e9a:	0041      	lsls	r1, r0, #1
 8000e9c:	0a52      	lsrs	r2, r2, #9
 8000e9e:	0fec      	lsrs	r4, r5, #31
 8000ea0:	0f7d      	lsrs	r5, r7, #29
 8000ea2:	4315      	orrs	r5, r2
 8000ea4:	0d76      	lsrs	r6, r6, #21
 8000ea6:	0d49      	lsrs	r1, r1, #21
 8000ea8:	0fc0      	lsrs	r0, r0, #31
 8000eaa:	4682      	mov	sl, r0
 8000eac:	46ac      	mov	ip, r5
 8000eae:	00ff      	lsls	r7, r7, #3
 8000eb0:	1a72      	subs	r2, r6, r1
 8000eb2:	4284      	cmp	r4, r0
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_dadd+0x40>
 8000eb6:	e098      	b.n	8000fea <__aeabi_dadd+0x172>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	dc00      	bgt.n	8000ebe <__aeabi_dadd+0x46>
 8000ebc:	e081      	b.n	8000fc2 <__aeabi_dadd+0x14a>
 8000ebe:	2900      	cmp	r1, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dadd+0x4c>
 8000ec2:	e0b6      	b.n	8001032 <__aeabi_dadd+0x1ba>
 8000ec4:	49c9      	ldr	r1, [pc, #804]	; (80011ec <__aeabi_dadd+0x374>)
 8000ec6:	428e      	cmp	r6, r1
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dadd+0x54>
 8000eca:	e172      	b.n	80011b2 <__aeabi_dadd+0x33a>
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	0028      	movs	r0, r5
 8000ed0:	0409      	lsls	r1, r1, #16
 8000ed2:	4308      	orrs	r0, r1
 8000ed4:	4684      	mov	ip, r0
 8000ed6:	2a38      	cmp	r2, #56	; 0x38
 8000ed8:	dd00      	ble.n	8000edc <__aeabi_dadd+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_dadd+0x322>
 8000edc:	2a1f      	cmp	r2, #31
 8000ede:	dd00      	ble.n	8000ee2 <__aeabi_dadd+0x6a>
 8000ee0:	e1ee      	b.n	80012c0 <__aeabi_dadd+0x448>
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	0039      	movs	r1, r7
 8000ee6:	4665      	mov	r5, ip
 8000ee8:	1a80      	subs	r0, r0, r2
 8000eea:	4087      	lsls	r7, r0
 8000eec:	40d1      	lsrs	r1, r2
 8000eee:	4085      	lsls	r5, r0
 8000ef0:	430d      	orrs	r5, r1
 8000ef2:	0039      	movs	r1, r7
 8000ef4:	1e4f      	subs	r7, r1, #1
 8000ef6:	41b9      	sbcs	r1, r7
 8000ef8:	4667      	mov	r7, ip
 8000efa:	40d7      	lsrs	r7, r2
 8000efc:	4329      	orrs	r1, r5
 8000efe:	1bdb      	subs	r3, r3, r7
 8000f00:	464a      	mov	r2, r9
 8000f02:	1a55      	subs	r5, r2, r1
 8000f04:	45a9      	cmp	r9, r5
 8000f06:	4189      	sbcs	r1, r1
 8000f08:	4249      	negs	r1, r1
 8000f0a:	1a5b      	subs	r3, r3, r1
 8000f0c:	4698      	mov	r8, r3
 8000f0e:	4643      	mov	r3, r8
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	d400      	bmi.n	8000f16 <__aeabi_dadd+0x9e>
 8000f14:	e0cc      	b.n	80010b0 <__aeabi_dadd+0x238>
 8000f16:	4643      	mov	r3, r8
 8000f18:	025b      	lsls	r3, r3, #9
 8000f1a:	0a5b      	lsrs	r3, r3, #9
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	4643      	mov	r3, r8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dadd+0xae>
 8000f24:	e12c      	b.n	8001180 <__aeabi_dadd+0x308>
 8000f26:	4640      	mov	r0, r8
 8000f28:	f001 fde8 	bl	8002afc <__clzsi2>
 8000f2c:	0001      	movs	r1, r0
 8000f2e:	3908      	subs	r1, #8
 8000f30:	2220      	movs	r2, #32
 8000f32:	0028      	movs	r0, r5
 8000f34:	4643      	mov	r3, r8
 8000f36:	1a52      	subs	r2, r2, r1
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	40d0      	lsrs	r0, r2
 8000f3c:	408d      	lsls	r5, r1
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	428e      	cmp	r6, r1
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dadd+0xce>
 8000f44:	e117      	b.n	8001176 <__aeabi_dadd+0x2fe>
 8000f46:	1b8e      	subs	r6, r1, r6
 8000f48:	1c72      	adds	r2, r6, #1
 8000f4a:	2a1f      	cmp	r2, #31
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_dadd+0xd8>
 8000f4e:	e1a7      	b.n	80012a0 <__aeabi_dadd+0x428>
 8000f50:	2120      	movs	r1, #32
 8000f52:	0018      	movs	r0, r3
 8000f54:	002e      	movs	r6, r5
 8000f56:	1a89      	subs	r1, r1, r2
 8000f58:	408d      	lsls	r5, r1
 8000f5a:	4088      	lsls	r0, r1
 8000f5c:	40d6      	lsrs	r6, r2
 8000f5e:	40d3      	lsrs	r3, r2
 8000f60:	1e69      	subs	r1, r5, #1
 8000f62:	418d      	sbcs	r5, r1
 8000f64:	4330      	orrs	r0, r6
 8000f66:	4698      	mov	r8, r3
 8000f68:	2600      	movs	r6, #0
 8000f6a:	4305      	orrs	r5, r0
 8000f6c:	076b      	lsls	r3, r5, #29
 8000f6e:	d009      	beq.n	8000f84 <__aeabi_dadd+0x10c>
 8000f70:	230f      	movs	r3, #15
 8000f72:	402b      	ands	r3, r5
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d005      	beq.n	8000f84 <__aeabi_dadd+0x10c>
 8000f78:	1d2b      	adds	r3, r5, #4
 8000f7a:	42ab      	cmp	r3, r5
 8000f7c:	41ad      	sbcs	r5, r5
 8000f7e:	426d      	negs	r5, r5
 8000f80:	44a8      	add	r8, r5
 8000f82:	001d      	movs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_dadd+0x114>
 8000f8a:	e094      	b.n	80010b6 <__aeabi_dadd+0x23e>
 8000f8c:	4b97      	ldr	r3, [pc, #604]	; (80011ec <__aeabi_dadd+0x374>)
 8000f8e:	1c72      	adds	r2, r6, #1
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x11e>
 8000f94:	e09d      	b.n	80010d2 <__aeabi_dadd+0x25a>
 8000f96:	4641      	mov	r1, r8
 8000f98:	4b95      	ldr	r3, [pc, #596]	; (80011f0 <__aeabi_dadd+0x378>)
 8000f9a:	08ed      	lsrs	r5, r5, #3
 8000f9c:	4019      	ands	r1, r3
 8000f9e:	000b      	movs	r3, r1
 8000fa0:	0552      	lsls	r2, r2, #21
 8000fa2:	0749      	lsls	r1, r1, #29
 8000fa4:	025b      	lsls	r3, r3, #9
 8000fa6:	4329      	orrs	r1, r5
 8000fa8:	0b1b      	lsrs	r3, r3, #12
 8000faa:	0d52      	lsrs	r2, r2, #21
 8000fac:	0512      	lsls	r2, r2, #20
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	07e4      	lsls	r4, r4, #31
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	0008      	movs	r0, r1
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	bce0      	pop	{r5, r6, r7}
 8000fba:	46ba      	mov	sl, r7
 8000fbc:	46b1      	mov	r9, r6
 8000fbe:	46a8      	mov	r8, r5
 8000fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d043      	beq.n	800104e <__aeabi_dadd+0x1d6>
 8000fc6:	1b8a      	subs	r2, r1, r6
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d000      	beq.n	8000fce <__aeabi_dadd+0x156>
 8000fcc:	e12a      	b.n	8001224 <__aeabi_dadd+0x3ac>
 8000fce:	464c      	mov	r4, r9
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_dadd+0x15e>
 8000fd4:	e1d1      	b.n	800137a <__aeabi_dadd+0x502>
 8000fd6:	1e54      	subs	r4, r2, #1
 8000fd8:	2a01      	cmp	r2, #1
 8000fda:	d100      	bne.n	8000fde <__aeabi_dadd+0x166>
 8000fdc:	e21f      	b.n	800141e <__aeabi_dadd+0x5a6>
 8000fde:	4d83      	ldr	r5, [pc, #524]	; (80011ec <__aeabi_dadd+0x374>)
 8000fe0:	42aa      	cmp	r2, r5
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x16e>
 8000fe4:	e272      	b.n	80014cc <__aeabi_dadd+0x654>
 8000fe6:	0022      	movs	r2, r4
 8000fe8:	e123      	b.n	8001232 <__aeabi_dadd+0x3ba>
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	dc00      	bgt.n	8000ff0 <__aeabi_dadd+0x178>
 8000fee:	e098      	b.n	8001122 <__aeabi_dadd+0x2aa>
 8000ff0:	2900      	cmp	r1, #0
 8000ff2:	d042      	beq.n	800107a <__aeabi_dadd+0x202>
 8000ff4:	497d      	ldr	r1, [pc, #500]	; (80011ec <__aeabi_dadd+0x374>)
 8000ff6:	428e      	cmp	r6, r1
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_dadd+0x184>
 8000ffa:	e0da      	b.n	80011b2 <__aeabi_dadd+0x33a>
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	0028      	movs	r0, r5
 8001000:	0409      	lsls	r1, r1, #16
 8001002:	4308      	orrs	r0, r1
 8001004:	4684      	mov	ip, r0
 8001006:	2a38      	cmp	r2, #56	; 0x38
 8001008:	dd00      	ble.n	800100c <__aeabi_dadd+0x194>
 800100a:	e129      	b.n	8001260 <__aeabi_dadd+0x3e8>
 800100c:	2a1f      	cmp	r2, #31
 800100e:	dc00      	bgt.n	8001012 <__aeabi_dadd+0x19a>
 8001010:	e187      	b.n	8001322 <__aeabi_dadd+0x4aa>
 8001012:	0011      	movs	r1, r2
 8001014:	4665      	mov	r5, ip
 8001016:	3920      	subs	r1, #32
 8001018:	40cd      	lsrs	r5, r1
 800101a:	2a20      	cmp	r2, #32
 800101c:	d004      	beq.n	8001028 <__aeabi_dadd+0x1b0>
 800101e:	2040      	movs	r0, #64	; 0x40
 8001020:	4661      	mov	r1, ip
 8001022:	1a82      	subs	r2, r0, r2
 8001024:	4091      	lsls	r1, r2
 8001026:	430f      	orrs	r7, r1
 8001028:	0039      	movs	r1, r7
 800102a:	1e4f      	subs	r7, r1, #1
 800102c:	41b9      	sbcs	r1, r7
 800102e:	430d      	orrs	r5, r1
 8001030:	e11b      	b.n	800126a <__aeabi_dadd+0x3f2>
 8001032:	0029      	movs	r1, r5
 8001034:	4339      	orrs	r1, r7
 8001036:	d100      	bne.n	800103a <__aeabi_dadd+0x1c2>
 8001038:	e0b5      	b.n	80011a6 <__aeabi_dadd+0x32e>
 800103a:	1e51      	subs	r1, r2, #1
 800103c:	2a01      	cmp	r2, #1
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x1ca>
 8001040:	e1ab      	b.n	800139a <__aeabi_dadd+0x522>
 8001042:	486a      	ldr	r0, [pc, #424]	; (80011ec <__aeabi_dadd+0x374>)
 8001044:	4282      	cmp	r2, r0
 8001046:	d100      	bne.n	800104a <__aeabi_dadd+0x1d2>
 8001048:	e1b2      	b.n	80013b0 <__aeabi_dadd+0x538>
 800104a:	000a      	movs	r2, r1
 800104c:	e743      	b.n	8000ed6 <__aeabi_dadd+0x5e>
 800104e:	4969      	ldr	r1, [pc, #420]	; (80011f4 <__aeabi_dadd+0x37c>)
 8001050:	1c75      	adds	r5, r6, #1
 8001052:	420d      	tst	r5, r1
 8001054:	d000      	beq.n	8001058 <__aeabi_dadd+0x1e0>
 8001056:	e0cf      	b.n	80011f8 <__aeabi_dadd+0x380>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d000      	beq.n	800105e <__aeabi_dadd+0x1e6>
 800105c:	e193      	b.n	8001386 <__aeabi_dadd+0x50e>
 800105e:	4649      	mov	r1, r9
 8001060:	4319      	orrs	r1, r3
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x1ee>
 8001064:	e1d1      	b.n	800140a <__aeabi_dadd+0x592>
 8001066:	4661      	mov	r1, ip
 8001068:	4339      	orrs	r1, r7
 800106a:	d000      	beq.n	800106e <__aeabi_dadd+0x1f6>
 800106c:	e1e3      	b.n	8001436 <__aeabi_dadd+0x5be>
 800106e:	4649      	mov	r1, r9
 8001070:	0758      	lsls	r0, r3, #29
 8001072:	08c9      	lsrs	r1, r1, #3
 8001074:	4301      	orrs	r1, r0
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	e026      	b.n	80010c8 <__aeabi_dadd+0x250>
 800107a:	0029      	movs	r1, r5
 800107c:	4339      	orrs	r1, r7
 800107e:	d100      	bne.n	8001082 <__aeabi_dadd+0x20a>
 8001080:	e091      	b.n	80011a6 <__aeabi_dadd+0x32e>
 8001082:	1e51      	subs	r1, r2, #1
 8001084:	2a01      	cmp	r2, #1
 8001086:	d005      	beq.n	8001094 <__aeabi_dadd+0x21c>
 8001088:	4858      	ldr	r0, [pc, #352]	; (80011ec <__aeabi_dadd+0x374>)
 800108a:	4282      	cmp	r2, r0
 800108c:	d100      	bne.n	8001090 <__aeabi_dadd+0x218>
 800108e:	e18f      	b.n	80013b0 <__aeabi_dadd+0x538>
 8001090:	000a      	movs	r2, r1
 8001092:	e7b8      	b.n	8001006 <__aeabi_dadd+0x18e>
 8001094:	003d      	movs	r5, r7
 8001096:	444d      	add	r5, r9
 8001098:	454d      	cmp	r5, r9
 800109a:	4189      	sbcs	r1, r1
 800109c:	4463      	add	r3, ip
 800109e:	4698      	mov	r8, r3
 80010a0:	4249      	negs	r1, r1
 80010a2:	4488      	add	r8, r1
 80010a4:	4643      	mov	r3, r8
 80010a6:	2602      	movs	r6, #2
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	d500      	bpl.n	80010ae <__aeabi_dadd+0x236>
 80010ac:	e0eb      	b.n	8001286 <__aeabi_dadd+0x40e>
 80010ae:	3e01      	subs	r6, #1
 80010b0:	076b      	lsls	r3, r5, #29
 80010b2:	d000      	beq.n	80010b6 <__aeabi_dadd+0x23e>
 80010b4:	e75c      	b.n	8000f70 <__aeabi_dadd+0xf8>
 80010b6:	4643      	mov	r3, r8
 80010b8:	08e9      	lsrs	r1, r5, #3
 80010ba:	075a      	lsls	r2, r3, #29
 80010bc:	4311      	orrs	r1, r2
 80010be:	0032      	movs	r2, r6
 80010c0:	08db      	lsrs	r3, r3, #3
 80010c2:	484a      	ldr	r0, [pc, #296]	; (80011ec <__aeabi_dadd+0x374>)
 80010c4:	4282      	cmp	r2, r0
 80010c6:	d021      	beq.n	800110c <__aeabi_dadd+0x294>
 80010c8:	031b      	lsls	r3, r3, #12
 80010ca:	0552      	lsls	r2, r2, #21
 80010cc:	0b1b      	lsrs	r3, r3, #12
 80010ce:	0d52      	lsrs	r2, r2, #21
 80010d0:	e76c      	b.n	8000fac <__aeabi_dadd+0x134>
 80010d2:	2300      	movs	r3, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	e769      	b.n	8000fac <__aeabi_dadd+0x134>
 80010d8:	002a      	movs	r2, r5
 80010da:	433a      	orrs	r2, r7
 80010dc:	d069      	beq.n	80011b2 <__aeabi_dadd+0x33a>
 80010de:	464a      	mov	r2, r9
 80010e0:	0758      	lsls	r0, r3, #29
 80010e2:	08d1      	lsrs	r1, r2, #3
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	031b      	lsls	r3, r3, #12
 80010ea:	4308      	orrs	r0, r1
 80010ec:	421a      	tst	r2, r3
 80010ee:	d007      	beq.n	8001100 <__aeabi_dadd+0x288>
 80010f0:	0029      	movs	r1, r5
 80010f2:	08ed      	lsrs	r5, r5, #3
 80010f4:	421d      	tst	r5, r3
 80010f6:	d103      	bne.n	8001100 <__aeabi_dadd+0x288>
 80010f8:	002a      	movs	r2, r5
 80010fa:	08ff      	lsrs	r7, r7, #3
 80010fc:	0748      	lsls	r0, r1, #29
 80010fe:	4338      	orrs	r0, r7
 8001100:	0f43      	lsrs	r3, r0, #29
 8001102:	00c1      	lsls	r1, r0, #3
 8001104:	075b      	lsls	r3, r3, #29
 8001106:	08c9      	lsrs	r1, r1, #3
 8001108:	4319      	orrs	r1, r3
 800110a:	0013      	movs	r3, r2
 800110c:	000a      	movs	r2, r1
 800110e:	431a      	orrs	r2, r3
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x29c>
 8001112:	e213      	b.n	800153c <__aeabi_dadd+0x6c4>
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0312      	lsls	r2, r2, #12
 8001118:	4313      	orrs	r3, r2
 800111a:	031b      	lsls	r3, r3, #12
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <__aeabi_dadd+0x374>)
 800111e:	0b1b      	lsrs	r3, r3, #12
 8001120:	e744      	b.n	8000fac <__aeabi_dadd+0x134>
 8001122:	2a00      	cmp	r2, #0
 8001124:	d04b      	beq.n	80011be <__aeabi_dadd+0x346>
 8001126:	1b8a      	subs	r2, r1, r6
 8001128:	2e00      	cmp	r6, #0
 800112a:	d100      	bne.n	800112e <__aeabi_dadd+0x2b6>
 800112c:	e0e7      	b.n	80012fe <__aeabi_dadd+0x486>
 800112e:	482f      	ldr	r0, [pc, #188]	; (80011ec <__aeabi_dadd+0x374>)
 8001130:	4281      	cmp	r1, r0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0x2be>
 8001134:	e195      	b.n	8001462 <__aeabi_dadd+0x5ea>
 8001136:	2080      	movs	r0, #128	; 0x80
 8001138:	0400      	lsls	r0, r0, #16
 800113a:	4303      	orrs	r3, r0
 800113c:	2a38      	cmp	r2, #56	; 0x38
 800113e:	dd00      	ble.n	8001142 <__aeabi_dadd+0x2ca>
 8001140:	e143      	b.n	80013ca <__aeabi_dadd+0x552>
 8001142:	2a1f      	cmp	r2, #31
 8001144:	dd00      	ble.n	8001148 <__aeabi_dadd+0x2d0>
 8001146:	e1db      	b.n	8001500 <__aeabi_dadd+0x688>
 8001148:	2020      	movs	r0, #32
 800114a:	001d      	movs	r5, r3
 800114c:	464e      	mov	r6, r9
 800114e:	1a80      	subs	r0, r0, r2
 8001150:	4085      	lsls	r5, r0
 8001152:	40d6      	lsrs	r6, r2
 8001154:	4335      	orrs	r5, r6
 8001156:	464e      	mov	r6, r9
 8001158:	4086      	lsls	r6, r0
 800115a:	0030      	movs	r0, r6
 800115c:	40d3      	lsrs	r3, r2
 800115e:	1e46      	subs	r6, r0, #1
 8001160:	41b0      	sbcs	r0, r6
 8001162:	449c      	add	ip, r3
 8001164:	4305      	orrs	r5, r0
 8001166:	19ed      	adds	r5, r5, r7
 8001168:	42bd      	cmp	r5, r7
 800116a:	419b      	sbcs	r3, r3
 800116c:	425b      	negs	r3, r3
 800116e:	4463      	add	r3, ip
 8001170:	4698      	mov	r8, r3
 8001172:	000e      	movs	r6, r1
 8001174:	e07f      	b.n	8001276 <__aeabi_dadd+0x3fe>
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <__aeabi_dadd+0x378>)
 8001178:	1a76      	subs	r6, r6, r1
 800117a:	4013      	ands	r3, r2
 800117c:	4698      	mov	r8, r3
 800117e:	e6f5      	b.n	8000f6c <__aeabi_dadd+0xf4>
 8001180:	0028      	movs	r0, r5
 8001182:	f001 fcbb 	bl	8002afc <__clzsi2>
 8001186:	0001      	movs	r1, r0
 8001188:	3118      	adds	r1, #24
 800118a:	291f      	cmp	r1, #31
 800118c:	dc00      	bgt.n	8001190 <__aeabi_dadd+0x318>
 800118e:	e6cf      	b.n	8000f30 <__aeabi_dadd+0xb8>
 8001190:	002b      	movs	r3, r5
 8001192:	3808      	subs	r0, #8
 8001194:	4083      	lsls	r3, r0
 8001196:	2500      	movs	r5, #0
 8001198:	e6d2      	b.n	8000f40 <__aeabi_dadd+0xc8>
 800119a:	4662      	mov	r2, ip
 800119c:	433a      	orrs	r2, r7
 800119e:	0011      	movs	r1, r2
 80011a0:	1e4f      	subs	r7, r1, #1
 80011a2:	41b9      	sbcs	r1, r7
 80011a4:	e6ac      	b.n	8000f00 <__aeabi_dadd+0x88>
 80011a6:	4649      	mov	r1, r9
 80011a8:	0758      	lsls	r0, r3, #29
 80011aa:	08c9      	lsrs	r1, r1, #3
 80011ac:	4301      	orrs	r1, r0
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	e787      	b.n	80010c2 <__aeabi_dadd+0x24a>
 80011b2:	4649      	mov	r1, r9
 80011b4:	075a      	lsls	r2, r3, #29
 80011b6:	08c9      	lsrs	r1, r1, #3
 80011b8:	4311      	orrs	r1, r2
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	e7a6      	b.n	800110c <__aeabi_dadd+0x294>
 80011be:	490d      	ldr	r1, [pc, #52]	; (80011f4 <__aeabi_dadd+0x37c>)
 80011c0:	1c70      	adds	r0, r6, #1
 80011c2:	4208      	tst	r0, r1
 80011c4:	d000      	beq.n	80011c8 <__aeabi_dadd+0x350>
 80011c6:	e0bb      	b.n	8001340 <__aeabi_dadd+0x4c8>
 80011c8:	2e00      	cmp	r6, #0
 80011ca:	d000      	beq.n	80011ce <__aeabi_dadd+0x356>
 80011cc:	e114      	b.n	80013f8 <__aeabi_dadd+0x580>
 80011ce:	4649      	mov	r1, r9
 80011d0:	4319      	orrs	r1, r3
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x35e>
 80011d4:	e175      	b.n	80014c2 <__aeabi_dadd+0x64a>
 80011d6:	0029      	movs	r1, r5
 80011d8:	4339      	orrs	r1, r7
 80011da:	d000      	beq.n	80011de <__aeabi_dadd+0x366>
 80011dc:	e17e      	b.n	80014dc <__aeabi_dadd+0x664>
 80011de:	4649      	mov	r1, r9
 80011e0:	0758      	lsls	r0, r3, #29
 80011e2:	08c9      	lsrs	r1, r1, #3
 80011e4:	4301      	orrs	r1, r0
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	e76e      	b.n	80010c8 <__aeabi_dadd+0x250>
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	000007ff 	.word	0x000007ff
 80011f0:	ff7fffff 	.word	0xff7fffff
 80011f4:	000007fe 	.word	0x000007fe
 80011f8:	4649      	mov	r1, r9
 80011fa:	1bcd      	subs	r5, r1, r7
 80011fc:	4661      	mov	r1, ip
 80011fe:	1a58      	subs	r0, r3, r1
 8001200:	45a9      	cmp	r9, r5
 8001202:	4189      	sbcs	r1, r1
 8001204:	4249      	negs	r1, r1
 8001206:	4688      	mov	r8, r1
 8001208:	0001      	movs	r1, r0
 800120a:	4640      	mov	r0, r8
 800120c:	1a09      	subs	r1, r1, r0
 800120e:	4688      	mov	r8, r1
 8001210:	0209      	lsls	r1, r1, #8
 8001212:	d500      	bpl.n	8001216 <__aeabi_dadd+0x39e>
 8001214:	e0a6      	b.n	8001364 <__aeabi_dadd+0x4ec>
 8001216:	4641      	mov	r1, r8
 8001218:	4329      	orrs	r1, r5
 800121a:	d000      	beq.n	800121e <__aeabi_dadd+0x3a6>
 800121c:	e67f      	b.n	8000f1e <__aeabi_dadd+0xa6>
 800121e:	2300      	movs	r3, #0
 8001220:	2400      	movs	r4, #0
 8001222:	e751      	b.n	80010c8 <__aeabi_dadd+0x250>
 8001224:	4cc7      	ldr	r4, [pc, #796]	; (8001544 <__aeabi_dadd+0x6cc>)
 8001226:	42a1      	cmp	r1, r4
 8001228:	d100      	bne.n	800122c <__aeabi_dadd+0x3b4>
 800122a:	e0c7      	b.n	80013bc <__aeabi_dadd+0x544>
 800122c:	2480      	movs	r4, #128	; 0x80
 800122e:	0424      	lsls	r4, r4, #16
 8001230:	4323      	orrs	r3, r4
 8001232:	2a38      	cmp	r2, #56	; 0x38
 8001234:	dc54      	bgt.n	80012e0 <__aeabi_dadd+0x468>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dd00      	ble.n	800123c <__aeabi_dadd+0x3c4>
 800123a:	e0cc      	b.n	80013d6 <__aeabi_dadd+0x55e>
 800123c:	2420      	movs	r4, #32
 800123e:	4648      	mov	r0, r9
 8001240:	1aa4      	subs	r4, r4, r2
 8001242:	001d      	movs	r5, r3
 8001244:	464e      	mov	r6, r9
 8001246:	40a0      	lsls	r0, r4
 8001248:	40d6      	lsrs	r6, r2
 800124a:	40a5      	lsls	r5, r4
 800124c:	0004      	movs	r4, r0
 800124e:	40d3      	lsrs	r3, r2
 8001250:	4662      	mov	r2, ip
 8001252:	4335      	orrs	r5, r6
 8001254:	1e66      	subs	r6, r4, #1
 8001256:	41b4      	sbcs	r4, r6
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	469c      	mov	ip, r3
 800125c:	4325      	orrs	r5, r4
 800125e:	e044      	b.n	80012ea <__aeabi_dadd+0x472>
 8001260:	4662      	mov	r2, ip
 8001262:	433a      	orrs	r2, r7
 8001264:	0015      	movs	r5, r2
 8001266:	1e6f      	subs	r7, r5, #1
 8001268:	41bd      	sbcs	r5, r7
 800126a:	444d      	add	r5, r9
 800126c:	454d      	cmp	r5, r9
 800126e:	4189      	sbcs	r1, r1
 8001270:	4249      	negs	r1, r1
 8001272:	4688      	mov	r8, r1
 8001274:	4498      	add	r8, r3
 8001276:	4643      	mov	r3, r8
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	d400      	bmi.n	800127e <__aeabi_dadd+0x406>
 800127c:	e718      	b.n	80010b0 <__aeabi_dadd+0x238>
 800127e:	4bb1      	ldr	r3, [pc, #708]	; (8001544 <__aeabi_dadd+0x6cc>)
 8001280:	3601      	adds	r6, #1
 8001282:	429e      	cmp	r6, r3
 8001284:	d049      	beq.n	800131a <__aeabi_dadd+0x4a2>
 8001286:	4642      	mov	r2, r8
 8001288:	4baf      	ldr	r3, [pc, #700]	; (8001548 <__aeabi_dadd+0x6d0>)
 800128a:	2101      	movs	r1, #1
 800128c:	401a      	ands	r2, r3
 800128e:	0013      	movs	r3, r2
 8001290:	086a      	lsrs	r2, r5, #1
 8001292:	400d      	ands	r5, r1
 8001294:	4315      	orrs	r5, r2
 8001296:	07d9      	lsls	r1, r3, #31
 8001298:	085b      	lsrs	r3, r3, #1
 800129a:	4698      	mov	r8, r3
 800129c:	430d      	orrs	r5, r1
 800129e:	e665      	b.n	8000f6c <__aeabi_dadd+0xf4>
 80012a0:	0018      	movs	r0, r3
 80012a2:	3e1f      	subs	r6, #31
 80012a4:	40f0      	lsrs	r0, r6
 80012a6:	2a20      	cmp	r2, #32
 80012a8:	d003      	beq.n	80012b2 <__aeabi_dadd+0x43a>
 80012aa:	2140      	movs	r1, #64	; 0x40
 80012ac:	1a8a      	subs	r2, r1, r2
 80012ae:	4093      	lsls	r3, r2
 80012b0:	431d      	orrs	r5, r3
 80012b2:	1e69      	subs	r1, r5, #1
 80012b4:	418d      	sbcs	r5, r1
 80012b6:	2300      	movs	r3, #0
 80012b8:	2600      	movs	r6, #0
 80012ba:	4698      	mov	r8, r3
 80012bc:	4305      	orrs	r5, r0
 80012be:	e6f7      	b.n	80010b0 <__aeabi_dadd+0x238>
 80012c0:	0011      	movs	r1, r2
 80012c2:	4665      	mov	r5, ip
 80012c4:	3920      	subs	r1, #32
 80012c6:	40cd      	lsrs	r5, r1
 80012c8:	2a20      	cmp	r2, #32
 80012ca:	d004      	beq.n	80012d6 <__aeabi_dadd+0x45e>
 80012cc:	2040      	movs	r0, #64	; 0x40
 80012ce:	4661      	mov	r1, ip
 80012d0:	1a82      	subs	r2, r0, r2
 80012d2:	4091      	lsls	r1, r2
 80012d4:	430f      	orrs	r7, r1
 80012d6:	0039      	movs	r1, r7
 80012d8:	1e4f      	subs	r7, r1, #1
 80012da:	41b9      	sbcs	r1, r7
 80012dc:	4329      	orrs	r1, r5
 80012de:	e60f      	b.n	8000f00 <__aeabi_dadd+0x88>
 80012e0:	464a      	mov	r2, r9
 80012e2:	4313      	orrs	r3, r2
 80012e4:	001d      	movs	r5, r3
 80012e6:	1e6b      	subs	r3, r5, #1
 80012e8:	419d      	sbcs	r5, r3
 80012ea:	1b7d      	subs	r5, r7, r5
 80012ec:	42af      	cmp	r7, r5
 80012ee:	419b      	sbcs	r3, r3
 80012f0:	4662      	mov	r2, ip
 80012f2:	425b      	negs	r3, r3
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4698      	mov	r8, r3
 80012f8:	4654      	mov	r4, sl
 80012fa:	000e      	movs	r6, r1
 80012fc:	e607      	b.n	8000f0e <__aeabi_dadd+0x96>
 80012fe:	4648      	mov	r0, r9
 8001300:	4318      	orrs	r0, r3
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x48e>
 8001304:	e0b3      	b.n	800146e <__aeabi_dadd+0x5f6>
 8001306:	1e50      	subs	r0, r2, #1
 8001308:	2a01      	cmp	r2, #1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x496>
 800130c:	e10d      	b.n	800152a <__aeabi_dadd+0x6b2>
 800130e:	4d8d      	ldr	r5, [pc, #564]	; (8001544 <__aeabi_dadd+0x6cc>)
 8001310:	42aa      	cmp	r2, r5
 8001312:	d100      	bne.n	8001316 <__aeabi_dadd+0x49e>
 8001314:	e0a5      	b.n	8001462 <__aeabi_dadd+0x5ea>
 8001316:	0002      	movs	r2, r0
 8001318:	e710      	b.n	800113c <__aeabi_dadd+0x2c4>
 800131a:	0032      	movs	r2, r6
 800131c:	2300      	movs	r3, #0
 800131e:	2100      	movs	r1, #0
 8001320:	e644      	b.n	8000fac <__aeabi_dadd+0x134>
 8001322:	2120      	movs	r1, #32
 8001324:	0038      	movs	r0, r7
 8001326:	1a89      	subs	r1, r1, r2
 8001328:	4665      	mov	r5, ip
 800132a:	408f      	lsls	r7, r1
 800132c:	408d      	lsls	r5, r1
 800132e:	40d0      	lsrs	r0, r2
 8001330:	1e79      	subs	r1, r7, #1
 8001332:	418f      	sbcs	r7, r1
 8001334:	4305      	orrs	r5, r0
 8001336:	433d      	orrs	r5, r7
 8001338:	4667      	mov	r7, ip
 800133a:	40d7      	lsrs	r7, r2
 800133c:	19db      	adds	r3, r3, r7
 800133e:	e794      	b.n	800126a <__aeabi_dadd+0x3f2>
 8001340:	4a80      	ldr	r2, [pc, #512]	; (8001544 <__aeabi_dadd+0x6cc>)
 8001342:	4290      	cmp	r0, r2
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x4d0>
 8001346:	e0ec      	b.n	8001522 <__aeabi_dadd+0x6aa>
 8001348:	0039      	movs	r1, r7
 800134a:	4449      	add	r1, r9
 800134c:	4549      	cmp	r1, r9
 800134e:	4192      	sbcs	r2, r2
 8001350:	4463      	add	r3, ip
 8001352:	4252      	negs	r2, r2
 8001354:	189b      	adds	r3, r3, r2
 8001356:	07dd      	lsls	r5, r3, #31
 8001358:	0849      	lsrs	r1, r1, #1
 800135a:	085b      	lsrs	r3, r3, #1
 800135c:	4698      	mov	r8, r3
 800135e:	0006      	movs	r6, r0
 8001360:	430d      	orrs	r5, r1
 8001362:	e6a5      	b.n	80010b0 <__aeabi_dadd+0x238>
 8001364:	464a      	mov	r2, r9
 8001366:	1abd      	subs	r5, r7, r2
 8001368:	42af      	cmp	r7, r5
 800136a:	4189      	sbcs	r1, r1
 800136c:	4662      	mov	r2, ip
 800136e:	4249      	negs	r1, r1
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	4698      	mov	r8, r3
 8001376:	4654      	mov	r4, sl
 8001378:	e5d1      	b.n	8000f1e <__aeabi_dadd+0xa6>
 800137a:	076c      	lsls	r4, r5, #29
 800137c:	08f9      	lsrs	r1, r7, #3
 800137e:	4321      	orrs	r1, r4
 8001380:	08eb      	lsrs	r3, r5, #3
 8001382:	0004      	movs	r4, r0
 8001384:	e69d      	b.n	80010c2 <__aeabi_dadd+0x24a>
 8001386:	464a      	mov	r2, r9
 8001388:	431a      	orrs	r2, r3
 800138a:	d175      	bne.n	8001478 <__aeabi_dadd+0x600>
 800138c:	4661      	mov	r1, ip
 800138e:	4339      	orrs	r1, r7
 8001390:	d114      	bne.n	80013bc <__aeabi_dadd+0x544>
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	2400      	movs	r4, #0
 8001396:	031b      	lsls	r3, r3, #12
 8001398:	e6bc      	b.n	8001114 <__aeabi_dadd+0x29c>
 800139a:	464a      	mov	r2, r9
 800139c:	1bd5      	subs	r5, r2, r7
 800139e:	45a9      	cmp	r9, r5
 80013a0:	4189      	sbcs	r1, r1
 80013a2:	4662      	mov	r2, ip
 80013a4:	4249      	negs	r1, r1
 80013a6:	1a9b      	subs	r3, r3, r2
 80013a8:	1a5b      	subs	r3, r3, r1
 80013aa:	4698      	mov	r8, r3
 80013ac:	2601      	movs	r6, #1
 80013ae:	e5ae      	b.n	8000f0e <__aeabi_dadd+0x96>
 80013b0:	464a      	mov	r2, r9
 80013b2:	08d1      	lsrs	r1, r2, #3
 80013b4:	075a      	lsls	r2, r3, #29
 80013b6:	4311      	orrs	r1, r2
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	e6a7      	b.n	800110c <__aeabi_dadd+0x294>
 80013bc:	4663      	mov	r3, ip
 80013be:	08f9      	lsrs	r1, r7, #3
 80013c0:	075a      	lsls	r2, r3, #29
 80013c2:	4654      	mov	r4, sl
 80013c4:	4311      	orrs	r1, r2
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	e6a0      	b.n	800110c <__aeabi_dadd+0x294>
 80013ca:	464a      	mov	r2, r9
 80013cc:	4313      	orrs	r3, r2
 80013ce:	001d      	movs	r5, r3
 80013d0:	1e6b      	subs	r3, r5, #1
 80013d2:	419d      	sbcs	r5, r3
 80013d4:	e6c7      	b.n	8001166 <__aeabi_dadd+0x2ee>
 80013d6:	0014      	movs	r4, r2
 80013d8:	001e      	movs	r6, r3
 80013da:	3c20      	subs	r4, #32
 80013dc:	40e6      	lsrs	r6, r4
 80013de:	2a20      	cmp	r2, #32
 80013e0:	d005      	beq.n	80013ee <__aeabi_dadd+0x576>
 80013e2:	2440      	movs	r4, #64	; 0x40
 80013e4:	1aa2      	subs	r2, r4, r2
 80013e6:	4093      	lsls	r3, r2
 80013e8:	464a      	mov	r2, r9
 80013ea:	431a      	orrs	r2, r3
 80013ec:	4691      	mov	r9, r2
 80013ee:	464d      	mov	r5, r9
 80013f0:	1e6b      	subs	r3, r5, #1
 80013f2:	419d      	sbcs	r5, r3
 80013f4:	4335      	orrs	r5, r6
 80013f6:	e778      	b.n	80012ea <__aeabi_dadd+0x472>
 80013f8:	464a      	mov	r2, r9
 80013fa:	431a      	orrs	r2, r3
 80013fc:	d000      	beq.n	8001400 <__aeabi_dadd+0x588>
 80013fe:	e66b      	b.n	80010d8 <__aeabi_dadd+0x260>
 8001400:	076b      	lsls	r3, r5, #29
 8001402:	08f9      	lsrs	r1, r7, #3
 8001404:	4319      	orrs	r1, r3
 8001406:	08eb      	lsrs	r3, r5, #3
 8001408:	e680      	b.n	800110c <__aeabi_dadd+0x294>
 800140a:	4661      	mov	r1, ip
 800140c:	4339      	orrs	r1, r7
 800140e:	d054      	beq.n	80014ba <__aeabi_dadd+0x642>
 8001410:	4663      	mov	r3, ip
 8001412:	08f9      	lsrs	r1, r7, #3
 8001414:	075c      	lsls	r4, r3, #29
 8001416:	4321      	orrs	r1, r4
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	0004      	movs	r4, r0
 800141c:	e654      	b.n	80010c8 <__aeabi_dadd+0x250>
 800141e:	464a      	mov	r2, r9
 8001420:	1abd      	subs	r5, r7, r2
 8001422:	42af      	cmp	r7, r5
 8001424:	4189      	sbcs	r1, r1
 8001426:	4662      	mov	r2, ip
 8001428:	4249      	negs	r1, r1
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	1a5b      	subs	r3, r3, r1
 800142e:	4698      	mov	r8, r3
 8001430:	0004      	movs	r4, r0
 8001432:	2601      	movs	r6, #1
 8001434:	e56b      	b.n	8000f0e <__aeabi_dadd+0x96>
 8001436:	464a      	mov	r2, r9
 8001438:	1bd5      	subs	r5, r2, r7
 800143a:	45a9      	cmp	r9, r5
 800143c:	4189      	sbcs	r1, r1
 800143e:	4662      	mov	r2, ip
 8001440:	4249      	negs	r1, r1
 8001442:	1a9a      	subs	r2, r3, r2
 8001444:	1a52      	subs	r2, r2, r1
 8001446:	4690      	mov	r8, r2
 8001448:	0212      	lsls	r2, r2, #8
 800144a:	d532      	bpl.n	80014b2 <__aeabi_dadd+0x63a>
 800144c:	464a      	mov	r2, r9
 800144e:	1abd      	subs	r5, r7, r2
 8001450:	42af      	cmp	r7, r5
 8001452:	4189      	sbcs	r1, r1
 8001454:	4662      	mov	r2, ip
 8001456:	4249      	negs	r1, r1
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	1a5b      	subs	r3, r3, r1
 800145c:	4698      	mov	r8, r3
 800145e:	0004      	movs	r4, r0
 8001460:	e584      	b.n	8000f6c <__aeabi_dadd+0xf4>
 8001462:	4663      	mov	r3, ip
 8001464:	08f9      	lsrs	r1, r7, #3
 8001466:	075a      	lsls	r2, r3, #29
 8001468:	4311      	orrs	r1, r2
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	e64e      	b.n	800110c <__aeabi_dadd+0x294>
 800146e:	08f9      	lsrs	r1, r7, #3
 8001470:	0768      	lsls	r0, r5, #29
 8001472:	4301      	orrs	r1, r0
 8001474:	08eb      	lsrs	r3, r5, #3
 8001476:	e624      	b.n	80010c2 <__aeabi_dadd+0x24a>
 8001478:	4662      	mov	r2, ip
 800147a:	433a      	orrs	r2, r7
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x608>
 800147e:	e698      	b.n	80011b2 <__aeabi_dadd+0x33a>
 8001480:	464a      	mov	r2, r9
 8001482:	08d1      	lsrs	r1, r2, #3
 8001484:	075a      	lsls	r2, r3, #29
 8001486:	4311      	orrs	r1, r2
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	031b      	lsls	r3, r3, #12
 800148e:	421a      	tst	r2, r3
 8001490:	d008      	beq.n	80014a4 <__aeabi_dadd+0x62c>
 8001492:	4660      	mov	r0, ip
 8001494:	08c5      	lsrs	r5, r0, #3
 8001496:	421d      	tst	r5, r3
 8001498:	d104      	bne.n	80014a4 <__aeabi_dadd+0x62c>
 800149a:	4654      	mov	r4, sl
 800149c:	002a      	movs	r2, r5
 800149e:	08f9      	lsrs	r1, r7, #3
 80014a0:	0743      	lsls	r3, r0, #29
 80014a2:	4319      	orrs	r1, r3
 80014a4:	0f4b      	lsrs	r3, r1, #29
 80014a6:	00c9      	lsls	r1, r1, #3
 80014a8:	075b      	lsls	r3, r3, #29
 80014aa:	08c9      	lsrs	r1, r1, #3
 80014ac:	4319      	orrs	r1, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	e62c      	b.n	800110c <__aeabi_dadd+0x294>
 80014b2:	4641      	mov	r1, r8
 80014b4:	4329      	orrs	r1, r5
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x642>
 80014b8:	e5fa      	b.n	80010b0 <__aeabi_dadd+0x238>
 80014ba:	2300      	movs	r3, #0
 80014bc:	000a      	movs	r2, r1
 80014be:	2400      	movs	r4, #0
 80014c0:	e602      	b.n	80010c8 <__aeabi_dadd+0x250>
 80014c2:	076b      	lsls	r3, r5, #29
 80014c4:	08f9      	lsrs	r1, r7, #3
 80014c6:	4319      	orrs	r1, r3
 80014c8:	08eb      	lsrs	r3, r5, #3
 80014ca:	e5fd      	b.n	80010c8 <__aeabi_dadd+0x250>
 80014cc:	4663      	mov	r3, ip
 80014ce:	08f9      	lsrs	r1, r7, #3
 80014d0:	075b      	lsls	r3, r3, #29
 80014d2:	4319      	orrs	r1, r3
 80014d4:	4663      	mov	r3, ip
 80014d6:	0004      	movs	r4, r0
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	e617      	b.n	800110c <__aeabi_dadd+0x294>
 80014dc:	003d      	movs	r5, r7
 80014de:	444d      	add	r5, r9
 80014e0:	4463      	add	r3, ip
 80014e2:	454d      	cmp	r5, r9
 80014e4:	4189      	sbcs	r1, r1
 80014e6:	4698      	mov	r8, r3
 80014e8:	4249      	negs	r1, r1
 80014ea:	4488      	add	r8, r1
 80014ec:	4643      	mov	r3, r8
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	d400      	bmi.n	80014f4 <__aeabi_dadd+0x67c>
 80014f2:	e5dd      	b.n	80010b0 <__aeabi_dadd+0x238>
 80014f4:	4642      	mov	r2, r8
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <__aeabi_dadd+0x6d0>)
 80014f8:	2601      	movs	r6, #1
 80014fa:	401a      	ands	r2, r3
 80014fc:	4690      	mov	r8, r2
 80014fe:	e5d7      	b.n	80010b0 <__aeabi_dadd+0x238>
 8001500:	0010      	movs	r0, r2
 8001502:	001e      	movs	r6, r3
 8001504:	3820      	subs	r0, #32
 8001506:	40c6      	lsrs	r6, r0
 8001508:	2a20      	cmp	r2, #32
 800150a:	d005      	beq.n	8001518 <__aeabi_dadd+0x6a0>
 800150c:	2040      	movs	r0, #64	; 0x40
 800150e:	1a82      	subs	r2, r0, r2
 8001510:	4093      	lsls	r3, r2
 8001512:	464a      	mov	r2, r9
 8001514:	431a      	orrs	r2, r3
 8001516:	4691      	mov	r9, r2
 8001518:	464d      	mov	r5, r9
 800151a:	1e6b      	subs	r3, r5, #1
 800151c:	419d      	sbcs	r5, r3
 800151e:	4335      	orrs	r5, r6
 8001520:	e621      	b.n	8001166 <__aeabi_dadd+0x2ee>
 8001522:	0002      	movs	r2, r0
 8001524:	2300      	movs	r3, #0
 8001526:	2100      	movs	r1, #0
 8001528:	e540      	b.n	8000fac <__aeabi_dadd+0x134>
 800152a:	464a      	mov	r2, r9
 800152c:	19d5      	adds	r5, r2, r7
 800152e:	42bd      	cmp	r5, r7
 8001530:	4189      	sbcs	r1, r1
 8001532:	4463      	add	r3, ip
 8001534:	4698      	mov	r8, r3
 8001536:	4249      	negs	r1, r1
 8001538:	4488      	add	r8, r1
 800153a:	e5b3      	b.n	80010a4 <__aeabi_dadd+0x22c>
 800153c:	2100      	movs	r1, #0
 800153e:	4a01      	ldr	r2, [pc, #4]	; (8001544 <__aeabi_dadd+0x6cc>)
 8001540:	000b      	movs	r3, r1
 8001542:	e533      	b.n	8000fac <__aeabi_dadd+0x134>
 8001544:	000007ff 	.word	0x000007ff
 8001548:	ff7fffff 	.word	0xff7fffff

0800154c <__aeabi_ddiv>:
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	4657      	mov	r7, sl
 8001550:	464e      	mov	r6, r9
 8001552:	4645      	mov	r5, r8
 8001554:	46de      	mov	lr, fp
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	4681      	mov	r9, r0
 800155a:	0005      	movs	r5, r0
 800155c:	030c      	lsls	r4, r1, #12
 800155e:	0048      	lsls	r0, r1, #1
 8001560:	4692      	mov	sl, r2
 8001562:	001f      	movs	r7, r3
 8001564:	b085      	sub	sp, #20
 8001566:	0b24      	lsrs	r4, r4, #12
 8001568:	0d40      	lsrs	r0, r0, #21
 800156a:	0fce      	lsrs	r6, r1, #31
 800156c:	2800      	cmp	r0, #0
 800156e:	d059      	beq.n	8001624 <__aeabi_ddiv+0xd8>
 8001570:	4b87      	ldr	r3, [pc, #540]	; (8001790 <__aeabi_ddiv+0x244>)
 8001572:	4298      	cmp	r0, r3
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x2c>
 8001576:	e098      	b.n	80016aa <__aeabi_ddiv+0x15e>
 8001578:	0f6b      	lsrs	r3, r5, #29
 800157a:	00e4      	lsls	r4, r4, #3
 800157c:	431c      	orrs	r4, r3
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	041b      	lsls	r3, r3, #16
 8001582:	4323      	orrs	r3, r4
 8001584:	4698      	mov	r8, r3
 8001586:	4b83      	ldr	r3, [pc, #524]	; (8001794 <__aeabi_ddiv+0x248>)
 8001588:	00ed      	lsls	r5, r5, #3
 800158a:	469b      	mov	fp, r3
 800158c:	2300      	movs	r3, #0
 800158e:	4699      	mov	r9, r3
 8001590:	4483      	add	fp, r0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	033c      	lsls	r4, r7, #12
 8001596:	007b      	lsls	r3, r7, #1
 8001598:	4650      	mov	r0, sl
 800159a:	0b24      	lsrs	r4, r4, #12
 800159c:	0d5b      	lsrs	r3, r3, #21
 800159e:	0fff      	lsrs	r7, r7, #31
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d067      	beq.n	8001674 <__aeabi_ddiv+0x128>
 80015a4:	4a7a      	ldr	r2, [pc, #488]	; (8001790 <__aeabi_ddiv+0x244>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d018      	beq.n	80015dc <__aeabi_ddiv+0x90>
 80015aa:	497a      	ldr	r1, [pc, #488]	; (8001794 <__aeabi_ddiv+0x248>)
 80015ac:	0f42      	lsrs	r2, r0, #29
 80015ae:	468c      	mov	ip, r1
 80015b0:	00e4      	lsls	r4, r4, #3
 80015b2:	4659      	mov	r1, fp
 80015b4:	4314      	orrs	r4, r2
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	4463      	add	r3, ip
 80015ba:	0412      	lsls	r2, r2, #16
 80015bc:	1acb      	subs	r3, r1, r3
 80015be:	4314      	orrs	r4, r2
 80015c0:	469b      	mov	fp, r3
 80015c2:	00c2      	lsls	r2, r0, #3
 80015c4:	2000      	movs	r0, #0
 80015c6:	0033      	movs	r3, r6
 80015c8:	407b      	eors	r3, r7
 80015ca:	469a      	mov	sl, r3
 80015cc:	464b      	mov	r3, r9
 80015ce:	2b0f      	cmp	r3, #15
 80015d0:	d900      	bls.n	80015d4 <__aeabi_ddiv+0x88>
 80015d2:	e0ef      	b.n	80017b4 <__aeabi_ddiv+0x268>
 80015d4:	4970      	ldr	r1, [pc, #448]	; (8001798 <__aeabi_ddiv+0x24c>)
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	58cb      	ldr	r3, [r1, r3]
 80015da:	469f      	mov	pc, r3
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <__aeabi_ddiv+0x250>)
 80015de:	4652      	mov	r2, sl
 80015e0:	469c      	mov	ip, r3
 80015e2:	4322      	orrs	r2, r4
 80015e4:	44e3      	add	fp, ip
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d000      	beq.n	80015ec <__aeabi_ddiv+0xa0>
 80015ea:	e095      	b.n	8001718 <__aeabi_ddiv+0x1cc>
 80015ec:	4649      	mov	r1, r9
 80015ee:	2302      	movs	r3, #2
 80015f0:	4319      	orrs	r1, r3
 80015f2:	4689      	mov	r9, r1
 80015f4:	2400      	movs	r4, #0
 80015f6:	2002      	movs	r0, #2
 80015f8:	e7e5      	b.n	80015c6 <__aeabi_ddiv+0x7a>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2400      	movs	r4, #0
 80015fe:	2500      	movs	r5, #0
 8001600:	4652      	mov	r2, sl
 8001602:	051b      	lsls	r3, r3, #20
 8001604:	4323      	orrs	r3, r4
 8001606:	07d2      	lsls	r2, r2, #31
 8001608:	4313      	orrs	r3, r2
 800160a:	0028      	movs	r0, r5
 800160c:	0019      	movs	r1, r3
 800160e:	b005      	add	sp, #20
 8001610:	bcf0      	pop	{r4, r5, r6, r7}
 8001612:	46bb      	mov	fp, r7
 8001614:	46b2      	mov	sl, r6
 8001616:	46a9      	mov	r9, r5
 8001618:	46a0      	mov	r8, r4
 800161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161c:	2400      	movs	r4, #0
 800161e:	2500      	movs	r5, #0
 8001620:	4b5b      	ldr	r3, [pc, #364]	; (8001790 <__aeabi_ddiv+0x244>)
 8001622:	e7ed      	b.n	8001600 <__aeabi_ddiv+0xb4>
 8001624:	464b      	mov	r3, r9
 8001626:	4323      	orrs	r3, r4
 8001628:	4698      	mov	r8, r3
 800162a:	d100      	bne.n	800162e <__aeabi_ddiv+0xe2>
 800162c:	e089      	b.n	8001742 <__aeabi_ddiv+0x1f6>
 800162e:	2c00      	cmp	r4, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_ddiv+0xe8>
 8001632:	e1e0      	b.n	80019f6 <__aeabi_ddiv+0x4aa>
 8001634:	0020      	movs	r0, r4
 8001636:	f001 fa61 	bl	8002afc <__clzsi2>
 800163a:	0001      	movs	r1, r0
 800163c:	0002      	movs	r2, r0
 800163e:	390b      	subs	r1, #11
 8001640:	231d      	movs	r3, #29
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	4649      	mov	r1, r9
 8001646:	0010      	movs	r0, r2
 8001648:	40d9      	lsrs	r1, r3
 800164a:	3808      	subs	r0, #8
 800164c:	4084      	lsls	r4, r0
 800164e:	000b      	movs	r3, r1
 8001650:	464d      	mov	r5, r9
 8001652:	4323      	orrs	r3, r4
 8001654:	4698      	mov	r8, r3
 8001656:	4085      	lsls	r5, r0
 8001658:	4851      	ldr	r0, [pc, #324]	; (80017a0 <__aeabi_ddiv+0x254>)
 800165a:	033c      	lsls	r4, r7, #12
 800165c:	1a83      	subs	r3, r0, r2
 800165e:	469b      	mov	fp, r3
 8001660:	2300      	movs	r3, #0
 8001662:	4699      	mov	r9, r3
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	007b      	lsls	r3, r7, #1
 8001668:	4650      	mov	r0, sl
 800166a:	0b24      	lsrs	r4, r4, #12
 800166c:	0d5b      	lsrs	r3, r3, #21
 800166e:	0fff      	lsrs	r7, r7, #31
 8001670:	2b00      	cmp	r3, #0
 8001672:	d197      	bne.n	80015a4 <__aeabi_ddiv+0x58>
 8001674:	4652      	mov	r2, sl
 8001676:	4322      	orrs	r2, r4
 8001678:	d055      	beq.n	8001726 <__aeabi_ddiv+0x1da>
 800167a:	2c00      	cmp	r4, #0
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x134>
 800167e:	e1ca      	b.n	8001a16 <__aeabi_ddiv+0x4ca>
 8001680:	0020      	movs	r0, r4
 8001682:	f001 fa3b 	bl	8002afc <__clzsi2>
 8001686:	0002      	movs	r2, r0
 8001688:	3a0b      	subs	r2, #11
 800168a:	231d      	movs	r3, #29
 800168c:	0001      	movs	r1, r0
 800168e:	1a9b      	subs	r3, r3, r2
 8001690:	4652      	mov	r2, sl
 8001692:	3908      	subs	r1, #8
 8001694:	40da      	lsrs	r2, r3
 8001696:	408c      	lsls	r4, r1
 8001698:	4314      	orrs	r4, r2
 800169a:	4652      	mov	r2, sl
 800169c:	408a      	lsls	r2, r1
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <__aeabi_ddiv+0x258>)
 80016a0:	4458      	add	r0, fp
 80016a2:	469b      	mov	fp, r3
 80016a4:	4483      	add	fp, r0
 80016a6:	2000      	movs	r0, #0
 80016a8:	e78d      	b.n	80015c6 <__aeabi_ddiv+0x7a>
 80016aa:	464b      	mov	r3, r9
 80016ac:	4323      	orrs	r3, r4
 80016ae:	4698      	mov	r8, r3
 80016b0:	d140      	bne.n	8001734 <__aeabi_ddiv+0x1e8>
 80016b2:	2308      	movs	r3, #8
 80016b4:	4699      	mov	r9, r3
 80016b6:	3b06      	subs	r3, #6
 80016b8:	2500      	movs	r5, #0
 80016ba:	4683      	mov	fp, r0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	e769      	b.n	8001594 <__aeabi_ddiv+0x48>
 80016c0:	46b2      	mov	sl, r6
 80016c2:	9b00      	ldr	r3, [sp, #0]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d0a9      	beq.n	800161c <__aeabi_ddiv+0xd0>
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d100      	bne.n	80016ce <__aeabi_ddiv+0x182>
 80016cc:	e211      	b.n	8001af2 <__aeabi_ddiv+0x5a6>
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d093      	beq.n	80015fa <__aeabi_ddiv+0xae>
 80016d2:	4a35      	ldr	r2, [pc, #212]	; (80017a8 <__aeabi_ddiv+0x25c>)
 80016d4:	445a      	add	r2, fp
 80016d6:	2a00      	cmp	r2, #0
 80016d8:	dc00      	bgt.n	80016dc <__aeabi_ddiv+0x190>
 80016da:	e13c      	b.n	8001956 <__aeabi_ddiv+0x40a>
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d000      	beq.n	80016e2 <__aeabi_ddiv+0x196>
 80016e0:	e1a7      	b.n	8001a32 <__aeabi_ddiv+0x4e6>
 80016e2:	08ed      	lsrs	r5, r5, #3
 80016e4:	4643      	mov	r3, r8
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	d506      	bpl.n	80016f8 <__aeabi_ddiv+0x1ac>
 80016ea:	4642      	mov	r2, r8
 80016ec:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <__aeabi_ddiv+0x260>)
 80016ee:	401a      	ands	r2, r3
 80016f0:	4690      	mov	r8, r2
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	445a      	add	r2, fp
 80016f8:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <__aeabi_ddiv+0x264>)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dc8e      	bgt.n	800161c <__aeabi_ddiv+0xd0>
 80016fe:	4643      	mov	r3, r8
 8001700:	0552      	lsls	r2, r2, #21
 8001702:	0758      	lsls	r0, r3, #29
 8001704:	025c      	lsls	r4, r3, #9
 8001706:	4305      	orrs	r5, r0
 8001708:	0b24      	lsrs	r4, r4, #12
 800170a:	0d53      	lsrs	r3, r2, #21
 800170c:	e778      	b.n	8001600 <__aeabi_ddiv+0xb4>
 800170e:	46ba      	mov	sl, r7
 8001710:	46a0      	mov	r8, r4
 8001712:	0015      	movs	r5, r2
 8001714:	9000      	str	r0, [sp, #0]
 8001716:	e7d4      	b.n	80016c2 <__aeabi_ddiv+0x176>
 8001718:	464a      	mov	r2, r9
 800171a:	2303      	movs	r3, #3
 800171c:	431a      	orrs	r2, r3
 800171e:	4691      	mov	r9, r2
 8001720:	2003      	movs	r0, #3
 8001722:	4652      	mov	r2, sl
 8001724:	e74f      	b.n	80015c6 <__aeabi_ddiv+0x7a>
 8001726:	4649      	mov	r1, r9
 8001728:	2301      	movs	r3, #1
 800172a:	4319      	orrs	r1, r3
 800172c:	4689      	mov	r9, r1
 800172e:	2400      	movs	r4, #0
 8001730:	2001      	movs	r0, #1
 8001732:	e748      	b.n	80015c6 <__aeabi_ddiv+0x7a>
 8001734:	230c      	movs	r3, #12
 8001736:	4699      	mov	r9, r3
 8001738:	3b09      	subs	r3, #9
 800173a:	46a0      	mov	r8, r4
 800173c:	4683      	mov	fp, r0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	e728      	b.n	8001594 <__aeabi_ddiv+0x48>
 8001742:	2304      	movs	r3, #4
 8001744:	4699      	mov	r9, r3
 8001746:	2300      	movs	r3, #0
 8001748:	469b      	mov	fp, r3
 800174a:	3301      	adds	r3, #1
 800174c:	2500      	movs	r5, #0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	e720      	b.n	8001594 <__aeabi_ddiv+0x48>
 8001752:	2300      	movs	r3, #0
 8001754:	2480      	movs	r4, #128	; 0x80
 8001756:	469a      	mov	sl, r3
 8001758:	2500      	movs	r5, #0
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <__aeabi_ddiv+0x244>)
 800175c:	0324      	lsls	r4, r4, #12
 800175e:	e74f      	b.n	8001600 <__aeabi_ddiv+0xb4>
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	4641      	mov	r1, r8
 8001764:	031b      	lsls	r3, r3, #12
 8001766:	4219      	tst	r1, r3
 8001768:	d008      	beq.n	800177c <__aeabi_ddiv+0x230>
 800176a:	421c      	tst	r4, r3
 800176c:	d106      	bne.n	800177c <__aeabi_ddiv+0x230>
 800176e:	431c      	orrs	r4, r3
 8001770:	0324      	lsls	r4, r4, #12
 8001772:	46ba      	mov	sl, r7
 8001774:	0015      	movs	r5, r2
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <__aeabi_ddiv+0x244>)
 8001778:	0b24      	lsrs	r4, r4, #12
 800177a:	e741      	b.n	8001600 <__aeabi_ddiv+0xb4>
 800177c:	2480      	movs	r4, #128	; 0x80
 800177e:	4643      	mov	r3, r8
 8001780:	0324      	lsls	r4, r4, #12
 8001782:	431c      	orrs	r4, r3
 8001784:	0324      	lsls	r4, r4, #12
 8001786:	46b2      	mov	sl, r6
 8001788:	4b01      	ldr	r3, [pc, #4]	; (8001790 <__aeabi_ddiv+0x244>)
 800178a:	0b24      	lsrs	r4, r4, #12
 800178c:	e738      	b.n	8001600 <__aeabi_ddiv+0xb4>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	000007ff 	.word	0x000007ff
 8001794:	fffffc01 	.word	0xfffffc01
 8001798:	08009e20 	.word	0x08009e20
 800179c:	fffff801 	.word	0xfffff801
 80017a0:	fffffc0d 	.word	0xfffffc0d
 80017a4:	000003f3 	.word	0x000003f3
 80017a8:	000003ff 	.word	0x000003ff
 80017ac:	feffffff 	.word	0xfeffffff
 80017b0:	000007fe 	.word	0x000007fe
 80017b4:	4544      	cmp	r4, r8
 80017b6:	d200      	bcs.n	80017ba <__aeabi_ddiv+0x26e>
 80017b8:	e116      	b.n	80019e8 <__aeabi_ddiv+0x49c>
 80017ba:	d100      	bne.n	80017be <__aeabi_ddiv+0x272>
 80017bc:	e111      	b.n	80019e2 <__aeabi_ddiv+0x496>
 80017be:	2301      	movs	r3, #1
 80017c0:	425b      	negs	r3, r3
 80017c2:	469c      	mov	ip, r3
 80017c4:	002e      	movs	r6, r5
 80017c6:	4640      	mov	r0, r8
 80017c8:	2500      	movs	r5, #0
 80017ca:	44e3      	add	fp, ip
 80017cc:	0223      	lsls	r3, r4, #8
 80017ce:	0e14      	lsrs	r4, r2, #24
 80017d0:	431c      	orrs	r4, r3
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	4699      	mov	r9, r3
 80017d6:	0423      	lsls	r3, r4, #16
 80017d8:	0c1f      	lsrs	r7, r3, #16
 80017da:	0212      	lsls	r2, r2, #8
 80017dc:	4649      	mov	r1, r9
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	9701      	str	r7, [sp, #4]
 80017e2:	f7fe fd2b 	bl	800023c <__aeabi_uidivmod>
 80017e6:	0002      	movs	r2, r0
 80017e8:	437a      	muls	r2, r7
 80017ea:	040b      	lsls	r3, r1, #16
 80017ec:	0c31      	lsrs	r1, r6, #16
 80017ee:	4680      	mov	r8, r0
 80017f0:	4319      	orrs	r1, r3
 80017f2:	428a      	cmp	r2, r1
 80017f4:	d90b      	bls.n	800180e <__aeabi_ddiv+0x2c2>
 80017f6:	2301      	movs	r3, #1
 80017f8:	425b      	negs	r3, r3
 80017fa:	469c      	mov	ip, r3
 80017fc:	1909      	adds	r1, r1, r4
 80017fe:	44e0      	add	r8, ip
 8001800:	428c      	cmp	r4, r1
 8001802:	d804      	bhi.n	800180e <__aeabi_ddiv+0x2c2>
 8001804:	428a      	cmp	r2, r1
 8001806:	d902      	bls.n	800180e <__aeabi_ddiv+0x2c2>
 8001808:	1e83      	subs	r3, r0, #2
 800180a:	4698      	mov	r8, r3
 800180c:	1909      	adds	r1, r1, r4
 800180e:	1a88      	subs	r0, r1, r2
 8001810:	4649      	mov	r1, r9
 8001812:	f7fe fd13 	bl	800023c <__aeabi_uidivmod>
 8001816:	0409      	lsls	r1, r1, #16
 8001818:	468c      	mov	ip, r1
 800181a:	0431      	lsls	r1, r6, #16
 800181c:	4666      	mov	r6, ip
 800181e:	9a01      	ldr	r2, [sp, #4]
 8001820:	0c09      	lsrs	r1, r1, #16
 8001822:	4342      	muls	r2, r0
 8001824:	0003      	movs	r3, r0
 8001826:	4331      	orrs	r1, r6
 8001828:	428a      	cmp	r2, r1
 800182a:	d904      	bls.n	8001836 <__aeabi_ddiv+0x2ea>
 800182c:	1909      	adds	r1, r1, r4
 800182e:	3b01      	subs	r3, #1
 8001830:	428c      	cmp	r4, r1
 8001832:	d800      	bhi.n	8001836 <__aeabi_ddiv+0x2ea>
 8001834:	e111      	b.n	8001a5a <__aeabi_ddiv+0x50e>
 8001836:	1a89      	subs	r1, r1, r2
 8001838:	4642      	mov	r2, r8
 800183a:	9e00      	ldr	r6, [sp, #0]
 800183c:	0412      	lsls	r2, r2, #16
 800183e:	431a      	orrs	r2, r3
 8001840:	0c33      	lsrs	r3, r6, #16
 8001842:	001f      	movs	r7, r3
 8001844:	0c10      	lsrs	r0, r2, #16
 8001846:	4690      	mov	r8, r2
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	0413      	lsls	r3, r2, #16
 800184c:	0432      	lsls	r2, r6, #16
 800184e:	0c16      	lsrs	r6, r2, #16
 8001850:	0032      	movs	r2, r6
 8001852:	0c1b      	lsrs	r3, r3, #16
 8001854:	435a      	muls	r2, r3
 8001856:	9603      	str	r6, [sp, #12]
 8001858:	437b      	muls	r3, r7
 800185a:	4346      	muls	r6, r0
 800185c:	4378      	muls	r0, r7
 800185e:	0c17      	lsrs	r7, r2, #16
 8001860:	46bc      	mov	ip, r7
 8001862:	199b      	adds	r3, r3, r6
 8001864:	4463      	add	r3, ip
 8001866:	429e      	cmp	r6, r3
 8001868:	d903      	bls.n	8001872 <__aeabi_ddiv+0x326>
 800186a:	2680      	movs	r6, #128	; 0x80
 800186c:	0276      	lsls	r6, r6, #9
 800186e:	46b4      	mov	ip, r6
 8001870:	4460      	add	r0, ip
 8001872:	0c1e      	lsrs	r6, r3, #16
 8001874:	1830      	adds	r0, r6, r0
 8001876:	0416      	lsls	r6, r2, #16
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	0c36      	lsrs	r6, r6, #16
 800187c:	199e      	adds	r6, r3, r6
 800187e:	4281      	cmp	r1, r0
 8001880:	d200      	bcs.n	8001884 <__aeabi_ddiv+0x338>
 8001882:	e09c      	b.n	80019be <__aeabi_ddiv+0x472>
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x33c>
 8001886:	e097      	b.n	80019b8 <__aeabi_ddiv+0x46c>
 8001888:	1bae      	subs	r6, r5, r6
 800188a:	1a09      	subs	r1, r1, r0
 800188c:	42b5      	cmp	r5, r6
 800188e:	4180      	sbcs	r0, r0
 8001890:	4240      	negs	r0, r0
 8001892:	1a08      	subs	r0, r1, r0
 8001894:	4284      	cmp	r4, r0
 8001896:	d100      	bne.n	800189a <__aeabi_ddiv+0x34e>
 8001898:	e111      	b.n	8001abe <__aeabi_ddiv+0x572>
 800189a:	4649      	mov	r1, r9
 800189c:	f7fe fcce 	bl	800023c <__aeabi_uidivmod>
 80018a0:	9a01      	ldr	r2, [sp, #4]
 80018a2:	040b      	lsls	r3, r1, #16
 80018a4:	4342      	muls	r2, r0
 80018a6:	0c31      	lsrs	r1, r6, #16
 80018a8:	0005      	movs	r5, r0
 80018aa:	4319      	orrs	r1, r3
 80018ac:	428a      	cmp	r2, r1
 80018ae:	d907      	bls.n	80018c0 <__aeabi_ddiv+0x374>
 80018b0:	1909      	adds	r1, r1, r4
 80018b2:	3d01      	subs	r5, #1
 80018b4:	428c      	cmp	r4, r1
 80018b6:	d803      	bhi.n	80018c0 <__aeabi_ddiv+0x374>
 80018b8:	428a      	cmp	r2, r1
 80018ba:	d901      	bls.n	80018c0 <__aeabi_ddiv+0x374>
 80018bc:	1e85      	subs	r5, r0, #2
 80018be:	1909      	adds	r1, r1, r4
 80018c0:	1a88      	subs	r0, r1, r2
 80018c2:	4649      	mov	r1, r9
 80018c4:	f7fe fcba 	bl	800023c <__aeabi_uidivmod>
 80018c8:	0409      	lsls	r1, r1, #16
 80018ca:	468c      	mov	ip, r1
 80018cc:	0431      	lsls	r1, r6, #16
 80018ce:	4666      	mov	r6, ip
 80018d0:	9a01      	ldr	r2, [sp, #4]
 80018d2:	0c09      	lsrs	r1, r1, #16
 80018d4:	4342      	muls	r2, r0
 80018d6:	0003      	movs	r3, r0
 80018d8:	4331      	orrs	r1, r6
 80018da:	428a      	cmp	r2, r1
 80018dc:	d907      	bls.n	80018ee <__aeabi_ddiv+0x3a2>
 80018de:	1909      	adds	r1, r1, r4
 80018e0:	3b01      	subs	r3, #1
 80018e2:	428c      	cmp	r4, r1
 80018e4:	d803      	bhi.n	80018ee <__aeabi_ddiv+0x3a2>
 80018e6:	428a      	cmp	r2, r1
 80018e8:	d901      	bls.n	80018ee <__aeabi_ddiv+0x3a2>
 80018ea:	1e83      	subs	r3, r0, #2
 80018ec:	1909      	adds	r1, r1, r4
 80018ee:	9e03      	ldr	r6, [sp, #12]
 80018f0:	1a89      	subs	r1, r1, r2
 80018f2:	0032      	movs	r2, r6
 80018f4:	042d      	lsls	r5, r5, #16
 80018f6:	431d      	orrs	r5, r3
 80018f8:	9f02      	ldr	r7, [sp, #8]
 80018fa:	042b      	lsls	r3, r5, #16
 80018fc:	0c1b      	lsrs	r3, r3, #16
 80018fe:	435a      	muls	r2, r3
 8001900:	437b      	muls	r3, r7
 8001902:	469c      	mov	ip, r3
 8001904:	0c28      	lsrs	r0, r5, #16
 8001906:	4346      	muls	r6, r0
 8001908:	0c13      	lsrs	r3, r2, #16
 800190a:	44b4      	add	ip, r6
 800190c:	4463      	add	r3, ip
 800190e:	4378      	muls	r0, r7
 8001910:	429e      	cmp	r6, r3
 8001912:	d903      	bls.n	800191c <__aeabi_ddiv+0x3d0>
 8001914:	2680      	movs	r6, #128	; 0x80
 8001916:	0276      	lsls	r6, r6, #9
 8001918:	46b4      	mov	ip, r6
 800191a:	4460      	add	r0, ip
 800191c:	0c1e      	lsrs	r6, r3, #16
 800191e:	0412      	lsls	r2, r2, #16
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c12      	lsrs	r2, r2, #16
 8001924:	1830      	adds	r0, r6, r0
 8001926:	189b      	adds	r3, r3, r2
 8001928:	4281      	cmp	r1, r0
 800192a:	d306      	bcc.n	800193a <__aeabi_ddiv+0x3ee>
 800192c:	d002      	beq.n	8001934 <__aeabi_ddiv+0x3e8>
 800192e:	2301      	movs	r3, #1
 8001930:	431d      	orrs	r5, r3
 8001932:	e6ce      	b.n	80016d2 <__aeabi_ddiv+0x186>
 8001934:	2b00      	cmp	r3, #0
 8001936:	d100      	bne.n	800193a <__aeabi_ddiv+0x3ee>
 8001938:	e6cb      	b.n	80016d2 <__aeabi_ddiv+0x186>
 800193a:	1861      	adds	r1, r4, r1
 800193c:	1e6e      	subs	r6, r5, #1
 800193e:	42a1      	cmp	r1, r4
 8001940:	d200      	bcs.n	8001944 <__aeabi_ddiv+0x3f8>
 8001942:	e0a4      	b.n	8001a8e <__aeabi_ddiv+0x542>
 8001944:	4281      	cmp	r1, r0
 8001946:	d200      	bcs.n	800194a <__aeabi_ddiv+0x3fe>
 8001948:	e0c9      	b.n	8001ade <__aeabi_ddiv+0x592>
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x402>
 800194c:	e0d9      	b.n	8001b02 <__aeabi_ddiv+0x5b6>
 800194e:	0035      	movs	r5, r6
 8001950:	e7ed      	b.n	800192e <__aeabi_ddiv+0x3e2>
 8001952:	2501      	movs	r5, #1
 8001954:	426d      	negs	r5, r5
 8001956:	2101      	movs	r1, #1
 8001958:	1a89      	subs	r1, r1, r2
 800195a:	2938      	cmp	r1, #56	; 0x38
 800195c:	dd00      	ble.n	8001960 <__aeabi_ddiv+0x414>
 800195e:	e64c      	b.n	80015fa <__aeabi_ddiv+0xae>
 8001960:	291f      	cmp	r1, #31
 8001962:	dc00      	bgt.n	8001966 <__aeabi_ddiv+0x41a>
 8001964:	e07f      	b.n	8001a66 <__aeabi_ddiv+0x51a>
 8001966:	231f      	movs	r3, #31
 8001968:	425b      	negs	r3, r3
 800196a:	1a9a      	subs	r2, r3, r2
 800196c:	4643      	mov	r3, r8
 800196e:	40d3      	lsrs	r3, r2
 8001970:	2920      	cmp	r1, #32
 8001972:	d004      	beq.n	800197e <__aeabi_ddiv+0x432>
 8001974:	4644      	mov	r4, r8
 8001976:	4a65      	ldr	r2, [pc, #404]	; (8001b0c <__aeabi_ddiv+0x5c0>)
 8001978:	445a      	add	r2, fp
 800197a:	4094      	lsls	r4, r2
 800197c:	4325      	orrs	r5, r4
 800197e:	1e6a      	subs	r2, r5, #1
 8001980:	4195      	sbcs	r5, r2
 8001982:	2207      	movs	r2, #7
 8001984:	432b      	orrs	r3, r5
 8001986:	0015      	movs	r5, r2
 8001988:	2400      	movs	r4, #0
 800198a:	401d      	ands	r5, r3
 800198c:	421a      	tst	r2, r3
 800198e:	d100      	bne.n	8001992 <__aeabi_ddiv+0x446>
 8001990:	e0a1      	b.n	8001ad6 <__aeabi_ddiv+0x58a>
 8001992:	220f      	movs	r2, #15
 8001994:	2400      	movs	r4, #0
 8001996:	401a      	ands	r2, r3
 8001998:	2a04      	cmp	r2, #4
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0x452>
 800199c:	e098      	b.n	8001ad0 <__aeabi_ddiv+0x584>
 800199e:	1d1a      	adds	r2, r3, #4
 80019a0:	429a      	cmp	r2, r3
 80019a2:	419b      	sbcs	r3, r3
 80019a4:	425b      	negs	r3, r3
 80019a6:	18e4      	adds	r4, r4, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	0222      	lsls	r2, r4, #8
 80019ac:	d400      	bmi.n	80019b0 <__aeabi_ddiv+0x464>
 80019ae:	e08f      	b.n	8001ad0 <__aeabi_ddiv+0x584>
 80019b0:	2301      	movs	r3, #1
 80019b2:	2400      	movs	r4, #0
 80019b4:	2500      	movs	r5, #0
 80019b6:	e623      	b.n	8001600 <__aeabi_ddiv+0xb4>
 80019b8:	42b5      	cmp	r5, r6
 80019ba:	d300      	bcc.n	80019be <__aeabi_ddiv+0x472>
 80019bc:	e764      	b.n	8001888 <__aeabi_ddiv+0x33c>
 80019be:	4643      	mov	r3, r8
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	9b00      	ldr	r3, [sp, #0]
 80019c4:	469c      	mov	ip, r3
 80019c6:	4465      	add	r5, ip
 80019c8:	001f      	movs	r7, r3
 80019ca:	429d      	cmp	r5, r3
 80019cc:	419b      	sbcs	r3, r3
 80019ce:	425b      	negs	r3, r3
 80019d0:	191b      	adds	r3, r3, r4
 80019d2:	18c9      	adds	r1, r1, r3
 80019d4:	428c      	cmp	r4, r1
 80019d6:	d23a      	bcs.n	8001a4e <__aeabi_ddiv+0x502>
 80019d8:	4288      	cmp	r0, r1
 80019da:	d863      	bhi.n	8001aa4 <__aeabi_ddiv+0x558>
 80019dc:	d060      	beq.n	8001aa0 <__aeabi_ddiv+0x554>
 80019de:	4690      	mov	r8, r2
 80019e0:	e752      	b.n	8001888 <__aeabi_ddiv+0x33c>
 80019e2:	42aa      	cmp	r2, r5
 80019e4:	d900      	bls.n	80019e8 <__aeabi_ddiv+0x49c>
 80019e6:	e6ea      	b.n	80017be <__aeabi_ddiv+0x272>
 80019e8:	4643      	mov	r3, r8
 80019ea:	07de      	lsls	r6, r3, #31
 80019ec:	0858      	lsrs	r0, r3, #1
 80019ee:	086b      	lsrs	r3, r5, #1
 80019f0:	431e      	orrs	r6, r3
 80019f2:	07ed      	lsls	r5, r5, #31
 80019f4:	e6ea      	b.n	80017cc <__aeabi_ddiv+0x280>
 80019f6:	4648      	mov	r0, r9
 80019f8:	f001 f880 	bl	8002afc <__clzsi2>
 80019fc:	0001      	movs	r1, r0
 80019fe:	0002      	movs	r2, r0
 8001a00:	3115      	adds	r1, #21
 8001a02:	3220      	adds	r2, #32
 8001a04:	291c      	cmp	r1, #28
 8001a06:	dc00      	bgt.n	8001a0a <__aeabi_ddiv+0x4be>
 8001a08:	e61a      	b.n	8001640 <__aeabi_ddiv+0xf4>
 8001a0a:	464b      	mov	r3, r9
 8001a0c:	3808      	subs	r0, #8
 8001a0e:	4083      	lsls	r3, r0
 8001a10:	2500      	movs	r5, #0
 8001a12:	4698      	mov	r8, r3
 8001a14:	e620      	b.n	8001658 <__aeabi_ddiv+0x10c>
 8001a16:	f001 f871 	bl	8002afc <__clzsi2>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	3215      	adds	r2, #21
 8001a20:	3020      	adds	r0, #32
 8001a22:	2a1c      	cmp	r2, #28
 8001a24:	dc00      	bgt.n	8001a28 <__aeabi_ddiv+0x4dc>
 8001a26:	e630      	b.n	800168a <__aeabi_ddiv+0x13e>
 8001a28:	4654      	mov	r4, sl
 8001a2a:	3b08      	subs	r3, #8
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	409c      	lsls	r4, r3
 8001a30:	e635      	b.n	800169e <__aeabi_ddiv+0x152>
 8001a32:	230f      	movs	r3, #15
 8001a34:	402b      	ands	r3, r5
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d100      	bne.n	8001a3c <__aeabi_ddiv+0x4f0>
 8001a3a:	e652      	b.n	80016e2 <__aeabi_ddiv+0x196>
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	425b      	negs	r3, r3
 8001a40:	42ab      	cmp	r3, r5
 8001a42:	419b      	sbcs	r3, r3
 8001a44:	3504      	adds	r5, #4
 8001a46:	425b      	negs	r3, r3
 8001a48:	08ed      	lsrs	r5, r5, #3
 8001a4a:	4498      	add	r8, r3
 8001a4c:	e64a      	b.n	80016e4 <__aeabi_ddiv+0x198>
 8001a4e:	428c      	cmp	r4, r1
 8001a50:	d1c5      	bne.n	80019de <__aeabi_ddiv+0x492>
 8001a52:	42af      	cmp	r7, r5
 8001a54:	d9c0      	bls.n	80019d8 <__aeabi_ddiv+0x48c>
 8001a56:	4690      	mov	r8, r2
 8001a58:	e716      	b.n	8001888 <__aeabi_ddiv+0x33c>
 8001a5a:	428a      	cmp	r2, r1
 8001a5c:	d800      	bhi.n	8001a60 <__aeabi_ddiv+0x514>
 8001a5e:	e6ea      	b.n	8001836 <__aeabi_ddiv+0x2ea>
 8001a60:	1e83      	subs	r3, r0, #2
 8001a62:	1909      	adds	r1, r1, r4
 8001a64:	e6e7      	b.n	8001836 <__aeabi_ddiv+0x2ea>
 8001a66:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <__aeabi_ddiv+0x5c4>)
 8001a68:	0028      	movs	r0, r5
 8001a6a:	445a      	add	r2, fp
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	4095      	lsls	r5, r2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	40c8      	lsrs	r0, r1
 8001a74:	1e6a      	subs	r2, r5, #1
 8001a76:	4195      	sbcs	r5, r2
 8001a78:	4644      	mov	r4, r8
 8001a7a:	4303      	orrs	r3, r0
 8001a7c:	432b      	orrs	r3, r5
 8001a7e:	40cc      	lsrs	r4, r1
 8001a80:	075a      	lsls	r2, r3, #29
 8001a82:	d092      	beq.n	80019aa <__aeabi_ddiv+0x45e>
 8001a84:	220f      	movs	r2, #15
 8001a86:	401a      	ands	r2, r3
 8001a88:	2a04      	cmp	r2, #4
 8001a8a:	d188      	bne.n	800199e <__aeabi_ddiv+0x452>
 8001a8c:	e78d      	b.n	80019aa <__aeabi_ddiv+0x45e>
 8001a8e:	0035      	movs	r5, r6
 8001a90:	4281      	cmp	r1, r0
 8001a92:	d000      	beq.n	8001a96 <__aeabi_ddiv+0x54a>
 8001a94:	e74b      	b.n	800192e <__aeabi_ddiv+0x3e2>
 8001a96:	9a00      	ldr	r2, [sp, #0]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d000      	beq.n	8001a9e <__aeabi_ddiv+0x552>
 8001a9c:	e747      	b.n	800192e <__aeabi_ddiv+0x3e2>
 8001a9e:	e618      	b.n	80016d2 <__aeabi_ddiv+0x186>
 8001aa0:	42ae      	cmp	r6, r5
 8001aa2:	d99c      	bls.n	80019de <__aeabi_ddiv+0x492>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	425b      	negs	r3, r3
 8001aa8:	469c      	mov	ip, r3
 8001aaa:	9b00      	ldr	r3, [sp, #0]
 8001aac:	44e0      	add	r8, ip
 8001aae:	469c      	mov	ip, r3
 8001ab0:	4465      	add	r5, ip
 8001ab2:	429d      	cmp	r5, r3
 8001ab4:	419b      	sbcs	r3, r3
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	191b      	adds	r3, r3, r4
 8001aba:	18c9      	adds	r1, r1, r3
 8001abc:	e6e4      	b.n	8001888 <__aeabi_ddiv+0x33c>
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <__aeabi_ddiv+0x5c8>)
 8001ac0:	445a      	add	r2, fp
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_ddiv+0x57c>
 8001ac6:	e744      	b.n	8001952 <__aeabi_ddiv+0x406>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	2500      	movs	r5, #0
 8001acc:	4498      	add	r8, r3
 8001ace:	e609      	b.n	80016e4 <__aeabi_ddiv+0x198>
 8001ad0:	0765      	lsls	r5, r4, #29
 8001ad2:	0264      	lsls	r4, r4, #9
 8001ad4:	0b24      	lsrs	r4, r4, #12
 8001ad6:	08db      	lsrs	r3, r3, #3
 8001ad8:	431d      	orrs	r5, r3
 8001ada:	2300      	movs	r3, #0
 8001adc:	e590      	b.n	8001600 <__aeabi_ddiv+0xb4>
 8001ade:	9e00      	ldr	r6, [sp, #0]
 8001ae0:	3d02      	subs	r5, #2
 8001ae2:	0072      	lsls	r2, r6, #1
 8001ae4:	42b2      	cmp	r2, r6
 8001ae6:	41bf      	sbcs	r7, r7
 8001ae8:	427f      	negs	r7, r7
 8001aea:	193c      	adds	r4, r7, r4
 8001aec:	1909      	adds	r1, r1, r4
 8001aee:	9200      	str	r2, [sp, #0]
 8001af0:	e7ce      	b.n	8001a90 <__aeabi_ddiv+0x544>
 8001af2:	2480      	movs	r4, #128	; 0x80
 8001af4:	4643      	mov	r3, r8
 8001af6:	0324      	lsls	r4, r4, #12
 8001af8:	431c      	orrs	r4, r3
 8001afa:	0324      	lsls	r4, r4, #12
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <__aeabi_ddiv+0x5cc>)
 8001afe:	0b24      	lsrs	r4, r4, #12
 8001b00:	e57e      	b.n	8001600 <__aeabi_ddiv+0xb4>
 8001b02:	9a00      	ldr	r2, [sp, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d3ea      	bcc.n	8001ade <__aeabi_ddiv+0x592>
 8001b08:	0035      	movs	r5, r6
 8001b0a:	e7c4      	b.n	8001a96 <__aeabi_ddiv+0x54a>
 8001b0c:	0000043e 	.word	0x0000043e
 8001b10:	0000041e 	.word	0x0000041e
 8001b14:	000003ff 	.word	0x000003ff
 8001b18:	000007ff 	.word	0x000007ff

08001b1c <__eqdf2>:
 8001b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1e:	464f      	mov	r7, r9
 8001b20:	4646      	mov	r6, r8
 8001b22:	46d6      	mov	lr, sl
 8001b24:	4694      	mov	ip, r2
 8001b26:	4691      	mov	r9, r2
 8001b28:	031a      	lsls	r2, r3, #12
 8001b2a:	0b12      	lsrs	r2, r2, #12
 8001b2c:	4d18      	ldr	r5, [pc, #96]	; (8001b90 <__eqdf2+0x74>)
 8001b2e:	b5c0      	push	{r6, r7, lr}
 8001b30:	004c      	lsls	r4, r1, #1
 8001b32:	030f      	lsls	r7, r1, #12
 8001b34:	4692      	mov	sl, r2
 8001b36:	005a      	lsls	r2, r3, #1
 8001b38:	0006      	movs	r6, r0
 8001b3a:	4680      	mov	r8, r0
 8001b3c:	0b3f      	lsrs	r7, r7, #12
 8001b3e:	2001      	movs	r0, #1
 8001b40:	0d64      	lsrs	r4, r4, #21
 8001b42:	0fc9      	lsrs	r1, r1, #31
 8001b44:	0d52      	lsrs	r2, r2, #21
 8001b46:	0fdb      	lsrs	r3, r3, #31
 8001b48:	42ac      	cmp	r4, r5
 8001b4a:	d00a      	beq.n	8001b62 <__eqdf2+0x46>
 8001b4c:	42aa      	cmp	r2, r5
 8001b4e:	d003      	beq.n	8001b58 <__eqdf2+0x3c>
 8001b50:	4294      	cmp	r4, r2
 8001b52:	d101      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b54:	4557      	cmp	r7, sl
 8001b56:	d00d      	beq.n	8001b74 <__eqdf2+0x58>
 8001b58:	bce0      	pop	{r5, r6, r7}
 8001b5a:	46ba      	mov	sl, r7
 8001b5c:	46b1      	mov	r9, r6
 8001b5e:	46a8      	mov	r8, r5
 8001b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b62:	003d      	movs	r5, r7
 8001b64:	4335      	orrs	r5, r6
 8001b66:	d1f7      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b68:	42a2      	cmp	r2, r4
 8001b6a:	d1f5      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b6c:	4652      	mov	r2, sl
 8001b6e:	4665      	mov	r5, ip
 8001b70:	432a      	orrs	r2, r5
 8001b72:	d1f1      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b74:	2001      	movs	r0, #1
 8001b76:	45c8      	cmp	r8, r9
 8001b78:	d1ee      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b7a:	4299      	cmp	r1, r3
 8001b7c:	d006      	beq.n	8001b8c <__eqdf2+0x70>
 8001b7e:	2c00      	cmp	r4, #0
 8001b80:	d1ea      	bne.n	8001b58 <__eqdf2+0x3c>
 8001b82:	433e      	orrs	r6, r7
 8001b84:	0030      	movs	r0, r6
 8001b86:	1e46      	subs	r6, r0, #1
 8001b88:	41b0      	sbcs	r0, r6
 8001b8a:	e7e5      	b.n	8001b58 <__eqdf2+0x3c>
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	e7e3      	b.n	8001b58 <__eqdf2+0x3c>
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__gedf2>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	464e      	mov	r6, r9
 8001b98:	4645      	mov	r5, r8
 8001b9a:	4657      	mov	r7, sl
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	0004      	movs	r4, r0
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	b5e0      	push	{r5, r6, r7, lr}
 8001ba4:	0016      	movs	r6, r2
 8001ba6:	031b      	lsls	r3, r3, #12
 8001ba8:	0b1b      	lsrs	r3, r3, #12
 8001baa:	4d32      	ldr	r5, [pc, #200]	; (8001c74 <__gedf2+0xe0>)
 8001bac:	030f      	lsls	r7, r1, #12
 8001bae:	004a      	lsls	r2, r1, #1
 8001bb0:	4699      	mov	r9, r3
 8001bb2:	0043      	lsls	r3, r0, #1
 8001bb4:	46a4      	mov	ip, r4
 8001bb6:	46b0      	mov	r8, r6
 8001bb8:	0b3f      	lsrs	r7, r7, #12
 8001bba:	0d52      	lsrs	r2, r2, #21
 8001bbc:	0fc9      	lsrs	r1, r1, #31
 8001bbe:	0d5b      	lsrs	r3, r3, #21
 8001bc0:	0fc0      	lsrs	r0, r0, #31
 8001bc2:	42aa      	cmp	r2, r5
 8001bc4:	d029      	beq.n	8001c1a <__gedf2+0x86>
 8001bc6:	42ab      	cmp	r3, r5
 8001bc8:	d018      	beq.n	8001bfc <__gedf2+0x68>
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d12a      	bne.n	8001c24 <__gedf2+0x90>
 8001bce:	433c      	orrs	r4, r7
 8001bd0:	46a3      	mov	fp, r4
 8001bd2:	4265      	negs	r5, r4
 8001bd4:	4165      	adcs	r5, r4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <__gedf2+0x4c>
 8001bda:	464c      	mov	r4, r9
 8001bdc:	4326      	orrs	r6, r4
 8001bde:	d027      	beq.n	8001c30 <__gedf2+0x9c>
 8001be0:	2d00      	cmp	r5, #0
 8001be2:	d115      	bne.n	8001c10 <__gedf2+0x7c>
 8001be4:	4281      	cmp	r1, r0
 8001be6:	d028      	beq.n	8001c3a <__gedf2+0xa6>
 8001be8:	2002      	movs	r0, #2
 8001bea:	3901      	subs	r1, #1
 8001bec:	4008      	ands	r0, r1
 8001bee:	3801      	subs	r0, #1
 8001bf0:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf2:	46bb      	mov	fp, r7
 8001bf4:	46b2      	mov	sl, r6
 8001bf6:	46a9      	mov	r9, r5
 8001bf8:	46a0      	mov	r8, r4
 8001bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfc:	464d      	mov	r5, r9
 8001bfe:	432e      	orrs	r6, r5
 8001c00:	d12f      	bne.n	8001c62 <__gedf2+0xce>
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d1ee      	bne.n	8001be4 <__gedf2+0x50>
 8001c06:	433c      	orrs	r4, r7
 8001c08:	4265      	negs	r5, r4
 8001c0a:	4165      	adcs	r5, r4
 8001c0c:	2d00      	cmp	r5, #0
 8001c0e:	d0e9      	beq.n	8001be4 <__gedf2+0x50>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d1ed      	bne.n	8001bf0 <__gedf2+0x5c>
 8001c14:	2001      	movs	r0, #1
 8001c16:	4240      	negs	r0, r0
 8001c18:	e7ea      	b.n	8001bf0 <__gedf2+0x5c>
 8001c1a:	003d      	movs	r5, r7
 8001c1c:	4325      	orrs	r5, r4
 8001c1e:	d120      	bne.n	8001c62 <__gedf2+0xce>
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d0eb      	beq.n	8001bfc <__gedf2+0x68>
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1dd      	bne.n	8001be4 <__gedf2+0x50>
 8001c28:	464c      	mov	r4, r9
 8001c2a:	4326      	orrs	r6, r4
 8001c2c:	d1da      	bne.n	8001be4 <__gedf2+0x50>
 8001c2e:	e7db      	b.n	8001be8 <__gedf2+0x54>
 8001c30:	465b      	mov	r3, fp
 8001c32:	2000      	movs	r0, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0db      	beq.n	8001bf0 <__gedf2+0x5c>
 8001c38:	e7d6      	b.n	8001be8 <__gedf2+0x54>
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dc0a      	bgt.n	8001c54 <__gedf2+0xc0>
 8001c3e:	dbe7      	blt.n	8001c10 <__gedf2+0x7c>
 8001c40:	454f      	cmp	r7, r9
 8001c42:	d8d1      	bhi.n	8001be8 <__gedf2+0x54>
 8001c44:	d010      	beq.n	8001c68 <__gedf2+0xd4>
 8001c46:	2000      	movs	r0, #0
 8001c48:	454f      	cmp	r7, r9
 8001c4a:	d2d1      	bcs.n	8001bf0 <__gedf2+0x5c>
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d0e1      	beq.n	8001c14 <__gedf2+0x80>
 8001c50:	0008      	movs	r0, r1
 8001c52:	e7cd      	b.n	8001bf0 <__gedf2+0x5c>
 8001c54:	4243      	negs	r3, r0
 8001c56:	4158      	adcs	r0, r3
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4240      	negs	r0, r0
 8001c5c:	4018      	ands	r0, r3
 8001c5e:	3801      	subs	r0, #1
 8001c60:	e7c6      	b.n	8001bf0 <__gedf2+0x5c>
 8001c62:	2002      	movs	r0, #2
 8001c64:	4240      	negs	r0, r0
 8001c66:	e7c3      	b.n	8001bf0 <__gedf2+0x5c>
 8001c68:	45c4      	cmp	ip, r8
 8001c6a:	d8bd      	bhi.n	8001be8 <__gedf2+0x54>
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	45c4      	cmp	ip, r8
 8001c70:	d2be      	bcs.n	8001bf0 <__gedf2+0x5c>
 8001c72:	e7eb      	b.n	8001c4c <__gedf2+0xb8>
 8001c74:	000007ff 	.word	0x000007ff

08001c78 <__ledf2>:
 8001c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c7a:	464e      	mov	r6, r9
 8001c7c:	4645      	mov	r5, r8
 8001c7e:	4657      	mov	r7, sl
 8001c80:	46de      	mov	lr, fp
 8001c82:	0004      	movs	r4, r0
 8001c84:	0018      	movs	r0, r3
 8001c86:	b5e0      	push	{r5, r6, r7, lr}
 8001c88:	0016      	movs	r6, r2
 8001c8a:	031b      	lsls	r3, r3, #12
 8001c8c:	0b1b      	lsrs	r3, r3, #12
 8001c8e:	4d31      	ldr	r5, [pc, #196]	; (8001d54 <__ledf2+0xdc>)
 8001c90:	030f      	lsls	r7, r1, #12
 8001c92:	004a      	lsls	r2, r1, #1
 8001c94:	4699      	mov	r9, r3
 8001c96:	0043      	lsls	r3, r0, #1
 8001c98:	46a4      	mov	ip, r4
 8001c9a:	46b0      	mov	r8, r6
 8001c9c:	0b3f      	lsrs	r7, r7, #12
 8001c9e:	0d52      	lsrs	r2, r2, #21
 8001ca0:	0fc9      	lsrs	r1, r1, #31
 8001ca2:	0d5b      	lsrs	r3, r3, #21
 8001ca4:	0fc0      	lsrs	r0, r0, #31
 8001ca6:	42aa      	cmp	r2, r5
 8001ca8:	d011      	beq.n	8001cce <__ledf2+0x56>
 8001caa:	42ab      	cmp	r3, r5
 8001cac:	d014      	beq.n	8001cd8 <__ledf2+0x60>
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d12f      	bne.n	8001d12 <__ledf2+0x9a>
 8001cb2:	433c      	orrs	r4, r7
 8001cb4:	46a3      	mov	fp, r4
 8001cb6:	4265      	negs	r5, r4
 8001cb8:	4165      	adcs	r5, r4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d114      	bne.n	8001ce8 <__ledf2+0x70>
 8001cbe:	464c      	mov	r4, r9
 8001cc0:	4326      	orrs	r6, r4
 8001cc2:	d111      	bne.n	8001ce8 <__ledf2+0x70>
 8001cc4:	465b      	mov	r3, fp
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d017      	beq.n	8001cfc <__ledf2+0x84>
 8001ccc:	e010      	b.n	8001cf0 <__ledf2+0x78>
 8001cce:	003d      	movs	r5, r7
 8001cd0:	4325      	orrs	r5, r4
 8001cd2:	d112      	bne.n	8001cfa <__ledf2+0x82>
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d11c      	bne.n	8001d12 <__ledf2+0x9a>
 8001cd8:	464d      	mov	r5, r9
 8001cda:	432e      	orrs	r6, r5
 8001cdc:	d10d      	bne.n	8001cfa <__ledf2+0x82>
 8001cde:	2a00      	cmp	r2, #0
 8001ce0:	d104      	bne.n	8001cec <__ledf2+0x74>
 8001ce2:	433c      	orrs	r4, r7
 8001ce4:	4265      	negs	r5, r4
 8001ce6:	4165      	adcs	r5, r4
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d10d      	bne.n	8001d08 <__ledf2+0x90>
 8001cec:	4281      	cmp	r1, r0
 8001cee:	d016      	beq.n	8001d1e <__ledf2+0xa6>
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	3901      	subs	r1, #1
 8001cf4:	4008      	ands	r0, r1
 8001cf6:	3801      	subs	r0, #1
 8001cf8:	e000      	b.n	8001cfc <__ledf2+0x84>
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	bcf0      	pop	{r4, r5, r6, r7}
 8001cfe:	46bb      	mov	fp, r7
 8001d00:	46b2      	mov	sl, r6
 8001d02:	46a9      	mov	r9, r5
 8001d04:	46a0      	mov	r8, r4
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	d1f7      	bne.n	8001cfc <__ledf2+0x84>
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	4240      	negs	r0, r0
 8001d10:	e7f4      	b.n	8001cfc <__ledf2+0x84>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ea      	bne.n	8001cec <__ledf2+0x74>
 8001d16:	464c      	mov	r4, r9
 8001d18:	4326      	orrs	r6, r4
 8001d1a:	d1e7      	bne.n	8001cec <__ledf2+0x74>
 8001d1c:	e7e8      	b.n	8001cf0 <__ledf2+0x78>
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dd06      	ble.n	8001d30 <__ledf2+0xb8>
 8001d22:	4243      	negs	r3, r0
 8001d24:	4158      	adcs	r0, r3
 8001d26:	2302      	movs	r3, #2
 8001d28:	4240      	negs	r0, r0
 8001d2a:	4018      	ands	r0, r3
 8001d2c:	3801      	subs	r0, #1
 8001d2e:	e7e5      	b.n	8001cfc <__ledf2+0x84>
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbe9      	blt.n	8001d08 <__ledf2+0x90>
 8001d34:	454f      	cmp	r7, r9
 8001d36:	d8db      	bhi.n	8001cf0 <__ledf2+0x78>
 8001d38:	d006      	beq.n	8001d48 <__ledf2+0xd0>
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	454f      	cmp	r7, r9
 8001d3e:	d2dd      	bcs.n	8001cfc <__ledf2+0x84>
 8001d40:	2900      	cmp	r1, #0
 8001d42:	d0e3      	beq.n	8001d0c <__ledf2+0x94>
 8001d44:	0008      	movs	r0, r1
 8001d46:	e7d9      	b.n	8001cfc <__ledf2+0x84>
 8001d48:	45c4      	cmp	ip, r8
 8001d4a:	d8d1      	bhi.n	8001cf0 <__ledf2+0x78>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	45c4      	cmp	ip, r8
 8001d50:	d2d4      	bcs.n	8001cfc <__ledf2+0x84>
 8001d52:	e7f5      	b.n	8001d40 <__ledf2+0xc8>
 8001d54:	000007ff 	.word	0x000007ff

08001d58 <__aeabi_dmul>:
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	4657      	mov	r7, sl
 8001d5c:	464e      	mov	r6, r9
 8001d5e:	4645      	mov	r5, r8
 8001d60:	46de      	mov	lr, fp
 8001d62:	b5e0      	push	{r5, r6, r7, lr}
 8001d64:	4698      	mov	r8, r3
 8001d66:	030c      	lsls	r4, r1, #12
 8001d68:	004b      	lsls	r3, r1, #1
 8001d6a:	0006      	movs	r6, r0
 8001d6c:	4692      	mov	sl, r2
 8001d6e:	b087      	sub	sp, #28
 8001d70:	0b24      	lsrs	r4, r4, #12
 8001d72:	0d5b      	lsrs	r3, r3, #21
 8001d74:	0fcf      	lsrs	r7, r1, #31
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d06c      	beq.n	8001e54 <__aeabi_dmul+0xfc>
 8001d7a:	4add      	ldr	r2, [pc, #884]	; (80020f0 <__aeabi_dmul+0x398>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dmul+0x2a>
 8001d80:	e086      	b.n	8001e90 <__aeabi_dmul+0x138>
 8001d82:	0f42      	lsrs	r2, r0, #29
 8001d84:	00e4      	lsls	r4, r4, #3
 8001d86:	4314      	orrs	r4, r2
 8001d88:	2280      	movs	r2, #128	; 0x80
 8001d8a:	0412      	lsls	r2, r2, #16
 8001d8c:	4314      	orrs	r4, r2
 8001d8e:	4ad9      	ldr	r2, [pc, #868]	; (80020f4 <__aeabi_dmul+0x39c>)
 8001d90:	00c5      	lsls	r5, r0, #3
 8001d92:	4694      	mov	ip, r2
 8001d94:	4463      	add	r3, ip
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	4643      	mov	r3, r8
 8001da0:	4642      	mov	r2, r8
 8001da2:	031e      	lsls	r6, r3, #12
 8001da4:	0fd2      	lsrs	r2, r2, #31
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4650      	mov	r0, sl
 8001daa:	4690      	mov	r8, r2
 8001dac:	0b36      	lsrs	r6, r6, #12
 8001dae:	0d5b      	lsrs	r3, r3, #21
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dmul+0x5c>
 8001db2:	e078      	b.n	8001ea6 <__aeabi_dmul+0x14e>
 8001db4:	4ace      	ldr	r2, [pc, #824]	; (80020f0 <__aeabi_dmul+0x398>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <__aeabi_dmul+0x9e>
 8001dba:	49ce      	ldr	r1, [pc, #824]	; (80020f4 <__aeabi_dmul+0x39c>)
 8001dbc:	0f42      	lsrs	r2, r0, #29
 8001dbe:	468c      	mov	ip, r1
 8001dc0:	9900      	ldr	r1, [sp, #0]
 8001dc2:	4463      	add	r3, ip
 8001dc4:	00f6      	lsls	r6, r6, #3
 8001dc6:	468c      	mov	ip, r1
 8001dc8:	4316      	orrs	r6, r2
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	449c      	add	ip, r3
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	4663      	mov	r3, ip
 8001dd2:	4316      	orrs	r6, r2
 8001dd4:	00c2      	lsls	r2, r0, #3
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	9900      	ldr	r1, [sp, #0]
 8001ddc:	4643      	mov	r3, r8
 8001dde:	3101      	adds	r1, #1
 8001de0:	468c      	mov	ip, r1
 8001de2:	4649      	mov	r1, r9
 8001de4:	407b      	eors	r3, r7
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	290f      	cmp	r1, #15
 8001dea:	d900      	bls.n	8001dee <__aeabi_dmul+0x96>
 8001dec:	e07e      	b.n	8001eec <__aeabi_dmul+0x194>
 8001dee:	4bc2      	ldr	r3, [pc, #776]	; (80020f8 <__aeabi_dmul+0x3a0>)
 8001df0:	0089      	lsls	r1, r1, #2
 8001df2:	5859      	ldr	r1, [r3, r1]
 8001df4:	468f      	mov	pc, r1
 8001df6:	4652      	mov	r2, sl
 8001df8:	9b00      	ldr	r3, [sp, #0]
 8001dfa:	4332      	orrs	r2, r6
 8001dfc:	d000      	beq.n	8001e00 <__aeabi_dmul+0xa8>
 8001dfe:	e156      	b.n	80020ae <__aeabi_dmul+0x356>
 8001e00:	49bb      	ldr	r1, [pc, #748]	; (80020f0 <__aeabi_dmul+0x398>)
 8001e02:	2600      	movs	r6, #0
 8001e04:	468c      	mov	ip, r1
 8001e06:	4463      	add	r3, ip
 8001e08:	4649      	mov	r1, r9
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	4319      	orrs	r1, r3
 8001e10:	4689      	mov	r9, r1
 8001e12:	2002      	movs	r0, #2
 8001e14:	e7e1      	b.n	8001dda <__aeabi_dmul+0x82>
 8001e16:	4643      	mov	r3, r8
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	0034      	movs	r4, r6
 8001e1c:	0015      	movs	r5, r2
 8001e1e:	4683      	mov	fp, r0
 8001e20:	465b      	mov	r3, fp
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d05e      	beq.n	8001ee4 <__aeabi_dmul+0x18c>
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dmul+0xd4>
 8001e2a:	e1f3      	b.n	8002214 <__aeabi_dmul+0x4bc>
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_dmul+0xda>
 8001e30:	e118      	b.n	8002064 <__aeabi_dmul+0x30c>
 8001e32:	2200      	movs	r2, #0
 8001e34:	2400      	movs	r4, #0
 8001e36:	2500      	movs	r5, #0
 8001e38:	9b01      	ldr	r3, [sp, #4]
 8001e3a:	0512      	lsls	r2, r2, #20
 8001e3c:	4322      	orrs	r2, r4
 8001e3e:	07db      	lsls	r3, r3, #31
 8001e40:	431a      	orrs	r2, r3
 8001e42:	0028      	movs	r0, r5
 8001e44:	0011      	movs	r1, r2
 8001e46:	b007      	add	sp, #28
 8001e48:	bcf0      	pop	{r4, r5, r6, r7}
 8001e4a:	46bb      	mov	fp, r7
 8001e4c:	46b2      	mov	sl, r6
 8001e4e:	46a9      	mov	r9, r5
 8001e50:	46a0      	mov	r8, r4
 8001e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e54:	0025      	movs	r5, r4
 8001e56:	4305      	orrs	r5, r0
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dmul+0x104>
 8001e5a:	e141      	b.n	80020e0 <__aeabi_dmul+0x388>
 8001e5c:	2c00      	cmp	r4, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dmul+0x10a>
 8001e60:	e1ad      	b.n	80021be <__aeabi_dmul+0x466>
 8001e62:	0020      	movs	r0, r4
 8001e64:	f000 fe4a 	bl	8002afc <__clzsi2>
 8001e68:	0001      	movs	r1, r0
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	390b      	subs	r1, #11
 8001e6e:	231d      	movs	r3, #29
 8001e70:	0010      	movs	r0, r2
 8001e72:	1a5b      	subs	r3, r3, r1
 8001e74:	0031      	movs	r1, r6
 8001e76:	0035      	movs	r5, r6
 8001e78:	3808      	subs	r0, #8
 8001e7a:	4084      	lsls	r4, r0
 8001e7c:	40d9      	lsrs	r1, r3
 8001e7e:	4085      	lsls	r5, r0
 8001e80:	430c      	orrs	r4, r1
 8001e82:	489e      	ldr	r0, [pc, #632]	; (80020fc <__aeabi_dmul+0x3a4>)
 8001e84:	1a83      	subs	r3, r0, r2
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	4699      	mov	r9, r3
 8001e8c:	469b      	mov	fp, r3
 8001e8e:	e786      	b.n	8001d9e <__aeabi_dmul+0x46>
 8001e90:	0005      	movs	r5, r0
 8001e92:	4325      	orrs	r5, r4
 8001e94:	d000      	beq.n	8001e98 <__aeabi_dmul+0x140>
 8001e96:	e11c      	b.n	80020d2 <__aeabi_dmul+0x37a>
 8001e98:	2208      	movs	r2, #8
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	4691      	mov	r9, r2
 8001ea2:	469b      	mov	fp, r3
 8001ea4:	e77b      	b.n	8001d9e <__aeabi_dmul+0x46>
 8001ea6:	4652      	mov	r2, sl
 8001ea8:	4332      	orrs	r2, r6
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dmul+0x156>
 8001eac:	e10a      	b.n	80020c4 <__aeabi_dmul+0x36c>
 8001eae:	2e00      	cmp	r6, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dmul+0x15c>
 8001eb2:	e176      	b.n	80021a2 <__aeabi_dmul+0x44a>
 8001eb4:	0030      	movs	r0, r6
 8001eb6:	f000 fe21 	bl	8002afc <__clzsi2>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	3a0b      	subs	r2, #11
 8001ebe:	231d      	movs	r3, #29
 8001ec0:	0001      	movs	r1, r0
 8001ec2:	1a9b      	subs	r3, r3, r2
 8001ec4:	4652      	mov	r2, sl
 8001ec6:	3908      	subs	r1, #8
 8001ec8:	40da      	lsrs	r2, r3
 8001eca:	408e      	lsls	r6, r1
 8001ecc:	4316      	orrs	r6, r2
 8001ece:	4652      	mov	r2, sl
 8001ed0:	408a      	lsls	r2, r1
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	4989      	ldr	r1, [pc, #548]	; (80020fc <__aeabi_dmul+0x3a4>)
 8001ed6:	1a18      	subs	r0, r3, r0
 8001ed8:	0003      	movs	r3, r0
 8001eda:	468c      	mov	ip, r1
 8001edc:	4463      	add	r3, ip
 8001ede:	2000      	movs	r0, #0
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	e77a      	b.n	8001dda <__aeabi_dmul+0x82>
 8001ee4:	2400      	movs	r4, #0
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	4a81      	ldr	r2, [pc, #516]	; (80020f0 <__aeabi_dmul+0x398>)
 8001eea:	e7a5      	b.n	8001e38 <__aeabi_dmul+0xe0>
 8001eec:	0c2f      	lsrs	r7, r5, #16
 8001eee:	042d      	lsls	r5, r5, #16
 8001ef0:	0c2d      	lsrs	r5, r5, #16
 8001ef2:	002b      	movs	r3, r5
 8001ef4:	0c11      	lsrs	r1, r2, #16
 8001ef6:	0412      	lsls	r2, r2, #16
 8001ef8:	0c12      	lsrs	r2, r2, #16
 8001efa:	4353      	muls	r3, r2
 8001efc:	4698      	mov	r8, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	0028      	movs	r0, r5
 8001f02:	437b      	muls	r3, r7
 8001f04:	4699      	mov	r9, r3
 8001f06:	4348      	muls	r0, r1
 8001f08:	4448      	add	r0, r9
 8001f0a:	4683      	mov	fp, r0
 8001f0c:	4640      	mov	r0, r8
 8001f0e:	000b      	movs	r3, r1
 8001f10:	0c00      	lsrs	r0, r0, #16
 8001f12:	4682      	mov	sl, r0
 8001f14:	4658      	mov	r0, fp
 8001f16:	437b      	muls	r3, r7
 8001f18:	4450      	add	r0, sl
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	4581      	cmp	r9, r0
 8001f1e:	d906      	bls.n	8001f2e <__aeabi_dmul+0x1d6>
 8001f20:	469a      	mov	sl, r3
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	4699      	mov	r9, r3
 8001f28:	44ca      	add	sl, r9
 8001f2a:	4653      	mov	r3, sl
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	0c03      	lsrs	r3, r0, #16
 8001f30:	469b      	mov	fp, r3
 8001f32:	4643      	mov	r3, r8
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	0400      	lsls	r0, r0, #16
 8001f38:	0c1b      	lsrs	r3, r3, #16
 8001f3a:	4698      	mov	r8, r3
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	4443      	add	r3, r8
 8001f40:	9304      	str	r3, [sp, #16]
 8001f42:	0c33      	lsrs	r3, r6, #16
 8001f44:	4699      	mov	r9, r3
 8001f46:	002b      	movs	r3, r5
 8001f48:	0436      	lsls	r6, r6, #16
 8001f4a:	0c36      	lsrs	r6, r6, #16
 8001f4c:	4373      	muls	r3, r6
 8001f4e:	4698      	mov	r8, r3
 8001f50:	0033      	movs	r3, r6
 8001f52:	437b      	muls	r3, r7
 8001f54:	469a      	mov	sl, r3
 8001f56:	464b      	mov	r3, r9
 8001f58:	435d      	muls	r5, r3
 8001f5a:	435f      	muls	r7, r3
 8001f5c:	4643      	mov	r3, r8
 8001f5e:	4455      	add	r5, sl
 8001f60:	0c18      	lsrs	r0, r3, #16
 8001f62:	1940      	adds	r0, r0, r5
 8001f64:	4582      	cmp	sl, r0
 8001f66:	d903      	bls.n	8001f70 <__aeabi_dmul+0x218>
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	025b      	lsls	r3, r3, #9
 8001f6c:	469a      	mov	sl, r3
 8001f6e:	4457      	add	r7, sl
 8001f70:	0c05      	lsrs	r5, r0, #16
 8001f72:	19eb      	adds	r3, r5, r7
 8001f74:	9305      	str	r3, [sp, #20]
 8001f76:	4643      	mov	r3, r8
 8001f78:	041d      	lsls	r5, r3, #16
 8001f7a:	0c2d      	lsrs	r5, r5, #16
 8001f7c:	0400      	lsls	r0, r0, #16
 8001f7e:	1940      	adds	r0, r0, r5
 8001f80:	0c25      	lsrs	r5, r4, #16
 8001f82:	0424      	lsls	r4, r4, #16
 8001f84:	0c24      	lsrs	r4, r4, #16
 8001f86:	0027      	movs	r7, r4
 8001f88:	4357      	muls	r7, r2
 8001f8a:	436a      	muls	r2, r5
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	002a      	movs	r2, r5
 8001f90:	0c3b      	lsrs	r3, r7, #16
 8001f92:	469a      	mov	sl, r3
 8001f94:	434a      	muls	r2, r1
 8001f96:	4361      	muls	r1, r4
 8001f98:	4441      	add	r1, r8
 8001f9a:	4451      	add	r1, sl
 8001f9c:	4483      	add	fp, r0
 8001f9e:	4588      	cmp	r8, r1
 8001fa0:	d903      	bls.n	8001faa <__aeabi_dmul+0x252>
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	4698      	mov	r8, r3
 8001fa8:	4442      	add	r2, r8
 8001faa:	043f      	lsls	r7, r7, #16
 8001fac:	0c0b      	lsrs	r3, r1, #16
 8001fae:	0c3f      	lsrs	r7, r7, #16
 8001fb0:	0409      	lsls	r1, r1, #16
 8001fb2:	19c9      	adds	r1, r1, r7
 8001fb4:	0027      	movs	r7, r4
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	464b      	mov	r3, r9
 8001fba:	4377      	muls	r7, r6
 8001fbc:	435c      	muls	r4, r3
 8001fbe:	436e      	muls	r6, r5
 8001fc0:	435d      	muls	r5, r3
 8001fc2:	0c3b      	lsrs	r3, r7, #16
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	19a4      	adds	r4, r4, r6
 8001fc8:	444c      	add	r4, r9
 8001fca:	4442      	add	r2, r8
 8001fcc:	9503      	str	r5, [sp, #12]
 8001fce:	42a6      	cmp	r6, r4
 8001fd0:	d904      	bls.n	8001fdc <__aeabi_dmul+0x284>
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	4698      	mov	r8, r3
 8001fd8:	4445      	add	r5, r8
 8001fda:	9503      	str	r5, [sp, #12]
 8001fdc:	9b02      	ldr	r3, [sp, #8]
 8001fde:	043f      	lsls	r7, r7, #16
 8001fe0:	445b      	add	r3, fp
 8001fe2:	001e      	movs	r6, r3
 8001fe4:	4283      	cmp	r3, r0
 8001fe6:	4180      	sbcs	r0, r0
 8001fe8:	0423      	lsls	r3, r4, #16
 8001fea:	4698      	mov	r8, r3
 8001fec:	9b05      	ldr	r3, [sp, #20]
 8001fee:	0c3f      	lsrs	r7, r7, #16
 8001ff0:	4447      	add	r7, r8
 8001ff2:	4698      	mov	r8, r3
 8001ff4:	1876      	adds	r6, r6, r1
 8001ff6:	428e      	cmp	r6, r1
 8001ff8:	4189      	sbcs	r1, r1
 8001ffa:	4447      	add	r7, r8
 8001ffc:	4240      	negs	r0, r0
 8001ffe:	183d      	adds	r5, r7, r0
 8002000:	46a8      	mov	r8, r5
 8002002:	4693      	mov	fp, r2
 8002004:	4249      	negs	r1, r1
 8002006:	468a      	mov	sl, r1
 8002008:	44c3      	add	fp, r8
 800200a:	429f      	cmp	r7, r3
 800200c:	41bf      	sbcs	r7, r7
 800200e:	4580      	cmp	r8, r0
 8002010:	4180      	sbcs	r0, r0
 8002012:	9b03      	ldr	r3, [sp, #12]
 8002014:	44da      	add	sl, fp
 8002016:	4698      	mov	r8, r3
 8002018:	4653      	mov	r3, sl
 800201a:	4240      	negs	r0, r0
 800201c:	427f      	negs	r7, r7
 800201e:	4307      	orrs	r7, r0
 8002020:	0c24      	lsrs	r4, r4, #16
 8002022:	4593      	cmp	fp, r2
 8002024:	4192      	sbcs	r2, r2
 8002026:	458a      	cmp	sl, r1
 8002028:	4189      	sbcs	r1, r1
 800202a:	193f      	adds	r7, r7, r4
 800202c:	0ddc      	lsrs	r4, r3, #23
 800202e:	9b04      	ldr	r3, [sp, #16]
 8002030:	0275      	lsls	r5, r6, #9
 8002032:	431d      	orrs	r5, r3
 8002034:	1e68      	subs	r0, r5, #1
 8002036:	4185      	sbcs	r5, r0
 8002038:	4653      	mov	r3, sl
 800203a:	4252      	negs	r2, r2
 800203c:	4249      	negs	r1, r1
 800203e:	430a      	orrs	r2, r1
 8002040:	18bf      	adds	r7, r7, r2
 8002042:	4447      	add	r7, r8
 8002044:	0df6      	lsrs	r6, r6, #23
 8002046:	027f      	lsls	r7, r7, #9
 8002048:	4335      	orrs	r5, r6
 800204a:	025a      	lsls	r2, r3, #9
 800204c:	433c      	orrs	r4, r7
 800204e:	4315      	orrs	r5, r2
 8002050:	01fb      	lsls	r3, r7, #7
 8002052:	d400      	bmi.n	8002056 <__aeabi_dmul+0x2fe>
 8002054:	e0c1      	b.n	80021da <__aeabi_dmul+0x482>
 8002056:	2101      	movs	r1, #1
 8002058:	086a      	lsrs	r2, r5, #1
 800205a:	400d      	ands	r5, r1
 800205c:	4315      	orrs	r5, r2
 800205e:	07e2      	lsls	r2, r4, #31
 8002060:	4315      	orrs	r5, r2
 8002062:	0864      	lsrs	r4, r4, #1
 8002064:	4926      	ldr	r1, [pc, #152]	; (8002100 <__aeabi_dmul+0x3a8>)
 8002066:	4461      	add	r1, ip
 8002068:	2900      	cmp	r1, #0
 800206a:	dd56      	ble.n	800211a <__aeabi_dmul+0x3c2>
 800206c:	076b      	lsls	r3, r5, #29
 800206e:	d009      	beq.n	8002084 <__aeabi_dmul+0x32c>
 8002070:	220f      	movs	r2, #15
 8002072:	402a      	ands	r2, r5
 8002074:	2a04      	cmp	r2, #4
 8002076:	d005      	beq.n	8002084 <__aeabi_dmul+0x32c>
 8002078:	1d2a      	adds	r2, r5, #4
 800207a:	42aa      	cmp	r2, r5
 800207c:	41ad      	sbcs	r5, r5
 800207e:	426d      	negs	r5, r5
 8002080:	1964      	adds	r4, r4, r5
 8002082:	0015      	movs	r5, r2
 8002084:	01e3      	lsls	r3, r4, #7
 8002086:	d504      	bpl.n	8002092 <__aeabi_dmul+0x33a>
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <__aeabi_dmul+0x3ac>)
 800208c:	00c9      	lsls	r1, r1, #3
 800208e:	4014      	ands	r4, r2
 8002090:	4461      	add	r1, ip
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <__aeabi_dmul+0x3b0>)
 8002094:	4291      	cmp	r1, r2
 8002096:	dd00      	ble.n	800209a <__aeabi_dmul+0x342>
 8002098:	e724      	b.n	8001ee4 <__aeabi_dmul+0x18c>
 800209a:	0762      	lsls	r2, r4, #29
 800209c:	08ed      	lsrs	r5, r5, #3
 800209e:	0264      	lsls	r4, r4, #9
 80020a0:	0549      	lsls	r1, r1, #21
 80020a2:	4315      	orrs	r5, r2
 80020a4:	0b24      	lsrs	r4, r4, #12
 80020a6:	0d4a      	lsrs	r2, r1, #21
 80020a8:	e6c6      	b.n	8001e38 <__aeabi_dmul+0xe0>
 80020aa:	9701      	str	r7, [sp, #4]
 80020ac:	e6b8      	b.n	8001e20 <__aeabi_dmul+0xc8>
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <__aeabi_dmul+0x398>)
 80020b0:	2003      	movs	r0, #3
 80020b2:	4694      	mov	ip, r2
 80020b4:	4463      	add	r3, ip
 80020b6:	464a      	mov	r2, r9
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2303      	movs	r3, #3
 80020bc:	431a      	orrs	r2, r3
 80020be:	4691      	mov	r9, r2
 80020c0:	4652      	mov	r2, sl
 80020c2:	e68a      	b.n	8001dda <__aeabi_dmul+0x82>
 80020c4:	4649      	mov	r1, r9
 80020c6:	2301      	movs	r3, #1
 80020c8:	4319      	orrs	r1, r3
 80020ca:	4689      	mov	r9, r1
 80020cc:	2600      	movs	r6, #0
 80020ce:	2001      	movs	r0, #1
 80020d0:	e683      	b.n	8001dda <__aeabi_dmul+0x82>
 80020d2:	220c      	movs	r2, #12
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2303      	movs	r3, #3
 80020d8:	0005      	movs	r5, r0
 80020da:	4691      	mov	r9, r2
 80020dc:	469b      	mov	fp, r3
 80020de:	e65e      	b.n	8001d9e <__aeabi_dmul+0x46>
 80020e0:	2304      	movs	r3, #4
 80020e2:	4699      	mov	r9, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	2400      	movs	r4, #0
 80020ec:	469b      	mov	fp, r3
 80020ee:	e656      	b.n	8001d9e <__aeabi_dmul+0x46>
 80020f0:	000007ff 	.word	0x000007ff
 80020f4:	fffffc01 	.word	0xfffffc01
 80020f8:	08009e60 	.word	0x08009e60
 80020fc:	fffffc0d 	.word	0xfffffc0d
 8002100:	000003ff 	.word	0x000003ff
 8002104:	feffffff 	.word	0xfeffffff
 8002108:	000007fe 	.word	0x000007fe
 800210c:	2300      	movs	r3, #0
 800210e:	2480      	movs	r4, #128	; 0x80
 8002110:	2500      	movs	r5, #0
 8002112:	4a44      	ldr	r2, [pc, #272]	; (8002224 <__aeabi_dmul+0x4cc>)
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	e68e      	b.n	8001e38 <__aeabi_dmul+0xe0>
 800211a:	2001      	movs	r0, #1
 800211c:	1a40      	subs	r0, r0, r1
 800211e:	2838      	cmp	r0, #56	; 0x38
 8002120:	dd00      	ble.n	8002124 <__aeabi_dmul+0x3cc>
 8002122:	e686      	b.n	8001e32 <__aeabi_dmul+0xda>
 8002124:	281f      	cmp	r0, #31
 8002126:	dd5b      	ble.n	80021e0 <__aeabi_dmul+0x488>
 8002128:	221f      	movs	r2, #31
 800212a:	0023      	movs	r3, r4
 800212c:	4252      	negs	r2, r2
 800212e:	1a51      	subs	r1, r2, r1
 8002130:	40cb      	lsrs	r3, r1
 8002132:	0019      	movs	r1, r3
 8002134:	2820      	cmp	r0, #32
 8002136:	d003      	beq.n	8002140 <__aeabi_dmul+0x3e8>
 8002138:	4a3b      	ldr	r2, [pc, #236]	; (8002228 <__aeabi_dmul+0x4d0>)
 800213a:	4462      	add	r2, ip
 800213c:	4094      	lsls	r4, r2
 800213e:	4325      	orrs	r5, r4
 8002140:	1e6a      	subs	r2, r5, #1
 8002142:	4195      	sbcs	r5, r2
 8002144:	002a      	movs	r2, r5
 8002146:	430a      	orrs	r2, r1
 8002148:	2107      	movs	r1, #7
 800214a:	000d      	movs	r5, r1
 800214c:	2400      	movs	r4, #0
 800214e:	4015      	ands	r5, r2
 8002150:	4211      	tst	r1, r2
 8002152:	d05b      	beq.n	800220c <__aeabi_dmul+0x4b4>
 8002154:	210f      	movs	r1, #15
 8002156:	2400      	movs	r4, #0
 8002158:	4011      	ands	r1, r2
 800215a:	2904      	cmp	r1, #4
 800215c:	d053      	beq.n	8002206 <__aeabi_dmul+0x4ae>
 800215e:	1d11      	adds	r1, r2, #4
 8002160:	4291      	cmp	r1, r2
 8002162:	4192      	sbcs	r2, r2
 8002164:	4252      	negs	r2, r2
 8002166:	18a4      	adds	r4, r4, r2
 8002168:	000a      	movs	r2, r1
 800216a:	0223      	lsls	r3, r4, #8
 800216c:	d54b      	bpl.n	8002206 <__aeabi_dmul+0x4ae>
 800216e:	2201      	movs	r2, #1
 8002170:	2400      	movs	r4, #0
 8002172:	2500      	movs	r5, #0
 8002174:	e660      	b.n	8001e38 <__aeabi_dmul+0xe0>
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	031b      	lsls	r3, r3, #12
 800217a:	421c      	tst	r4, r3
 800217c:	d009      	beq.n	8002192 <__aeabi_dmul+0x43a>
 800217e:	421e      	tst	r6, r3
 8002180:	d107      	bne.n	8002192 <__aeabi_dmul+0x43a>
 8002182:	4333      	orrs	r3, r6
 8002184:	031c      	lsls	r4, r3, #12
 8002186:	4643      	mov	r3, r8
 8002188:	0015      	movs	r5, r2
 800218a:	0b24      	lsrs	r4, r4, #12
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <__aeabi_dmul+0x4cc>)
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	e652      	b.n	8001e38 <__aeabi_dmul+0xe0>
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	0312      	lsls	r2, r2, #12
 8002196:	4314      	orrs	r4, r2
 8002198:	0324      	lsls	r4, r4, #12
 800219a:	4a22      	ldr	r2, [pc, #136]	; (8002224 <__aeabi_dmul+0x4cc>)
 800219c:	0b24      	lsrs	r4, r4, #12
 800219e:	9701      	str	r7, [sp, #4]
 80021a0:	e64a      	b.n	8001e38 <__aeabi_dmul+0xe0>
 80021a2:	f000 fcab 	bl	8002afc <__clzsi2>
 80021a6:	0003      	movs	r3, r0
 80021a8:	001a      	movs	r2, r3
 80021aa:	3215      	adds	r2, #21
 80021ac:	3020      	adds	r0, #32
 80021ae:	2a1c      	cmp	r2, #28
 80021b0:	dc00      	bgt.n	80021b4 <__aeabi_dmul+0x45c>
 80021b2:	e684      	b.n	8001ebe <__aeabi_dmul+0x166>
 80021b4:	4656      	mov	r6, sl
 80021b6:	3b08      	subs	r3, #8
 80021b8:	2200      	movs	r2, #0
 80021ba:	409e      	lsls	r6, r3
 80021bc:	e689      	b.n	8001ed2 <__aeabi_dmul+0x17a>
 80021be:	f000 fc9d 	bl	8002afc <__clzsi2>
 80021c2:	0001      	movs	r1, r0
 80021c4:	0002      	movs	r2, r0
 80021c6:	3115      	adds	r1, #21
 80021c8:	3220      	adds	r2, #32
 80021ca:	291c      	cmp	r1, #28
 80021cc:	dc00      	bgt.n	80021d0 <__aeabi_dmul+0x478>
 80021ce:	e64e      	b.n	8001e6e <__aeabi_dmul+0x116>
 80021d0:	0034      	movs	r4, r6
 80021d2:	3808      	subs	r0, #8
 80021d4:	2500      	movs	r5, #0
 80021d6:	4084      	lsls	r4, r0
 80021d8:	e653      	b.n	8001e82 <__aeabi_dmul+0x12a>
 80021da:	9b00      	ldr	r3, [sp, #0]
 80021dc:	469c      	mov	ip, r3
 80021de:	e741      	b.n	8002064 <__aeabi_dmul+0x30c>
 80021e0:	4912      	ldr	r1, [pc, #72]	; (800222c <__aeabi_dmul+0x4d4>)
 80021e2:	0022      	movs	r2, r4
 80021e4:	4461      	add	r1, ip
 80021e6:	002e      	movs	r6, r5
 80021e8:	408d      	lsls	r5, r1
 80021ea:	408a      	lsls	r2, r1
 80021ec:	40c6      	lsrs	r6, r0
 80021ee:	1e69      	subs	r1, r5, #1
 80021f0:	418d      	sbcs	r5, r1
 80021f2:	4332      	orrs	r2, r6
 80021f4:	432a      	orrs	r2, r5
 80021f6:	40c4      	lsrs	r4, r0
 80021f8:	0753      	lsls	r3, r2, #29
 80021fa:	d0b6      	beq.n	800216a <__aeabi_dmul+0x412>
 80021fc:	210f      	movs	r1, #15
 80021fe:	4011      	ands	r1, r2
 8002200:	2904      	cmp	r1, #4
 8002202:	d1ac      	bne.n	800215e <__aeabi_dmul+0x406>
 8002204:	e7b1      	b.n	800216a <__aeabi_dmul+0x412>
 8002206:	0765      	lsls	r5, r4, #29
 8002208:	0264      	lsls	r4, r4, #9
 800220a:	0b24      	lsrs	r4, r4, #12
 800220c:	08d2      	lsrs	r2, r2, #3
 800220e:	4315      	orrs	r5, r2
 8002210:	2200      	movs	r2, #0
 8002212:	e611      	b.n	8001e38 <__aeabi_dmul+0xe0>
 8002214:	2280      	movs	r2, #128	; 0x80
 8002216:	0312      	lsls	r2, r2, #12
 8002218:	4314      	orrs	r4, r2
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	4a01      	ldr	r2, [pc, #4]	; (8002224 <__aeabi_dmul+0x4cc>)
 800221e:	0b24      	lsrs	r4, r4, #12
 8002220:	e60a      	b.n	8001e38 <__aeabi_dmul+0xe0>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	000007ff 	.word	0x000007ff
 8002228:	0000043e 	.word	0x0000043e
 800222c:	0000041e 	.word	0x0000041e

08002230 <__aeabi_dsub>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	4657      	mov	r7, sl
 8002234:	464e      	mov	r6, r9
 8002236:	4645      	mov	r5, r8
 8002238:	46de      	mov	lr, fp
 800223a:	0004      	movs	r4, r0
 800223c:	b5e0      	push	{r5, r6, r7, lr}
 800223e:	001f      	movs	r7, r3
 8002240:	0010      	movs	r0, r2
 8002242:	030b      	lsls	r3, r1, #12
 8002244:	0f62      	lsrs	r2, r4, #29
 8002246:	004e      	lsls	r6, r1, #1
 8002248:	0fcd      	lsrs	r5, r1, #31
 800224a:	0a5b      	lsrs	r3, r3, #9
 800224c:	0339      	lsls	r1, r7, #12
 800224e:	4313      	orrs	r3, r2
 8002250:	0a49      	lsrs	r1, r1, #9
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	0f44      	lsrs	r4, r0, #29
 8002256:	4321      	orrs	r1, r4
 8002258:	4cc2      	ldr	r4, [pc, #776]	; (8002564 <__aeabi_dsub+0x334>)
 800225a:	4691      	mov	r9, r2
 800225c:	4692      	mov	sl, r2
 800225e:	00c0      	lsls	r0, r0, #3
 8002260:	007a      	lsls	r2, r7, #1
 8002262:	4680      	mov	r8, r0
 8002264:	0d76      	lsrs	r6, r6, #21
 8002266:	0d52      	lsrs	r2, r2, #21
 8002268:	0fff      	lsrs	r7, r7, #31
 800226a:	42a2      	cmp	r2, r4
 800226c:	d100      	bne.n	8002270 <__aeabi_dsub+0x40>
 800226e:	e0b4      	b.n	80023da <__aeabi_dsub+0x1aa>
 8002270:	2401      	movs	r4, #1
 8002272:	4067      	eors	r7, r4
 8002274:	46bb      	mov	fp, r7
 8002276:	42bd      	cmp	r5, r7
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x4c>
 800227a:	e088      	b.n	800238e <__aeabi_dsub+0x15e>
 800227c:	1ab4      	subs	r4, r6, r2
 800227e:	46a4      	mov	ip, r4
 8002280:	2c00      	cmp	r4, #0
 8002282:	dc00      	bgt.n	8002286 <__aeabi_dsub+0x56>
 8002284:	e0b2      	b.n	80023ec <__aeabi_dsub+0x1bc>
 8002286:	2a00      	cmp	r2, #0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x5c>
 800228a:	e0c5      	b.n	8002418 <__aeabi_dsub+0x1e8>
 800228c:	4ab5      	ldr	r2, [pc, #724]	; (8002564 <__aeabi_dsub+0x334>)
 800228e:	4296      	cmp	r6, r2
 8002290:	d100      	bne.n	8002294 <__aeabi_dsub+0x64>
 8002292:	e28b      	b.n	80027ac <__aeabi_dsub+0x57c>
 8002294:	2280      	movs	r2, #128	; 0x80
 8002296:	0412      	lsls	r2, r2, #16
 8002298:	4311      	orrs	r1, r2
 800229a:	4662      	mov	r2, ip
 800229c:	2a38      	cmp	r2, #56	; 0x38
 800229e:	dd00      	ble.n	80022a2 <__aeabi_dsub+0x72>
 80022a0:	e1a1      	b.n	80025e6 <__aeabi_dsub+0x3b6>
 80022a2:	2a1f      	cmp	r2, #31
 80022a4:	dd00      	ble.n	80022a8 <__aeabi_dsub+0x78>
 80022a6:	e216      	b.n	80026d6 <__aeabi_dsub+0x4a6>
 80022a8:	2720      	movs	r7, #32
 80022aa:	000c      	movs	r4, r1
 80022ac:	1abf      	subs	r7, r7, r2
 80022ae:	40bc      	lsls	r4, r7
 80022b0:	0002      	movs	r2, r0
 80022b2:	46a0      	mov	r8, r4
 80022b4:	4664      	mov	r4, ip
 80022b6:	40b8      	lsls	r0, r7
 80022b8:	40e2      	lsrs	r2, r4
 80022ba:	4644      	mov	r4, r8
 80022bc:	4314      	orrs	r4, r2
 80022be:	0002      	movs	r2, r0
 80022c0:	1e50      	subs	r0, r2, #1
 80022c2:	4182      	sbcs	r2, r0
 80022c4:	4660      	mov	r0, ip
 80022c6:	40c1      	lsrs	r1, r0
 80022c8:	4322      	orrs	r2, r4
 80022ca:	1a5b      	subs	r3, r3, r1
 80022cc:	4649      	mov	r1, r9
 80022ce:	1a8c      	subs	r4, r1, r2
 80022d0:	45a1      	cmp	r9, r4
 80022d2:	4192      	sbcs	r2, r2
 80022d4:	4252      	negs	r2, r2
 80022d6:	1a9b      	subs	r3, r3, r2
 80022d8:	4698      	mov	r8, r3
 80022da:	4643      	mov	r3, r8
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	d400      	bmi.n	80022e2 <__aeabi_dsub+0xb2>
 80022e0:	e117      	b.n	8002512 <__aeabi_dsub+0x2e2>
 80022e2:	4643      	mov	r3, r8
 80022e4:	025b      	lsls	r3, r3, #9
 80022e6:	0a5b      	lsrs	r3, r3, #9
 80022e8:	4698      	mov	r8, r3
 80022ea:	4643      	mov	r3, r8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d100      	bne.n	80022f2 <__aeabi_dsub+0xc2>
 80022f0:	e16c      	b.n	80025cc <__aeabi_dsub+0x39c>
 80022f2:	4640      	mov	r0, r8
 80022f4:	f000 fc02 	bl	8002afc <__clzsi2>
 80022f8:	0002      	movs	r2, r0
 80022fa:	3a08      	subs	r2, #8
 80022fc:	2120      	movs	r1, #32
 80022fe:	0020      	movs	r0, r4
 8002300:	4643      	mov	r3, r8
 8002302:	1a89      	subs	r1, r1, r2
 8002304:	4093      	lsls	r3, r2
 8002306:	40c8      	lsrs	r0, r1
 8002308:	4094      	lsls	r4, r2
 800230a:	4303      	orrs	r3, r0
 800230c:	4296      	cmp	r6, r2
 800230e:	dd00      	ble.n	8002312 <__aeabi_dsub+0xe2>
 8002310:	e157      	b.n	80025c2 <__aeabi_dsub+0x392>
 8002312:	1b96      	subs	r6, r2, r6
 8002314:	1c71      	adds	r1, r6, #1
 8002316:	291f      	cmp	r1, #31
 8002318:	dd00      	ble.n	800231c <__aeabi_dsub+0xec>
 800231a:	e1cb      	b.n	80026b4 <__aeabi_dsub+0x484>
 800231c:	2220      	movs	r2, #32
 800231e:	0018      	movs	r0, r3
 8002320:	0026      	movs	r6, r4
 8002322:	1a52      	subs	r2, r2, r1
 8002324:	4094      	lsls	r4, r2
 8002326:	4090      	lsls	r0, r2
 8002328:	40ce      	lsrs	r6, r1
 800232a:	40cb      	lsrs	r3, r1
 800232c:	1e62      	subs	r2, r4, #1
 800232e:	4194      	sbcs	r4, r2
 8002330:	4330      	orrs	r0, r6
 8002332:	4698      	mov	r8, r3
 8002334:	2600      	movs	r6, #0
 8002336:	4304      	orrs	r4, r0
 8002338:	0763      	lsls	r3, r4, #29
 800233a:	d009      	beq.n	8002350 <__aeabi_dsub+0x120>
 800233c:	230f      	movs	r3, #15
 800233e:	4023      	ands	r3, r4
 8002340:	2b04      	cmp	r3, #4
 8002342:	d005      	beq.n	8002350 <__aeabi_dsub+0x120>
 8002344:	1d23      	adds	r3, r4, #4
 8002346:	42a3      	cmp	r3, r4
 8002348:	41a4      	sbcs	r4, r4
 800234a:	4264      	negs	r4, r4
 800234c:	44a0      	add	r8, r4
 800234e:	001c      	movs	r4, r3
 8002350:	4643      	mov	r3, r8
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	d400      	bmi.n	8002358 <__aeabi_dsub+0x128>
 8002356:	e0df      	b.n	8002518 <__aeabi_dsub+0x2e8>
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <__aeabi_dsub+0x334>)
 800235a:	3601      	adds	r6, #1
 800235c:	429e      	cmp	r6, r3
 800235e:	d100      	bne.n	8002362 <__aeabi_dsub+0x132>
 8002360:	e0fb      	b.n	800255a <__aeabi_dsub+0x32a>
 8002362:	4642      	mov	r2, r8
 8002364:	4b80      	ldr	r3, [pc, #512]	; (8002568 <__aeabi_dsub+0x338>)
 8002366:	08e4      	lsrs	r4, r4, #3
 8002368:	401a      	ands	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	0571      	lsls	r1, r6, #21
 800236e:	0752      	lsls	r2, r2, #29
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	4322      	orrs	r2, r4
 8002374:	0b1b      	lsrs	r3, r3, #12
 8002376:	0d49      	lsrs	r1, r1, #21
 8002378:	0509      	lsls	r1, r1, #20
 800237a:	07ed      	lsls	r5, r5, #31
 800237c:	4319      	orrs	r1, r3
 800237e:	4329      	orrs	r1, r5
 8002380:	0010      	movs	r0, r2
 8002382:	bcf0      	pop	{r4, r5, r6, r7}
 8002384:	46bb      	mov	fp, r7
 8002386:	46b2      	mov	sl, r6
 8002388:	46a9      	mov	r9, r5
 800238a:	46a0      	mov	r8, r4
 800238c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238e:	1ab4      	subs	r4, r6, r2
 8002390:	46a4      	mov	ip, r4
 8002392:	2c00      	cmp	r4, #0
 8002394:	dd58      	ble.n	8002448 <__aeabi_dsub+0x218>
 8002396:	2a00      	cmp	r2, #0
 8002398:	d100      	bne.n	800239c <__aeabi_dsub+0x16c>
 800239a:	e09e      	b.n	80024da <__aeabi_dsub+0x2aa>
 800239c:	4a71      	ldr	r2, [pc, #452]	; (8002564 <__aeabi_dsub+0x334>)
 800239e:	4296      	cmp	r6, r2
 80023a0:	d100      	bne.n	80023a4 <__aeabi_dsub+0x174>
 80023a2:	e13b      	b.n	800261c <__aeabi_dsub+0x3ec>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0412      	lsls	r2, r2, #16
 80023a8:	4311      	orrs	r1, r2
 80023aa:	4662      	mov	r2, ip
 80023ac:	2a38      	cmp	r2, #56	; 0x38
 80023ae:	dd00      	ble.n	80023b2 <__aeabi_dsub+0x182>
 80023b0:	e0c1      	b.n	8002536 <__aeabi_dsub+0x306>
 80023b2:	2a1f      	cmp	r2, #31
 80023b4:	dc00      	bgt.n	80023b8 <__aeabi_dsub+0x188>
 80023b6:	e1bb      	b.n	8002730 <__aeabi_dsub+0x500>
 80023b8:	000c      	movs	r4, r1
 80023ba:	3a20      	subs	r2, #32
 80023bc:	40d4      	lsrs	r4, r2
 80023be:	0022      	movs	r2, r4
 80023c0:	4664      	mov	r4, ip
 80023c2:	2c20      	cmp	r4, #32
 80023c4:	d004      	beq.n	80023d0 <__aeabi_dsub+0x1a0>
 80023c6:	2740      	movs	r7, #64	; 0x40
 80023c8:	1b3f      	subs	r7, r7, r4
 80023ca:	40b9      	lsls	r1, r7
 80023cc:	4308      	orrs	r0, r1
 80023ce:	4680      	mov	r8, r0
 80023d0:	4644      	mov	r4, r8
 80023d2:	1e61      	subs	r1, r4, #1
 80023d4:	418c      	sbcs	r4, r1
 80023d6:	4314      	orrs	r4, r2
 80023d8:	e0b1      	b.n	800253e <__aeabi_dsub+0x30e>
 80023da:	000c      	movs	r4, r1
 80023dc:	4304      	orrs	r4, r0
 80023de:	d02a      	beq.n	8002436 <__aeabi_dsub+0x206>
 80023e0:	46bb      	mov	fp, r7
 80023e2:	42bd      	cmp	r5, r7
 80023e4:	d02d      	beq.n	8002442 <__aeabi_dsub+0x212>
 80023e6:	4c61      	ldr	r4, [pc, #388]	; (800256c <__aeabi_dsub+0x33c>)
 80023e8:	46a4      	mov	ip, r4
 80023ea:	44b4      	add	ip, r6
 80023ec:	4664      	mov	r4, ip
 80023ee:	2c00      	cmp	r4, #0
 80023f0:	d05c      	beq.n	80024ac <__aeabi_dsub+0x27c>
 80023f2:	1b94      	subs	r4, r2, r6
 80023f4:	46a4      	mov	ip, r4
 80023f6:	2e00      	cmp	r6, #0
 80023f8:	d000      	beq.n	80023fc <__aeabi_dsub+0x1cc>
 80023fa:	e115      	b.n	8002628 <__aeabi_dsub+0x3f8>
 80023fc:	464d      	mov	r5, r9
 80023fe:	431d      	orrs	r5, r3
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x1d4>
 8002402:	e1c3      	b.n	800278c <__aeabi_dsub+0x55c>
 8002404:	1e65      	subs	r5, r4, #1
 8002406:	2c01      	cmp	r4, #1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x1dc>
 800240a:	e20c      	b.n	8002826 <__aeabi_dsub+0x5f6>
 800240c:	4e55      	ldr	r6, [pc, #340]	; (8002564 <__aeabi_dsub+0x334>)
 800240e:	42b4      	cmp	r4, r6
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x1e4>
 8002412:	e1f8      	b.n	8002806 <__aeabi_dsub+0x5d6>
 8002414:	46ac      	mov	ip, r5
 8002416:	e10e      	b.n	8002636 <__aeabi_dsub+0x406>
 8002418:	000a      	movs	r2, r1
 800241a:	4302      	orrs	r2, r0
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x1f0>
 800241e:	e136      	b.n	800268e <__aeabi_dsub+0x45e>
 8002420:	0022      	movs	r2, r4
 8002422:	3a01      	subs	r2, #1
 8002424:	2c01      	cmp	r4, #1
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x1fa>
 8002428:	e1c6      	b.n	80027b8 <__aeabi_dsub+0x588>
 800242a:	4c4e      	ldr	r4, [pc, #312]	; (8002564 <__aeabi_dsub+0x334>)
 800242c:	45a4      	cmp	ip, r4
 800242e:	d100      	bne.n	8002432 <__aeabi_dsub+0x202>
 8002430:	e0f4      	b.n	800261c <__aeabi_dsub+0x3ec>
 8002432:	4694      	mov	ip, r2
 8002434:	e731      	b.n	800229a <__aeabi_dsub+0x6a>
 8002436:	2401      	movs	r4, #1
 8002438:	4067      	eors	r7, r4
 800243a:	46bb      	mov	fp, r7
 800243c:	42bd      	cmp	r5, r7
 800243e:	d000      	beq.n	8002442 <__aeabi_dsub+0x212>
 8002440:	e71c      	b.n	800227c <__aeabi_dsub+0x4c>
 8002442:	4c4a      	ldr	r4, [pc, #296]	; (800256c <__aeabi_dsub+0x33c>)
 8002444:	46a4      	mov	ip, r4
 8002446:	44b4      	add	ip, r6
 8002448:	4664      	mov	r4, ip
 800244a:	2c00      	cmp	r4, #0
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x220>
 800244e:	e0cf      	b.n	80025f0 <__aeabi_dsub+0x3c0>
 8002450:	1b94      	subs	r4, r2, r6
 8002452:	46a4      	mov	ip, r4
 8002454:	2e00      	cmp	r6, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dsub+0x22a>
 8002458:	e15c      	b.n	8002714 <__aeabi_dsub+0x4e4>
 800245a:	4e42      	ldr	r6, [pc, #264]	; (8002564 <__aeabi_dsub+0x334>)
 800245c:	42b2      	cmp	r2, r6
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x232>
 8002460:	e1ec      	b.n	800283c <__aeabi_dsub+0x60c>
 8002462:	2680      	movs	r6, #128	; 0x80
 8002464:	0436      	lsls	r6, r6, #16
 8002466:	4333      	orrs	r3, r6
 8002468:	4664      	mov	r4, ip
 800246a:	2c38      	cmp	r4, #56	; 0x38
 800246c:	dd00      	ble.n	8002470 <__aeabi_dsub+0x240>
 800246e:	e1b3      	b.n	80027d8 <__aeabi_dsub+0x5a8>
 8002470:	2c1f      	cmp	r4, #31
 8002472:	dd00      	ble.n	8002476 <__aeabi_dsub+0x246>
 8002474:	e238      	b.n	80028e8 <__aeabi_dsub+0x6b8>
 8002476:	2620      	movs	r6, #32
 8002478:	1b36      	subs	r6, r6, r4
 800247a:	001c      	movs	r4, r3
 800247c:	40b4      	lsls	r4, r6
 800247e:	464f      	mov	r7, r9
 8002480:	46a0      	mov	r8, r4
 8002482:	4664      	mov	r4, ip
 8002484:	40e7      	lsrs	r7, r4
 8002486:	4644      	mov	r4, r8
 8002488:	433c      	orrs	r4, r7
 800248a:	464f      	mov	r7, r9
 800248c:	40b7      	lsls	r7, r6
 800248e:	003e      	movs	r6, r7
 8002490:	1e77      	subs	r7, r6, #1
 8002492:	41be      	sbcs	r6, r7
 8002494:	4334      	orrs	r4, r6
 8002496:	4666      	mov	r6, ip
 8002498:	40f3      	lsrs	r3, r6
 800249a:	18c9      	adds	r1, r1, r3
 800249c:	1824      	adds	r4, r4, r0
 800249e:	4284      	cmp	r4, r0
 80024a0:	419b      	sbcs	r3, r3
 80024a2:	425b      	negs	r3, r3
 80024a4:	4698      	mov	r8, r3
 80024a6:	0016      	movs	r6, r2
 80024a8:	4488      	add	r8, r1
 80024aa:	e04e      	b.n	800254a <__aeabi_dsub+0x31a>
 80024ac:	4a30      	ldr	r2, [pc, #192]	; (8002570 <__aeabi_dsub+0x340>)
 80024ae:	1c74      	adds	r4, r6, #1
 80024b0:	4214      	tst	r4, r2
 80024b2:	d000      	beq.n	80024b6 <__aeabi_dsub+0x286>
 80024b4:	e0d6      	b.n	8002664 <__aeabi_dsub+0x434>
 80024b6:	464a      	mov	r2, r9
 80024b8:	431a      	orrs	r2, r3
 80024ba:	2e00      	cmp	r6, #0
 80024bc:	d000      	beq.n	80024c0 <__aeabi_dsub+0x290>
 80024be:	e15b      	b.n	8002778 <__aeabi_dsub+0x548>
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d100      	bne.n	80024c6 <__aeabi_dsub+0x296>
 80024c4:	e1a5      	b.n	8002812 <__aeabi_dsub+0x5e2>
 80024c6:	000a      	movs	r2, r1
 80024c8:	4302      	orrs	r2, r0
 80024ca:	d000      	beq.n	80024ce <__aeabi_dsub+0x29e>
 80024cc:	e1bb      	b.n	8002846 <__aeabi_dsub+0x616>
 80024ce:	464a      	mov	r2, r9
 80024d0:	0759      	lsls	r1, r3, #29
 80024d2:	08d2      	lsrs	r2, r2, #3
 80024d4:	430a      	orrs	r2, r1
 80024d6:	08db      	lsrs	r3, r3, #3
 80024d8:	e027      	b.n	800252a <__aeabi_dsub+0x2fa>
 80024da:	000a      	movs	r2, r1
 80024dc:	4302      	orrs	r2, r0
 80024de:	d100      	bne.n	80024e2 <__aeabi_dsub+0x2b2>
 80024e0:	e174      	b.n	80027cc <__aeabi_dsub+0x59c>
 80024e2:	0022      	movs	r2, r4
 80024e4:	3a01      	subs	r2, #1
 80024e6:	2c01      	cmp	r4, #1
 80024e8:	d005      	beq.n	80024f6 <__aeabi_dsub+0x2c6>
 80024ea:	4c1e      	ldr	r4, [pc, #120]	; (8002564 <__aeabi_dsub+0x334>)
 80024ec:	45a4      	cmp	ip, r4
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x2c2>
 80024f0:	e094      	b.n	800261c <__aeabi_dsub+0x3ec>
 80024f2:	4694      	mov	ip, r2
 80024f4:	e759      	b.n	80023aa <__aeabi_dsub+0x17a>
 80024f6:	4448      	add	r0, r9
 80024f8:	4548      	cmp	r0, r9
 80024fa:	4192      	sbcs	r2, r2
 80024fc:	185b      	adds	r3, r3, r1
 80024fe:	4698      	mov	r8, r3
 8002500:	0004      	movs	r4, r0
 8002502:	4252      	negs	r2, r2
 8002504:	4490      	add	r8, r2
 8002506:	4643      	mov	r3, r8
 8002508:	2602      	movs	r6, #2
 800250a:	021b      	lsls	r3, r3, #8
 800250c:	d500      	bpl.n	8002510 <__aeabi_dsub+0x2e0>
 800250e:	e0c4      	b.n	800269a <__aeabi_dsub+0x46a>
 8002510:	3e01      	subs	r6, #1
 8002512:	0763      	lsls	r3, r4, #29
 8002514:	d000      	beq.n	8002518 <__aeabi_dsub+0x2e8>
 8002516:	e711      	b.n	800233c <__aeabi_dsub+0x10c>
 8002518:	4643      	mov	r3, r8
 800251a:	46b4      	mov	ip, r6
 800251c:	0759      	lsls	r1, r3, #29
 800251e:	08e2      	lsrs	r2, r4, #3
 8002520:	430a      	orrs	r2, r1
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	490f      	ldr	r1, [pc, #60]	; (8002564 <__aeabi_dsub+0x334>)
 8002526:	458c      	cmp	ip, r1
 8002528:	d040      	beq.n	80025ac <__aeabi_dsub+0x37c>
 800252a:	4661      	mov	r1, ip
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	0549      	lsls	r1, r1, #21
 8002530:	0b1b      	lsrs	r3, r3, #12
 8002532:	0d49      	lsrs	r1, r1, #21
 8002534:	e720      	b.n	8002378 <__aeabi_dsub+0x148>
 8002536:	4301      	orrs	r1, r0
 8002538:	000c      	movs	r4, r1
 800253a:	1e61      	subs	r1, r4, #1
 800253c:	418c      	sbcs	r4, r1
 800253e:	444c      	add	r4, r9
 8002540:	454c      	cmp	r4, r9
 8002542:	4192      	sbcs	r2, r2
 8002544:	4252      	negs	r2, r2
 8002546:	4690      	mov	r8, r2
 8002548:	4498      	add	r8, r3
 800254a:	4643      	mov	r3, r8
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	d5e0      	bpl.n	8002512 <__aeabi_dsub+0x2e2>
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__aeabi_dsub+0x334>)
 8002552:	3601      	adds	r6, #1
 8002554:	429e      	cmp	r6, r3
 8002556:	d000      	beq.n	800255a <__aeabi_dsub+0x32a>
 8002558:	e09f      	b.n	800269a <__aeabi_dsub+0x46a>
 800255a:	0031      	movs	r1, r6
 800255c:	2300      	movs	r3, #0
 800255e:	2200      	movs	r2, #0
 8002560:	e70a      	b.n	8002378 <__aeabi_dsub+0x148>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	000007ff 	.word	0x000007ff
 8002568:	ff7fffff 	.word	0xff7fffff
 800256c:	fffff801 	.word	0xfffff801
 8002570:	000007fe 	.word	0x000007fe
 8002574:	2a00      	cmp	r2, #0
 8002576:	d100      	bne.n	800257a <__aeabi_dsub+0x34a>
 8002578:	e160      	b.n	800283c <__aeabi_dsub+0x60c>
 800257a:	000a      	movs	r2, r1
 800257c:	4302      	orrs	r2, r0
 800257e:	d04d      	beq.n	800261c <__aeabi_dsub+0x3ec>
 8002580:	464a      	mov	r2, r9
 8002582:	075c      	lsls	r4, r3, #29
 8002584:	08d2      	lsrs	r2, r2, #3
 8002586:	4322      	orrs	r2, r4
 8002588:	2480      	movs	r4, #128	; 0x80
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	0324      	lsls	r4, r4, #12
 800258e:	4223      	tst	r3, r4
 8002590:	d007      	beq.n	80025a2 <__aeabi_dsub+0x372>
 8002592:	08ce      	lsrs	r6, r1, #3
 8002594:	4226      	tst	r6, r4
 8002596:	d104      	bne.n	80025a2 <__aeabi_dsub+0x372>
 8002598:	465d      	mov	r5, fp
 800259a:	0033      	movs	r3, r6
 800259c:	08c2      	lsrs	r2, r0, #3
 800259e:	0749      	lsls	r1, r1, #29
 80025a0:	430a      	orrs	r2, r1
 80025a2:	0f51      	lsrs	r1, r2, #29
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	08d2      	lsrs	r2, r2, #3
 80025a8:	0749      	lsls	r1, r1, #29
 80025aa:	430a      	orrs	r2, r1
 80025ac:	0011      	movs	r1, r2
 80025ae:	4319      	orrs	r1, r3
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x384>
 80025b2:	e1c8      	b.n	8002946 <__aeabi_dsub+0x716>
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0309      	lsls	r1, r1, #12
 80025b8:	430b      	orrs	r3, r1
 80025ba:	031b      	lsls	r3, r3, #12
 80025bc:	49d5      	ldr	r1, [pc, #852]	; (8002914 <__aeabi_dsub+0x6e4>)
 80025be:	0b1b      	lsrs	r3, r3, #12
 80025c0:	e6da      	b.n	8002378 <__aeabi_dsub+0x148>
 80025c2:	49d5      	ldr	r1, [pc, #852]	; (8002918 <__aeabi_dsub+0x6e8>)
 80025c4:	1ab6      	subs	r6, r6, r2
 80025c6:	400b      	ands	r3, r1
 80025c8:	4698      	mov	r8, r3
 80025ca:	e6b5      	b.n	8002338 <__aeabi_dsub+0x108>
 80025cc:	0020      	movs	r0, r4
 80025ce:	f000 fa95 	bl	8002afc <__clzsi2>
 80025d2:	0002      	movs	r2, r0
 80025d4:	3218      	adds	r2, #24
 80025d6:	2a1f      	cmp	r2, #31
 80025d8:	dc00      	bgt.n	80025dc <__aeabi_dsub+0x3ac>
 80025da:	e68f      	b.n	80022fc <__aeabi_dsub+0xcc>
 80025dc:	0023      	movs	r3, r4
 80025de:	3808      	subs	r0, #8
 80025e0:	4083      	lsls	r3, r0
 80025e2:	2400      	movs	r4, #0
 80025e4:	e692      	b.n	800230c <__aeabi_dsub+0xdc>
 80025e6:	4308      	orrs	r0, r1
 80025e8:	0002      	movs	r2, r0
 80025ea:	1e50      	subs	r0, r2, #1
 80025ec:	4182      	sbcs	r2, r0
 80025ee:	e66d      	b.n	80022cc <__aeabi_dsub+0x9c>
 80025f0:	4cca      	ldr	r4, [pc, #808]	; (800291c <__aeabi_dsub+0x6ec>)
 80025f2:	1c72      	adds	r2, r6, #1
 80025f4:	4222      	tst	r2, r4
 80025f6:	d000      	beq.n	80025fa <__aeabi_dsub+0x3ca>
 80025f8:	e0ad      	b.n	8002756 <__aeabi_dsub+0x526>
 80025fa:	464a      	mov	r2, r9
 80025fc:	431a      	orrs	r2, r3
 80025fe:	2e00      	cmp	r6, #0
 8002600:	d1b8      	bne.n	8002574 <__aeabi_dsub+0x344>
 8002602:	2a00      	cmp	r2, #0
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x3d8>
 8002606:	e158      	b.n	80028ba <__aeabi_dsub+0x68a>
 8002608:	000a      	movs	r2, r1
 800260a:	4302      	orrs	r2, r0
 800260c:	d000      	beq.n	8002610 <__aeabi_dsub+0x3e0>
 800260e:	e159      	b.n	80028c4 <__aeabi_dsub+0x694>
 8002610:	464a      	mov	r2, r9
 8002612:	0759      	lsls	r1, r3, #29
 8002614:	08d2      	lsrs	r2, r2, #3
 8002616:	430a      	orrs	r2, r1
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	e786      	b.n	800252a <__aeabi_dsub+0x2fa>
 800261c:	464a      	mov	r2, r9
 800261e:	0759      	lsls	r1, r3, #29
 8002620:	08d2      	lsrs	r2, r2, #3
 8002622:	430a      	orrs	r2, r1
 8002624:	08db      	lsrs	r3, r3, #3
 8002626:	e7c1      	b.n	80025ac <__aeabi_dsub+0x37c>
 8002628:	4dba      	ldr	r5, [pc, #744]	; (8002914 <__aeabi_dsub+0x6e4>)
 800262a:	42aa      	cmp	r2, r5
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x400>
 800262e:	e11e      	b.n	800286e <__aeabi_dsub+0x63e>
 8002630:	2580      	movs	r5, #128	; 0x80
 8002632:	042d      	lsls	r5, r5, #16
 8002634:	432b      	orrs	r3, r5
 8002636:	4664      	mov	r4, ip
 8002638:	2c38      	cmp	r4, #56	; 0x38
 800263a:	dc5d      	bgt.n	80026f8 <__aeabi_dsub+0x4c8>
 800263c:	2c1f      	cmp	r4, #31
 800263e:	dd00      	ble.n	8002642 <__aeabi_dsub+0x412>
 8002640:	e0d0      	b.n	80027e4 <__aeabi_dsub+0x5b4>
 8002642:	2520      	movs	r5, #32
 8002644:	4667      	mov	r7, ip
 8002646:	1b2d      	subs	r5, r5, r4
 8002648:	464e      	mov	r6, r9
 800264a:	001c      	movs	r4, r3
 800264c:	40fe      	lsrs	r6, r7
 800264e:	40ac      	lsls	r4, r5
 8002650:	4334      	orrs	r4, r6
 8002652:	464e      	mov	r6, r9
 8002654:	40ae      	lsls	r6, r5
 8002656:	0035      	movs	r5, r6
 8002658:	40fb      	lsrs	r3, r7
 800265a:	1e6e      	subs	r6, r5, #1
 800265c:	41b5      	sbcs	r5, r6
 800265e:	1ac9      	subs	r1, r1, r3
 8002660:	432c      	orrs	r4, r5
 8002662:	e04e      	b.n	8002702 <__aeabi_dsub+0x4d2>
 8002664:	464a      	mov	r2, r9
 8002666:	1a14      	subs	r4, r2, r0
 8002668:	45a1      	cmp	r9, r4
 800266a:	4192      	sbcs	r2, r2
 800266c:	4252      	negs	r2, r2
 800266e:	4690      	mov	r8, r2
 8002670:	1a5f      	subs	r7, r3, r1
 8002672:	003a      	movs	r2, r7
 8002674:	4647      	mov	r7, r8
 8002676:	1bd2      	subs	r2, r2, r7
 8002678:	4690      	mov	r8, r2
 800267a:	0212      	lsls	r2, r2, #8
 800267c:	d500      	bpl.n	8002680 <__aeabi_dsub+0x450>
 800267e:	e08b      	b.n	8002798 <__aeabi_dsub+0x568>
 8002680:	4642      	mov	r2, r8
 8002682:	4322      	orrs	r2, r4
 8002684:	d000      	beq.n	8002688 <__aeabi_dsub+0x458>
 8002686:	e630      	b.n	80022ea <__aeabi_dsub+0xba>
 8002688:	2300      	movs	r3, #0
 800268a:	2500      	movs	r5, #0
 800268c:	e74d      	b.n	800252a <__aeabi_dsub+0x2fa>
 800268e:	464a      	mov	r2, r9
 8002690:	0759      	lsls	r1, r3, #29
 8002692:	08d2      	lsrs	r2, r2, #3
 8002694:	430a      	orrs	r2, r1
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	e744      	b.n	8002524 <__aeabi_dsub+0x2f4>
 800269a:	4642      	mov	r2, r8
 800269c:	4b9e      	ldr	r3, [pc, #632]	; (8002918 <__aeabi_dsub+0x6e8>)
 800269e:	0861      	lsrs	r1, r4, #1
 80026a0:	401a      	ands	r2, r3
 80026a2:	0013      	movs	r3, r2
 80026a4:	2201      	movs	r2, #1
 80026a6:	4014      	ands	r4, r2
 80026a8:	430c      	orrs	r4, r1
 80026aa:	07da      	lsls	r2, r3, #31
 80026ac:	085b      	lsrs	r3, r3, #1
 80026ae:	4698      	mov	r8, r3
 80026b0:	4314      	orrs	r4, r2
 80026b2:	e641      	b.n	8002338 <__aeabi_dsub+0x108>
 80026b4:	001a      	movs	r2, r3
 80026b6:	3e1f      	subs	r6, #31
 80026b8:	40f2      	lsrs	r2, r6
 80026ba:	0016      	movs	r6, r2
 80026bc:	2920      	cmp	r1, #32
 80026be:	d003      	beq.n	80026c8 <__aeabi_dsub+0x498>
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	1a51      	subs	r1, r2, r1
 80026c4:	408b      	lsls	r3, r1
 80026c6:	431c      	orrs	r4, r3
 80026c8:	1e62      	subs	r2, r4, #1
 80026ca:	4194      	sbcs	r4, r2
 80026cc:	2300      	movs	r3, #0
 80026ce:	4334      	orrs	r4, r6
 80026d0:	4698      	mov	r8, r3
 80026d2:	2600      	movs	r6, #0
 80026d4:	e71d      	b.n	8002512 <__aeabi_dsub+0x2e2>
 80026d6:	000c      	movs	r4, r1
 80026d8:	3a20      	subs	r2, #32
 80026da:	40d4      	lsrs	r4, r2
 80026dc:	0022      	movs	r2, r4
 80026de:	4664      	mov	r4, ip
 80026e0:	2c20      	cmp	r4, #32
 80026e2:	d004      	beq.n	80026ee <__aeabi_dsub+0x4be>
 80026e4:	2740      	movs	r7, #64	; 0x40
 80026e6:	1b3f      	subs	r7, r7, r4
 80026e8:	40b9      	lsls	r1, r7
 80026ea:	4308      	orrs	r0, r1
 80026ec:	4680      	mov	r8, r0
 80026ee:	4644      	mov	r4, r8
 80026f0:	1e61      	subs	r1, r4, #1
 80026f2:	418c      	sbcs	r4, r1
 80026f4:	4322      	orrs	r2, r4
 80026f6:	e5e9      	b.n	80022cc <__aeabi_dsub+0x9c>
 80026f8:	464c      	mov	r4, r9
 80026fa:	4323      	orrs	r3, r4
 80026fc:	001c      	movs	r4, r3
 80026fe:	1e63      	subs	r3, r4, #1
 8002700:	419c      	sbcs	r4, r3
 8002702:	1b04      	subs	r4, r0, r4
 8002704:	42a0      	cmp	r0, r4
 8002706:	419b      	sbcs	r3, r3
 8002708:	425b      	negs	r3, r3
 800270a:	1acb      	subs	r3, r1, r3
 800270c:	4698      	mov	r8, r3
 800270e:	465d      	mov	r5, fp
 8002710:	0016      	movs	r6, r2
 8002712:	e5e2      	b.n	80022da <__aeabi_dsub+0xaa>
 8002714:	464e      	mov	r6, r9
 8002716:	431e      	orrs	r6, r3
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x4ec>
 800271a:	e0ae      	b.n	800287a <__aeabi_dsub+0x64a>
 800271c:	1e66      	subs	r6, r4, #1
 800271e:	2c01      	cmp	r4, #1
 8002720:	d100      	bne.n	8002724 <__aeabi_dsub+0x4f4>
 8002722:	e0fd      	b.n	8002920 <__aeabi_dsub+0x6f0>
 8002724:	4f7b      	ldr	r7, [pc, #492]	; (8002914 <__aeabi_dsub+0x6e4>)
 8002726:	42bc      	cmp	r4, r7
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x4fc>
 800272a:	e107      	b.n	800293c <__aeabi_dsub+0x70c>
 800272c:	46b4      	mov	ip, r6
 800272e:	e69b      	b.n	8002468 <__aeabi_dsub+0x238>
 8002730:	4664      	mov	r4, ip
 8002732:	2220      	movs	r2, #32
 8002734:	1b12      	subs	r2, r2, r4
 8002736:	000c      	movs	r4, r1
 8002738:	4094      	lsls	r4, r2
 800273a:	0007      	movs	r7, r0
 800273c:	4090      	lsls	r0, r2
 800273e:	46a0      	mov	r8, r4
 8002740:	4664      	mov	r4, ip
 8002742:	1e42      	subs	r2, r0, #1
 8002744:	4190      	sbcs	r0, r2
 8002746:	4662      	mov	r2, ip
 8002748:	40e7      	lsrs	r7, r4
 800274a:	4644      	mov	r4, r8
 800274c:	40d1      	lsrs	r1, r2
 800274e:	433c      	orrs	r4, r7
 8002750:	4304      	orrs	r4, r0
 8002752:	185b      	adds	r3, r3, r1
 8002754:	e6f3      	b.n	800253e <__aeabi_dsub+0x30e>
 8002756:	4c6f      	ldr	r4, [pc, #444]	; (8002914 <__aeabi_dsub+0x6e4>)
 8002758:	42a2      	cmp	r2, r4
 800275a:	d100      	bne.n	800275e <__aeabi_dsub+0x52e>
 800275c:	e0d5      	b.n	800290a <__aeabi_dsub+0x6da>
 800275e:	4448      	add	r0, r9
 8002760:	185b      	adds	r3, r3, r1
 8002762:	4548      	cmp	r0, r9
 8002764:	4189      	sbcs	r1, r1
 8002766:	4249      	negs	r1, r1
 8002768:	185b      	adds	r3, r3, r1
 800276a:	07dc      	lsls	r4, r3, #31
 800276c:	0840      	lsrs	r0, r0, #1
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	4698      	mov	r8, r3
 8002772:	0016      	movs	r6, r2
 8002774:	4304      	orrs	r4, r0
 8002776:	e6cc      	b.n	8002512 <__aeabi_dsub+0x2e2>
 8002778:	2a00      	cmp	r2, #0
 800277a:	d000      	beq.n	800277e <__aeabi_dsub+0x54e>
 800277c:	e082      	b.n	8002884 <__aeabi_dsub+0x654>
 800277e:	000a      	movs	r2, r1
 8002780:	4302      	orrs	r2, r0
 8002782:	d140      	bne.n	8002806 <__aeabi_dsub+0x5d6>
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	2500      	movs	r5, #0
 8002788:	031b      	lsls	r3, r3, #12
 800278a:	e713      	b.n	80025b4 <__aeabi_dsub+0x384>
 800278c:	074b      	lsls	r3, r1, #29
 800278e:	08c2      	lsrs	r2, r0, #3
 8002790:	431a      	orrs	r2, r3
 8002792:	465d      	mov	r5, fp
 8002794:	08cb      	lsrs	r3, r1, #3
 8002796:	e6c5      	b.n	8002524 <__aeabi_dsub+0x2f4>
 8002798:	464a      	mov	r2, r9
 800279a:	1a84      	subs	r4, r0, r2
 800279c:	42a0      	cmp	r0, r4
 800279e:	4192      	sbcs	r2, r2
 80027a0:	1acb      	subs	r3, r1, r3
 80027a2:	4252      	negs	r2, r2
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	4698      	mov	r8, r3
 80027a8:	465d      	mov	r5, fp
 80027aa:	e59e      	b.n	80022ea <__aeabi_dsub+0xba>
 80027ac:	464a      	mov	r2, r9
 80027ae:	0759      	lsls	r1, r3, #29
 80027b0:	08d2      	lsrs	r2, r2, #3
 80027b2:	430a      	orrs	r2, r1
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	e6f9      	b.n	80025ac <__aeabi_dsub+0x37c>
 80027b8:	464a      	mov	r2, r9
 80027ba:	1a14      	subs	r4, r2, r0
 80027bc:	45a1      	cmp	r9, r4
 80027be:	4192      	sbcs	r2, r2
 80027c0:	1a5b      	subs	r3, r3, r1
 80027c2:	4252      	negs	r2, r2
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	4698      	mov	r8, r3
 80027c8:	2601      	movs	r6, #1
 80027ca:	e586      	b.n	80022da <__aeabi_dsub+0xaa>
 80027cc:	464a      	mov	r2, r9
 80027ce:	0759      	lsls	r1, r3, #29
 80027d0:	08d2      	lsrs	r2, r2, #3
 80027d2:	430a      	orrs	r2, r1
 80027d4:	08db      	lsrs	r3, r3, #3
 80027d6:	e6a5      	b.n	8002524 <__aeabi_dsub+0x2f4>
 80027d8:	464c      	mov	r4, r9
 80027da:	4323      	orrs	r3, r4
 80027dc:	001c      	movs	r4, r3
 80027de:	1e63      	subs	r3, r4, #1
 80027e0:	419c      	sbcs	r4, r3
 80027e2:	e65b      	b.n	800249c <__aeabi_dsub+0x26c>
 80027e4:	4665      	mov	r5, ip
 80027e6:	001e      	movs	r6, r3
 80027e8:	3d20      	subs	r5, #32
 80027ea:	40ee      	lsrs	r6, r5
 80027ec:	2c20      	cmp	r4, #32
 80027ee:	d005      	beq.n	80027fc <__aeabi_dsub+0x5cc>
 80027f0:	2540      	movs	r5, #64	; 0x40
 80027f2:	1b2d      	subs	r5, r5, r4
 80027f4:	40ab      	lsls	r3, r5
 80027f6:	464c      	mov	r4, r9
 80027f8:	431c      	orrs	r4, r3
 80027fa:	46a2      	mov	sl, r4
 80027fc:	4654      	mov	r4, sl
 80027fe:	1e63      	subs	r3, r4, #1
 8002800:	419c      	sbcs	r4, r3
 8002802:	4334      	orrs	r4, r6
 8002804:	e77d      	b.n	8002702 <__aeabi_dsub+0x4d2>
 8002806:	074b      	lsls	r3, r1, #29
 8002808:	08c2      	lsrs	r2, r0, #3
 800280a:	431a      	orrs	r2, r3
 800280c:	465d      	mov	r5, fp
 800280e:	08cb      	lsrs	r3, r1, #3
 8002810:	e6cc      	b.n	80025ac <__aeabi_dsub+0x37c>
 8002812:	000a      	movs	r2, r1
 8002814:	4302      	orrs	r2, r0
 8002816:	d100      	bne.n	800281a <__aeabi_dsub+0x5ea>
 8002818:	e736      	b.n	8002688 <__aeabi_dsub+0x458>
 800281a:	074b      	lsls	r3, r1, #29
 800281c:	08c2      	lsrs	r2, r0, #3
 800281e:	431a      	orrs	r2, r3
 8002820:	465d      	mov	r5, fp
 8002822:	08cb      	lsrs	r3, r1, #3
 8002824:	e681      	b.n	800252a <__aeabi_dsub+0x2fa>
 8002826:	464a      	mov	r2, r9
 8002828:	1a84      	subs	r4, r0, r2
 800282a:	42a0      	cmp	r0, r4
 800282c:	4192      	sbcs	r2, r2
 800282e:	1acb      	subs	r3, r1, r3
 8002830:	4252      	negs	r2, r2
 8002832:	1a9b      	subs	r3, r3, r2
 8002834:	4698      	mov	r8, r3
 8002836:	465d      	mov	r5, fp
 8002838:	2601      	movs	r6, #1
 800283a:	e54e      	b.n	80022da <__aeabi_dsub+0xaa>
 800283c:	074b      	lsls	r3, r1, #29
 800283e:	08c2      	lsrs	r2, r0, #3
 8002840:	431a      	orrs	r2, r3
 8002842:	08cb      	lsrs	r3, r1, #3
 8002844:	e6b2      	b.n	80025ac <__aeabi_dsub+0x37c>
 8002846:	464a      	mov	r2, r9
 8002848:	1a14      	subs	r4, r2, r0
 800284a:	45a1      	cmp	r9, r4
 800284c:	4192      	sbcs	r2, r2
 800284e:	1a5f      	subs	r7, r3, r1
 8002850:	4252      	negs	r2, r2
 8002852:	1aba      	subs	r2, r7, r2
 8002854:	4690      	mov	r8, r2
 8002856:	0212      	lsls	r2, r2, #8
 8002858:	d56b      	bpl.n	8002932 <__aeabi_dsub+0x702>
 800285a:	464a      	mov	r2, r9
 800285c:	1a84      	subs	r4, r0, r2
 800285e:	42a0      	cmp	r0, r4
 8002860:	4192      	sbcs	r2, r2
 8002862:	1acb      	subs	r3, r1, r3
 8002864:	4252      	negs	r2, r2
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	4698      	mov	r8, r3
 800286a:	465d      	mov	r5, fp
 800286c:	e564      	b.n	8002338 <__aeabi_dsub+0x108>
 800286e:	074b      	lsls	r3, r1, #29
 8002870:	08c2      	lsrs	r2, r0, #3
 8002872:	431a      	orrs	r2, r3
 8002874:	465d      	mov	r5, fp
 8002876:	08cb      	lsrs	r3, r1, #3
 8002878:	e698      	b.n	80025ac <__aeabi_dsub+0x37c>
 800287a:	074b      	lsls	r3, r1, #29
 800287c:	08c2      	lsrs	r2, r0, #3
 800287e:	431a      	orrs	r2, r3
 8002880:	08cb      	lsrs	r3, r1, #3
 8002882:	e64f      	b.n	8002524 <__aeabi_dsub+0x2f4>
 8002884:	000a      	movs	r2, r1
 8002886:	4302      	orrs	r2, r0
 8002888:	d090      	beq.n	80027ac <__aeabi_dsub+0x57c>
 800288a:	464a      	mov	r2, r9
 800288c:	075c      	lsls	r4, r3, #29
 800288e:	08d2      	lsrs	r2, r2, #3
 8002890:	4314      	orrs	r4, r2
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	0312      	lsls	r2, r2, #12
 8002898:	4213      	tst	r3, r2
 800289a:	d008      	beq.n	80028ae <__aeabi_dsub+0x67e>
 800289c:	08ce      	lsrs	r6, r1, #3
 800289e:	4216      	tst	r6, r2
 80028a0:	d105      	bne.n	80028ae <__aeabi_dsub+0x67e>
 80028a2:	08c0      	lsrs	r0, r0, #3
 80028a4:	0749      	lsls	r1, r1, #29
 80028a6:	4308      	orrs	r0, r1
 80028a8:	0004      	movs	r4, r0
 80028aa:	465d      	mov	r5, fp
 80028ac:	0033      	movs	r3, r6
 80028ae:	0f61      	lsrs	r1, r4, #29
 80028b0:	00e2      	lsls	r2, r4, #3
 80028b2:	0749      	lsls	r1, r1, #29
 80028b4:	08d2      	lsrs	r2, r2, #3
 80028b6:	430a      	orrs	r2, r1
 80028b8:	e678      	b.n	80025ac <__aeabi_dsub+0x37c>
 80028ba:	074b      	lsls	r3, r1, #29
 80028bc:	08c2      	lsrs	r2, r0, #3
 80028be:	431a      	orrs	r2, r3
 80028c0:	08cb      	lsrs	r3, r1, #3
 80028c2:	e632      	b.n	800252a <__aeabi_dsub+0x2fa>
 80028c4:	4448      	add	r0, r9
 80028c6:	185b      	adds	r3, r3, r1
 80028c8:	4548      	cmp	r0, r9
 80028ca:	4192      	sbcs	r2, r2
 80028cc:	4698      	mov	r8, r3
 80028ce:	4252      	negs	r2, r2
 80028d0:	4490      	add	r8, r2
 80028d2:	4643      	mov	r3, r8
 80028d4:	0004      	movs	r4, r0
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	d400      	bmi.n	80028dc <__aeabi_dsub+0x6ac>
 80028da:	e61a      	b.n	8002512 <__aeabi_dsub+0x2e2>
 80028dc:	4642      	mov	r2, r8
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <__aeabi_dsub+0x6e8>)
 80028e0:	2601      	movs	r6, #1
 80028e2:	401a      	ands	r2, r3
 80028e4:	4690      	mov	r8, r2
 80028e6:	e614      	b.n	8002512 <__aeabi_dsub+0x2e2>
 80028e8:	4666      	mov	r6, ip
 80028ea:	001f      	movs	r7, r3
 80028ec:	3e20      	subs	r6, #32
 80028ee:	40f7      	lsrs	r7, r6
 80028f0:	2c20      	cmp	r4, #32
 80028f2:	d005      	beq.n	8002900 <__aeabi_dsub+0x6d0>
 80028f4:	2640      	movs	r6, #64	; 0x40
 80028f6:	1b36      	subs	r6, r6, r4
 80028f8:	40b3      	lsls	r3, r6
 80028fa:	464c      	mov	r4, r9
 80028fc:	431c      	orrs	r4, r3
 80028fe:	46a2      	mov	sl, r4
 8002900:	4654      	mov	r4, sl
 8002902:	1e63      	subs	r3, r4, #1
 8002904:	419c      	sbcs	r4, r3
 8002906:	433c      	orrs	r4, r7
 8002908:	e5c8      	b.n	800249c <__aeabi_dsub+0x26c>
 800290a:	0011      	movs	r1, r2
 800290c:	2300      	movs	r3, #0
 800290e:	2200      	movs	r2, #0
 8002910:	e532      	b.n	8002378 <__aeabi_dsub+0x148>
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	000007ff 	.word	0x000007ff
 8002918:	ff7fffff 	.word	0xff7fffff
 800291c:	000007fe 	.word	0x000007fe
 8002920:	464a      	mov	r2, r9
 8002922:	1814      	adds	r4, r2, r0
 8002924:	4284      	cmp	r4, r0
 8002926:	4192      	sbcs	r2, r2
 8002928:	185b      	adds	r3, r3, r1
 800292a:	4698      	mov	r8, r3
 800292c:	4252      	negs	r2, r2
 800292e:	4490      	add	r8, r2
 8002930:	e5e9      	b.n	8002506 <__aeabi_dsub+0x2d6>
 8002932:	4642      	mov	r2, r8
 8002934:	4322      	orrs	r2, r4
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x70a>
 8002938:	e6a6      	b.n	8002688 <__aeabi_dsub+0x458>
 800293a:	e5ea      	b.n	8002512 <__aeabi_dsub+0x2e2>
 800293c:	074b      	lsls	r3, r1, #29
 800293e:	08c2      	lsrs	r2, r0, #3
 8002940:	431a      	orrs	r2, r3
 8002942:	08cb      	lsrs	r3, r1, #3
 8002944:	e632      	b.n	80025ac <__aeabi_dsub+0x37c>
 8002946:	2200      	movs	r2, #0
 8002948:	4901      	ldr	r1, [pc, #4]	; (8002950 <__aeabi_dsub+0x720>)
 800294a:	0013      	movs	r3, r2
 800294c:	e514      	b.n	8002378 <__aeabi_dsub+0x148>
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_d2iz>:
 8002954:	000a      	movs	r2, r1
 8002956:	b530      	push	{r4, r5, lr}
 8002958:	4c13      	ldr	r4, [pc, #76]	; (80029a8 <__aeabi_d2iz+0x54>)
 800295a:	0053      	lsls	r3, r2, #1
 800295c:	0309      	lsls	r1, r1, #12
 800295e:	0005      	movs	r5, r0
 8002960:	0b09      	lsrs	r1, r1, #12
 8002962:	2000      	movs	r0, #0
 8002964:	0d5b      	lsrs	r3, r3, #21
 8002966:	0fd2      	lsrs	r2, r2, #31
 8002968:	42a3      	cmp	r3, r4
 800296a:	dd04      	ble.n	8002976 <__aeabi_d2iz+0x22>
 800296c:	480f      	ldr	r0, [pc, #60]	; (80029ac <__aeabi_d2iz+0x58>)
 800296e:	4283      	cmp	r3, r0
 8002970:	dd02      	ble.n	8002978 <__aeabi_d2iz+0x24>
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <__aeabi_d2iz+0x5c>)
 8002974:	18d0      	adds	r0, r2, r3
 8002976:	bd30      	pop	{r4, r5, pc}
 8002978:	2080      	movs	r0, #128	; 0x80
 800297a:	0340      	lsls	r0, r0, #13
 800297c:	4301      	orrs	r1, r0
 800297e:	480d      	ldr	r0, [pc, #52]	; (80029b4 <__aeabi_d2iz+0x60>)
 8002980:	1ac0      	subs	r0, r0, r3
 8002982:	281f      	cmp	r0, #31
 8002984:	dd08      	ble.n	8002998 <__aeabi_d2iz+0x44>
 8002986:	480c      	ldr	r0, [pc, #48]	; (80029b8 <__aeabi_d2iz+0x64>)
 8002988:	1ac3      	subs	r3, r0, r3
 800298a:	40d9      	lsrs	r1, r3
 800298c:	000b      	movs	r3, r1
 800298e:	4258      	negs	r0, r3
 8002990:	2a00      	cmp	r2, #0
 8002992:	d1f0      	bne.n	8002976 <__aeabi_d2iz+0x22>
 8002994:	0018      	movs	r0, r3
 8002996:	e7ee      	b.n	8002976 <__aeabi_d2iz+0x22>
 8002998:	4c08      	ldr	r4, [pc, #32]	; (80029bc <__aeabi_d2iz+0x68>)
 800299a:	40c5      	lsrs	r5, r0
 800299c:	46a4      	mov	ip, r4
 800299e:	4463      	add	r3, ip
 80029a0:	4099      	lsls	r1, r3
 80029a2:	000b      	movs	r3, r1
 80029a4:	432b      	orrs	r3, r5
 80029a6:	e7f2      	b.n	800298e <__aeabi_d2iz+0x3a>
 80029a8:	000003fe 	.word	0x000003fe
 80029ac:	0000041d 	.word	0x0000041d
 80029b0:	7fffffff 	.word	0x7fffffff
 80029b4:	00000433 	.word	0x00000433
 80029b8:	00000413 	.word	0x00000413
 80029bc:	fffffbed 	.word	0xfffffbed

080029c0 <__aeabi_i2d>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d016      	beq.n	80029f4 <__aeabi_i2d+0x34>
 80029c6:	17c3      	asrs	r3, r0, #31
 80029c8:	18c5      	adds	r5, r0, r3
 80029ca:	405d      	eors	r5, r3
 80029cc:	0fc4      	lsrs	r4, r0, #31
 80029ce:	0028      	movs	r0, r5
 80029d0:	f000 f894 	bl	8002afc <__clzsi2>
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <__aeabi_i2d+0x5c>)
 80029d6:	1a12      	subs	r2, r2, r0
 80029d8:	280a      	cmp	r0, #10
 80029da:	dc16      	bgt.n	8002a0a <__aeabi_i2d+0x4a>
 80029dc:	0003      	movs	r3, r0
 80029de:	002e      	movs	r6, r5
 80029e0:	3315      	adds	r3, #21
 80029e2:	409e      	lsls	r6, r3
 80029e4:	230b      	movs	r3, #11
 80029e6:	1a18      	subs	r0, r3, r0
 80029e8:	40c5      	lsrs	r5, r0
 80029ea:	0553      	lsls	r3, r2, #21
 80029ec:	032d      	lsls	r5, r5, #12
 80029ee:	0b2d      	lsrs	r5, r5, #12
 80029f0:	0d5b      	lsrs	r3, r3, #21
 80029f2:	e003      	b.n	80029fc <__aeabi_i2d+0x3c>
 80029f4:	2400      	movs	r4, #0
 80029f6:	2300      	movs	r3, #0
 80029f8:	2500      	movs	r5, #0
 80029fa:	2600      	movs	r6, #0
 80029fc:	051b      	lsls	r3, r3, #20
 80029fe:	432b      	orrs	r3, r5
 8002a00:	07e4      	lsls	r4, r4, #31
 8002a02:	4323      	orrs	r3, r4
 8002a04:	0030      	movs	r0, r6
 8002a06:	0019      	movs	r1, r3
 8002a08:	bd70      	pop	{r4, r5, r6, pc}
 8002a0a:	380b      	subs	r0, #11
 8002a0c:	4085      	lsls	r5, r0
 8002a0e:	0553      	lsls	r3, r2, #21
 8002a10:	032d      	lsls	r5, r5, #12
 8002a12:	2600      	movs	r6, #0
 8002a14:	0b2d      	lsrs	r5, r5, #12
 8002a16:	0d5b      	lsrs	r3, r3, #21
 8002a18:	e7f0      	b.n	80029fc <__aeabi_i2d+0x3c>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	0000041e 	.word	0x0000041e

08002a20 <__aeabi_ui2d>:
 8002a20:	b510      	push	{r4, lr}
 8002a22:	1e04      	subs	r4, r0, #0
 8002a24:	d010      	beq.n	8002a48 <__aeabi_ui2d+0x28>
 8002a26:	f000 f869 	bl	8002afc <__clzsi2>
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <__aeabi_ui2d+0x48>)
 8002a2c:	1a1b      	subs	r3, r3, r0
 8002a2e:	280a      	cmp	r0, #10
 8002a30:	dc11      	bgt.n	8002a56 <__aeabi_ui2d+0x36>
 8002a32:	220b      	movs	r2, #11
 8002a34:	0021      	movs	r1, r4
 8002a36:	1a12      	subs	r2, r2, r0
 8002a38:	40d1      	lsrs	r1, r2
 8002a3a:	3015      	adds	r0, #21
 8002a3c:	030a      	lsls	r2, r1, #12
 8002a3e:	055b      	lsls	r3, r3, #21
 8002a40:	4084      	lsls	r4, r0
 8002a42:	0b12      	lsrs	r2, r2, #12
 8002a44:	0d5b      	lsrs	r3, r3, #21
 8002a46:	e001      	b.n	8002a4c <__aeabi_ui2d+0x2c>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	051b      	lsls	r3, r3, #20
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	0020      	movs	r0, r4
 8002a52:	0019      	movs	r1, r3
 8002a54:	bd10      	pop	{r4, pc}
 8002a56:	0022      	movs	r2, r4
 8002a58:	380b      	subs	r0, #11
 8002a5a:	4082      	lsls	r2, r0
 8002a5c:	055b      	lsls	r3, r3, #21
 8002a5e:	0312      	lsls	r2, r2, #12
 8002a60:	2400      	movs	r4, #0
 8002a62:	0b12      	lsrs	r2, r2, #12
 8002a64:	0d5b      	lsrs	r3, r3, #21
 8002a66:	e7f1      	b.n	8002a4c <__aeabi_ui2d+0x2c>
 8002a68:	0000041e 	.word	0x0000041e

08002a6c <__aeabi_f2d>:
 8002a6c:	b570      	push	{r4, r5, r6, lr}
 8002a6e:	0043      	lsls	r3, r0, #1
 8002a70:	0246      	lsls	r6, r0, #9
 8002a72:	0fc4      	lsrs	r4, r0, #31
 8002a74:	20fe      	movs	r0, #254	; 0xfe
 8002a76:	0e1b      	lsrs	r3, r3, #24
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	0a75      	lsrs	r5, r6, #9
 8002a7c:	4208      	tst	r0, r1
 8002a7e:	d00c      	beq.n	8002a9a <__aeabi_f2d+0x2e>
 8002a80:	22e0      	movs	r2, #224	; 0xe0
 8002a82:	0092      	lsls	r2, r2, #2
 8002a84:	4694      	mov	ip, r2
 8002a86:	076d      	lsls	r5, r5, #29
 8002a88:	0b36      	lsrs	r6, r6, #12
 8002a8a:	4463      	add	r3, ip
 8002a8c:	051b      	lsls	r3, r3, #20
 8002a8e:	4333      	orrs	r3, r6
 8002a90:	07e4      	lsls	r4, r4, #31
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0028      	movs	r0, r5
 8002a96:	0019      	movs	r1, r3
 8002a98:	bd70      	pop	{r4, r5, r6, pc}
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d114      	bne.n	8002ac8 <__aeabi_f2d+0x5c>
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	d01b      	beq.n	8002ada <__aeabi_f2d+0x6e>
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	f000 f82a 	bl	8002afc <__clzsi2>
 8002aa8:	280a      	cmp	r0, #10
 8002aaa:	dc1c      	bgt.n	8002ae6 <__aeabi_f2d+0x7a>
 8002aac:	230b      	movs	r3, #11
 8002aae:	002a      	movs	r2, r5
 8002ab0:	1a1b      	subs	r3, r3, r0
 8002ab2:	40da      	lsrs	r2, r3
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	3315      	adds	r3, #21
 8002ab8:	409d      	lsls	r5, r3
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <__aeabi_f2d+0x88>)
 8002abc:	0312      	lsls	r2, r2, #12
 8002abe:	1a1b      	subs	r3, r3, r0
 8002ac0:	055b      	lsls	r3, r3, #21
 8002ac2:	0b16      	lsrs	r6, r2, #12
 8002ac4:	0d5b      	lsrs	r3, r3, #21
 8002ac6:	e7e1      	b.n	8002a8c <__aeabi_f2d+0x20>
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	d009      	beq.n	8002ae0 <__aeabi_f2d+0x74>
 8002acc:	0b32      	lsrs	r2, r6, #12
 8002ace:	2680      	movs	r6, #128	; 0x80
 8002ad0:	0336      	lsls	r6, r6, #12
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <__aeabi_f2d+0x8c>)
 8002ad4:	076d      	lsls	r5, r5, #29
 8002ad6:	4316      	orrs	r6, r2
 8002ad8:	e7d8      	b.n	8002a8c <__aeabi_f2d+0x20>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2600      	movs	r6, #0
 8002ade:	e7d5      	b.n	8002a8c <__aeabi_f2d+0x20>
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <__aeabi_f2d+0x8c>)
 8002ae4:	e7d2      	b.n	8002a8c <__aeabi_f2d+0x20>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	002a      	movs	r2, r5
 8002aea:	3b0b      	subs	r3, #11
 8002aec:	409a      	lsls	r2, r3
 8002aee:	2500      	movs	r5, #0
 8002af0:	e7e3      	b.n	8002aba <__aeabi_f2d+0x4e>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	00000389 	.word	0x00000389
 8002af8:	000007ff 	.word	0x000007ff

08002afc <__clzsi2>:
 8002afc:	211c      	movs	r1, #28
 8002afe:	2301      	movs	r3, #1
 8002b00:	041b      	lsls	r3, r3, #16
 8002b02:	4298      	cmp	r0, r3
 8002b04:	d301      	bcc.n	8002b0a <__clzsi2+0xe>
 8002b06:	0c00      	lsrs	r0, r0, #16
 8002b08:	3910      	subs	r1, #16
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	d301      	bcc.n	8002b14 <__clzsi2+0x18>
 8002b10:	0a00      	lsrs	r0, r0, #8
 8002b12:	3908      	subs	r1, #8
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	4298      	cmp	r0, r3
 8002b18:	d301      	bcc.n	8002b1e <__clzsi2+0x22>
 8002b1a:	0900      	lsrs	r0, r0, #4
 8002b1c:	3904      	subs	r1, #4
 8002b1e:	a202      	add	r2, pc, #8	; (adr r2, 8002b28 <__clzsi2+0x2c>)
 8002b20:	5c10      	ldrb	r0, [r2, r0]
 8002b22:	1840      	adds	r0, r0, r1
 8002b24:	4770      	bx	lr
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	02020304 	.word	0x02020304
 8002b2c:	01010101 	.word	0x01010101
	...

08002b38 <__divdi3>:
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	4657      	mov	r7, sl
 8002b3c:	464e      	mov	r6, r9
 8002b3e:	4645      	mov	r5, r8
 8002b40:	46de      	mov	lr, fp
 8002b42:	b5e0      	push	{r5, r6, r7, lr}
 8002b44:	000f      	movs	r7, r1
 8002b46:	0019      	movs	r1, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	0006      	movs	r6, r0
 8002b4c:	4698      	mov	r8, r3
 8002b4e:	0010      	movs	r0, r2
 8002b50:	b083      	sub	sp, #12
 8002b52:	2f00      	cmp	r7, #0
 8002b54:	da07      	bge.n	8002b66 <__divdi3+0x2e>
 8002b56:	0033      	movs	r3, r6
 8002b58:	003c      	movs	r4, r7
 8002b5a:	2700      	movs	r7, #0
 8002b5c:	425e      	negs	r6, r3
 8002b5e:	41a7      	sbcs	r7, r4
 8002b60:	2301      	movs	r3, #1
 8002b62:	425b      	negs	r3, r3
 8002b64:	4698      	mov	r8, r3
 8002b66:	2900      	cmp	r1, #0
 8002b68:	da07      	bge.n	8002b7a <__divdi3+0x42>
 8002b6a:	4643      	mov	r3, r8
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	000c      	movs	r4, r1
 8002b70:	4698      	mov	r8, r3
 8002b72:	0003      	movs	r3, r0
 8002b74:	2100      	movs	r1, #0
 8002b76:	4258      	negs	r0, r3
 8002b78:	41a1      	sbcs	r1, r4
 8002b7a:	0034      	movs	r4, r6
 8002b7c:	003d      	movs	r5, r7
 8002b7e:	4682      	mov	sl, r0
 8002b80:	4689      	mov	r9, r1
 8002b82:	42b9      	cmp	r1, r7
 8002b84:	d86a      	bhi.n	8002c5c <__divdi3+0x124>
 8002b86:	d067      	beq.n	8002c58 <__divdi3+0x120>
 8002b88:	4649      	mov	r1, r9
 8002b8a:	4650      	mov	r0, sl
 8002b8c:	f000 f8ba 	bl	8002d04 <__clzdi2>
 8002b90:	4683      	mov	fp, r0
 8002b92:	0039      	movs	r1, r7
 8002b94:	0030      	movs	r0, r6
 8002b96:	f000 f8b5 	bl	8002d04 <__clzdi2>
 8002b9a:	465b      	mov	r3, fp
 8002b9c:	1a1b      	subs	r3, r3, r0
 8002b9e:	469c      	mov	ip, r3
 8002ba0:	3b20      	subs	r3, #32
 8002ba2:	469b      	mov	fp, r3
 8002ba4:	d46b      	bmi.n	8002c7e <__divdi3+0x146>
 8002ba6:	4658      	mov	r0, fp
 8002ba8:	4651      	mov	r1, sl
 8002baa:	4081      	lsls	r1, r0
 8002bac:	4660      	mov	r0, ip
 8002bae:	000b      	movs	r3, r1
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	4081      	lsls	r1, r0
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	42bb      	cmp	r3, r7
 8002bb8:	d900      	bls.n	8002bbc <__divdi3+0x84>
 8002bba:	e072      	b.n	8002ca2 <__divdi3+0x16a>
 8002bbc:	42bb      	cmp	r3, r7
 8002bbe:	d100      	bne.n	8002bc2 <__divdi3+0x8a>
 8002bc0:	e079      	b.n	8002cb6 <__divdi3+0x17e>
 8002bc2:	0034      	movs	r4, r6
 8002bc4:	003d      	movs	r5, r7
 8002bc6:	4659      	mov	r1, fp
 8002bc8:	1aa4      	subs	r4, r4, r2
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	da00      	bge.n	8002bd2 <__divdi3+0x9a>
 8002bd0:	e074      	b.n	8002cbc <__divdi3+0x184>
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	2601      	movs	r6, #1
 8002bd8:	9000      	str	r0, [sp, #0]
 8002bda:	9101      	str	r1, [sp, #4]
 8002bdc:	4659      	mov	r1, fp
 8002bde:	408e      	lsls	r6, r1
 8002be0:	9601      	str	r6, [sp, #4]
 8002be2:	4661      	mov	r1, ip
 8002be4:	2601      	movs	r6, #1
 8002be6:	408e      	lsls	r6, r1
 8002be8:	4661      	mov	r1, ip
 8002bea:	9600      	str	r6, [sp, #0]
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d05f      	beq.n	8002cb0 <__divdi3+0x178>
 8002bf0:	07d9      	lsls	r1, r3, #31
 8002bf2:	0856      	lsrs	r6, r2, #1
 8002bf4:	430e      	orrs	r6, r1
 8002bf6:	085f      	lsrs	r7, r3, #1
 8002bf8:	4661      	mov	r1, ip
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e00c      	b.n	8002c1a <__divdi3+0xe2>
 8002c00:	42af      	cmp	r7, r5
 8002c02:	d101      	bne.n	8002c08 <__divdi3+0xd0>
 8002c04:	42a6      	cmp	r6, r4
 8002c06:	d80a      	bhi.n	8002c1e <__divdi3+0xe6>
 8002c08:	1ba4      	subs	r4, r4, r6
 8002c0a:	41bd      	sbcs	r5, r7
 8002c0c:	1924      	adds	r4, r4, r4
 8002c0e:	416d      	adcs	r5, r5
 8002c10:	3901      	subs	r1, #1
 8002c12:	18a4      	adds	r4, r4, r2
 8002c14:	415d      	adcs	r5, r3
 8002c16:	2900      	cmp	r1, #0
 8002c18:	d006      	beq.n	8002c28 <__divdi3+0xf0>
 8002c1a:	42af      	cmp	r7, r5
 8002c1c:	d9f0      	bls.n	8002c00 <__divdi3+0xc8>
 8002c1e:	3901      	subs	r1, #1
 8002c20:	1924      	adds	r4, r4, r4
 8002c22:	416d      	adcs	r5, r5
 8002c24:	2900      	cmp	r1, #0
 8002c26:	d1f8      	bne.n	8002c1a <__divdi3+0xe2>
 8002c28:	9800      	ldr	r0, [sp, #0]
 8002c2a:	9901      	ldr	r1, [sp, #4]
 8002c2c:	465b      	mov	r3, fp
 8002c2e:	1900      	adds	r0, r0, r4
 8002c30:	4169      	adcs	r1, r5
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db4d      	blt.n	8002cd2 <__divdi3+0x19a>
 8002c36:	002e      	movs	r6, r5
 8002c38:	002c      	movs	r4, r5
 8002c3a:	40de      	lsrs	r6, r3
 8002c3c:	4663      	mov	r3, ip
 8002c3e:	40dc      	lsrs	r4, r3
 8002c40:	465b      	mov	r3, fp
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	db55      	blt.n	8002cf2 <__divdi3+0x1ba>
 8002c46:	0034      	movs	r4, r6
 8002c48:	409c      	lsls	r4, r3
 8002c4a:	0023      	movs	r3, r4
 8002c4c:	4664      	mov	r4, ip
 8002c4e:	40a6      	lsls	r6, r4
 8002c50:	0032      	movs	r2, r6
 8002c52:	1a80      	subs	r0, r0, r2
 8002c54:	4199      	sbcs	r1, r3
 8002c56:	e003      	b.n	8002c60 <__divdi3+0x128>
 8002c58:	42b0      	cmp	r0, r6
 8002c5a:	d995      	bls.n	8002b88 <__divdi3+0x50>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4643      	mov	r3, r8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <__divdi3+0x138>
 8002c66:	0003      	movs	r3, r0
 8002c68:	000c      	movs	r4, r1
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4258      	negs	r0, r3
 8002c6e:	41a1      	sbcs	r1, r4
 8002c70:	b003      	add	sp, #12
 8002c72:	bcf0      	pop	{r4, r5, r6, r7}
 8002c74:	46bb      	mov	fp, r7
 8002c76:	46b2      	mov	sl, r6
 8002c78:	46a9      	mov	r9, r5
 8002c7a:	46a0      	mov	r8, r4
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7e:	4662      	mov	r2, ip
 8002c80:	4648      	mov	r0, r9
 8002c82:	2320      	movs	r3, #32
 8002c84:	4651      	mov	r1, sl
 8002c86:	4090      	lsls	r0, r2
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	40d9      	lsrs	r1, r3
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	9100      	str	r1, [sp, #0]
 8002c90:	9900      	ldr	r1, [sp, #0]
 8002c92:	4660      	mov	r0, ip
 8002c94:	430b      	orrs	r3, r1
 8002c96:	4651      	mov	r1, sl
 8002c98:	4081      	lsls	r1, r0
 8002c9a:	000a      	movs	r2, r1
 8002c9c:	42bb      	cmp	r3, r7
 8002c9e:	d800      	bhi.n	8002ca2 <__divdi3+0x16a>
 8002ca0:	e78c      	b.n	8002bbc <__divdi3+0x84>
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	9000      	str	r0, [sp, #0]
 8002ca8:	9101      	str	r1, [sp, #4]
 8002caa:	4661      	mov	r1, ip
 8002cac:	2900      	cmp	r1, #0
 8002cae:	d19f      	bne.n	8002bf0 <__divdi3+0xb8>
 8002cb0:	9800      	ldr	r0, [sp, #0]
 8002cb2:	9901      	ldr	r1, [sp, #4]
 8002cb4:	e7d4      	b.n	8002c60 <__divdi3+0x128>
 8002cb6:	42b1      	cmp	r1, r6
 8002cb8:	d8f3      	bhi.n	8002ca2 <__divdi3+0x16a>
 8002cba:	e782      	b.n	8002bc2 <__divdi3+0x8a>
 8002cbc:	4661      	mov	r1, ip
 8002cbe:	2620      	movs	r6, #32
 8002cc0:	2701      	movs	r7, #1
 8002cc2:	1a76      	subs	r6, r6, r1
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	40f7      	lsrs	r7, r6
 8002cca:	9000      	str	r0, [sp, #0]
 8002ccc:	9101      	str	r1, [sp, #4]
 8002cce:	9701      	str	r7, [sp, #4]
 8002cd0:	e787      	b.n	8002be2 <__divdi3+0xaa>
 8002cd2:	4662      	mov	r2, ip
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	002a      	movs	r2, r5
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	0026      	movs	r6, r4
 8002cde:	0013      	movs	r3, r2
 8002ce0:	4662      	mov	r2, ip
 8002ce2:	40d6      	lsrs	r6, r2
 8002ce4:	002c      	movs	r4, r5
 8002ce6:	431e      	orrs	r6, r3
 8002ce8:	4663      	mov	r3, ip
 8002cea:	40dc      	lsrs	r4, r3
 8002cec:	465b      	mov	r3, fp
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	daa9      	bge.n	8002c46 <__divdi3+0x10e>
 8002cf2:	4662      	mov	r2, ip
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	0035      	movs	r5, r6
 8002cf8:	4094      	lsls	r4, r2
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	40dd      	lsrs	r5, r3
 8002cfe:	0023      	movs	r3, r4
 8002d00:	432b      	orrs	r3, r5
 8002d02:	e7a3      	b.n	8002c4c <__divdi3+0x114>

08002d04 <__clzdi2>:
 8002d04:	b510      	push	{r4, lr}
 8002d06:	2900      	cmp	r1, #0
 8002d08:	d103      	bne.n	8002d12 <__clzdi2+0xe>
 8002d0a:	f7ff fef7 	bl	8002afc <__clzsi2>
 8002d0e:	3020      	adds	r0, #32
 8002d10:	e002      	b.n	8002d18 <__clzdi2+0x14>
 8002d12:	1c08      	adds	r0, r1, #0
 8002d14:	f7ff fef2 	bl	8002afc <__clzsi2>
 8002d18:	bd10      	pop	{r4, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)

08002d1c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d22:	1d3b      	adds	r3, r7, #4
 8002d24:	0018      	movs	r0, r3
 8002d26:	230c      	movs	r3, #12
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	f004 fa68 	bl	8007200 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d32:	4a27      	ldr	r2, [pc, #156]	; (8002dd0 <MX_ADC_Init+0xb4>)
 8002d34:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d50:	2204      	movs	r2, #4
 8002d52:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d6e:	22c2      	movs	r2, #194	; 0xc2
 8002d70:	32ff      	adds	r2, #255	; 0xff
 8002d72:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d74:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d7c:	2224      	movs	r2, #36	; 0x24
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fd08 	bl	80047a0 <HAL_ADC_Init>
 8002d90:	1e03      	subs	r3, r0, #0
 8002d92:	d001      	beq.n	8002d98 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8002d94:	f001 fa92 	bl	80042bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	0152      	lsls	r2, r2, #5
 8002da4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2280      	movs	r2, #128	; 0x80
 8002daa:	0552      	lsls	r2, r2, #21
 8002dac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002dae:	1d3a      	adds	r2, r7, #4
 8002db0:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <MX_ADC_Init+0xb0>)
 8002db2:	0011      	movs	r1, r2
 8002db4:	0018      	movs	r0, r3
 8002db6:	f001 ff2b 	bl	8004c10 <HAL_ADC_ConfigChannel>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002dbe:	f001 fa7d 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b004      	add	sp, #16
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	2000009c 	.word	0x2000009c
 8002dd0:	40012400 	.word	0x40012400

08002dd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b08b      	sub	sp, #44	; 0x2c
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	2414      	movs	r4, #20
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	0018      	movs	r0, r3
 8002de2:	2314      	movs	r3, #20
 8002de4:	001a      	movs	r2, r3
 8002de6:	2100      	movs	r1, #0
 8002de8:	f004 fa0a 	bl	8007200 <memset>
  if(adcHandle->Instance==ADC1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a19      	ldr	r2, [pc, #100]	; (8002e58 <HAL_ADC_MspInit+0x84>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d12b      	bne.n	8002e4e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002df6:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0089      	lsls	r1, r1, #2
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
 8002e04:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0289      	lsls	r1, r1, #10
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	615a      	str	r2, [r3, #20]
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <HAL_ADC_MspInit+0x88>)
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e2e:	193b      	adds	r3, r7, r4
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e34:	193b      	adds	r3, r7, r4
 8002e36:	2203      	movs	r2, #3
 8002e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	193a      	adds	r2, r7, r4
 8002e42:	2390      	movs	r3, #144	; 0x90
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	0011      	movs	r1, r2
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f002 f939 	bl	80050c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b00b      	add	sp, #44	; 0x2c
 8002e54:	bd90      	pop	{r4, r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	40012400 	.word	0x40012400
 8002e5c:	40021000 	.word	0x40021000

08002e60 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2203      	movs	r2, #3
 8002e78:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2203      	movs	r2, #3
 8002e84:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	715a      	strb	r2, [r3, #5]
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af04      	add	r7, sp, #16
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	240b      	movs	r4, #11
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	1c0a      	adds	r2, r1, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002eaa:	2116      	movs	r1, #22
 8002eac:	187a      	adds	r2, r7, r1
 8002eae:	18db      	adds	r3, r3, r3
 8002eb0:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002eb6:	193b      	adds	r3, r7, r4
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	187b      	adds	r3, r7, r1
 8002ebe:	8819      	ldrh	r1, [r3, #0]
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <read_register16+0x6c>)
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	2414      	movs	r4, #20
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f002 fd88 	bl	80059e4 <HAL_I2C_Mem_Read>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d10e      	bne.n	8002ef6 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002ed8:	0021      	movs	r1, r4
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	785b      	ldrb	r3, [r3, #1]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	b21a      	sxth	r2, r3
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b21b      	sxth	r3, r3
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b21b      	sxth	r3, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	801a      	strh	r2, [r3, #0]
		return true;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <read_register16+0x64>
	} else
		return false;
 8002ef6:	2300      	movs	r3, #0

}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b007      	add	sp, #28
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	00001388 	.word	0x00001388

08002f04 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af04      	add	r7, sp, #16
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	0008      	movs	r0, r1
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	0019      	movs	r1, r3
 8002f12:	240b      	movs	r4, #11
 8002f14:	193b      	adds	r3, r7, r4
 8002f16:	1c02      	adds	r2, r0, #0
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	250a      	movs	r5, #10
 8002f1c:	197b      	adds	r3, r7, r5
 8002f1e:	1c0a      	adds	r2, r1, #0
 8002f20:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002f26:	2116      	movs	r1, #22
 8002f28:	187a      	adds	r2, r7, r1
 8002f2a:	18db      	adds	r3, r3, r3
 8002f2c:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b29c      	uxth	r4, r3
 8002f38:	197b      	adds	r3, r7, r5
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	187a      	adds	r2, r7, r1
 8002f40:	8811      	ldrh	r1, [r2, #0]
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <read_data+0x64>)
 8002f44:	9202      	str	r2, [sp, #8]
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	0022      	movs	r2, r4
 8002f50:	f002 fd48 	bl	80059e4 <HAL_I2C_Mem_Read>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d101      	bne.n	8002f5c <read_data+0x58>
		return 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <read_data+0x5a>
	else
		return 1;
 8002f5c:	2301      	movs	r3, #1

}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b006      	add	sp, #24
 8002f64:	bdb0      	pop	{r4, r5, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	00001388 	.word	0x00001388

08002f6c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2188      	movs	r1, #136	; 0x88
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f7ff ff8a 	bl	8002e94 <read_register16>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d100      	bne.n	8002f86 <read_calibration_data+0x1a>
 8002f84:	e06d      	b.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	218a      	movs	r1, #138	; 0x8a
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7ff ff80 	bl	8002e94 <read_register16>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d100      	bne.n	8002f9a <read_calibration_data+0x2e>
 8002f98:	e063      	b.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	1d1a      	adds	r2, r3, #4
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	218c      	movs	r1, #140	; 0x8c
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f7ff ff76 	bl	8002e94 <read_register16>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d05a      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1d9a      	adds	r2, r3, #6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	218e      	movs	r1, #142	; 0x8e
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7ff ff6d 	bl	8002e94 <read_register16>
 8002fba:	1e03      	subs	r3, r0, #0
 8002fbc:	d051      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2190      	movs	r1, #144	; 0x90
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff ff63 	bl	8002e94 <read_register16>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d047      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	330a      	adds	r3, #10
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2192      	movs	r1, #146	; 0x92
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7ff ff59 	bl	8002e94 <read_register16>
 8002fe2:	1e03      	subs	r3, r0, #0
 8002fe4:	d03d      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	001a      	movs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2194      	movs	r1, #148	; 0x94
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff ff4f 	bl	8002e94 <read_register16>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d033      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	330e      	adds	r3, #14
 8002ffe:	001a      	movs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2196      	movs	r1, #150	; 0x96
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff45 	bl	8002e94 <read_register16>
 800300a:	1e03      	subs	r3, r0, #0
 800300c:	d029      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3310      	adds	r3, #16
 8003012:	001a      	movs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2198      	movs	r1, #152	; 0x98
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ff3b 	bl	8002e94 <read_register16>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d01f      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3312      	adds	r3, #18
 8003026:	001a      	movs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	219a      	movs	r1, #154	; 0x9a
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ff31 	bl	8002e94 <read_register16>
 8003032:	1e03      	subs	r3, r0, #0
 8003034:	d015      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3314      	adds	r3, #20
 800303a:	001a      	movs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	219c      	movs	r1, #156	; 0x9c
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff ff27 	bl	8002e94 <read_register16>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d00b      	beq.n	8003062 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3316      	adds	r3, #22
 800304e:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	219e      	movs	r1, #158	; 0x9e
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ff1d 	bl	8002e94 <read_register16>
 800305a:	1e03      	subs	r3, r0, #0
 800305c:	d001      	beq.n	8003062 <read_calibration_data+0xf6>

		return true;
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <read_calibration_data+0xf8>
	}

	return false;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3318      	adds	r3, #24
 8003078:	001a      	movs	r2, r3
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	2301      	movs	r3, #1
 800307e:	21a1      	movs	r1, #161	; 0xa1
 8003080:	f7ff ff40 	bl	8002f04 <read_data>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d14b      	bne.n	8003120 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	331a      	adds	r3, #26
 800308c:	001a      	movs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	21e1      	movs	r1, #225	; 0xe1
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff fefe 	bl	8002e94 <read_register16>
 8003098:	1e03      	subs	r3, r0, #0
 800309a:	d041      	beq.n	8003120 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	331c      	adds	r3, #28
 80030a0:	001a      	movs	r2, r3
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	2301      	movs	r3, #1
 80030a6:	21e3      	movs	r1, #227	; 0xe3
 80030a8:	f7ff ff2c 	bl	8002f04 <read_data>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d137      	bne.n	8003120 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 80030b0:	240e      	movs	r4, #14
 80030b2:	193a      	adds	r2, r7, r4
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	21e4      	movs	r1, #228	; 0xe4
 80030b8:	0018      	movs	r0, r3
 80030ba:	f7ff feeb 	bl	8002e94 <read_register16>
 80030be:	1e03      	subs	r3, r0, #0
 80030c0:	d02e      	beq.n	8003120 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 80030c2:	250c      	movs	r5, #12
 80030c4:	197a      	adds	r2, r7, r5
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	21e5      	movs	r1, #229	; 0xe5
 80030ca:	0018      	movs	r0, r3
 80030cc:	f7ff fee2 	bl	8002e94 <read_register16>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d025      	beq.n	8003120 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3322      	adds	r3, #34	; 0x22
 80030d8:	001a      	movs	r2, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	2301      	movs	r3, #1
 80030de:	21e7      	movs	r1, #231	; 0xe7
 80030e0:	f7ff ff10 	bl	8002f04 <read_data>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d11b      	bne.n	8003120 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	b21a      	sxth	r2, r3
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	b21a      	sxth	r2, r3
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	121b      	asrs	r3, r3, #8
 80030fe:	b21b      	sxth	r3, r3
 8003100:	210f      	movs	r1, #15
 8003102:	400b      	ands	r3, r1
 8003104:	b21b      	sxth	r3, r3
 8003106:	4313      	orrs	r3, r2
 8003108:	b21a      	sxth	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800310e:	197b      	adds	r3, r7, r5
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	b29b      	uxth	r3, r3
 8003116:	b21a      	sxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	841a      	strh	r2, [r3, #32]

		return true;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <read_hum_calibration_data+0xb6>
	}

	return false;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800312c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af04      	add	r7, sp, #16
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	0008      	movs	r0, r1
 8003136:	0011      	movs	r1, r2
 8003138:	1cfb      	adds	r3, r7, #3
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	1cbb      	adds	r3, r7, #2
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003148:	210e      	movs	r1, #14
 800314a:	187a      	adds	r2, r7, r1
 800314c:	18db      	adds	r3, r3, r3
 800314e:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003154:	1cfb      	adds	r3, r7, #3
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	b29a      	uxth	r2, r3
 800315a:	187b      	adds	r3, r7, r1
 800315c:	8819      	ldrh	r1, [r3, #0]
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <write_register8+0x58>)
 8003160:	9302      	str	r3, [sp, #8]
 8003162:	2301      	movs	r3, #1
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	1cbb      	adds	r3, r7, #2
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2301      	movs	r3, #1
 800316c:	f002 fb0c 	bl	8005788 <HAL_I2C_Mem_Write>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d101      	bne.n	8003178 <write_register8+0x4c>
		return false;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <write_register8+0x4e>
	else
		return true;
 8003178:	2301      	movs	r3, #1
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b004      	add	sp, #16
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	00002710 	.word	0x00002710

08003188 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003196:	2b76      	cmp	r3, #118	; 0x76
 8003198:	d005      	beq.n	80031a6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800319e:	2b77      	cmp	r3, #119	; 0x77
 80031a0:	d001      	beq.n	80031a6 <bmp280_init+0x1e>

		return false;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e0a3      	b.n	80032ee <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3332      	adds	r3, #50	; 0x32
 80031aa:	001a      	movs	r2, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	2301      	movs	r3, #1
 80031b0:	21d0      	movs	r1, #208	; 0xd0
 80031b2:	f7ff fea7 	bl	8002f04 <read_data>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <bmp280_init+0x36>
		return false;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e097      	b.n	80032ee <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2232      	movs	r2, #50	; 0x32
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	2b58      	cmp	r3, #88	; 0x58
 80031c6:	d006      	beq.n	80031d6 <bmp280_init+0x4e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2232      	movs	r2, #50	; 0x32
 80031cc:	5c9b      	ldrb	r3, [r3, r2]
 80031ce:	2b60      	cmp	r3, #96	; 0x60
 80031d0:	d001      	beq.n	80031d6 <bmp280_init+0x4e>

		return false;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e08b      	b.n	80032ee <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	22b6      	movs	r2, #182	; 0xb6
 80031da:	21e0      	movs	r1, #224	; 0xe0
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff ffa5 	bl	800312c <write_register8>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <bmp280_init+0x62>
		return false;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e081      	b.n	80032ee <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80031ea:	240c      	movs	r4, #12
 80031ec:	193a      	adds	r2, r7, r4
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	2301      	movs	r3, #1
 80031f2:	21f3      	movs	r1, #243	; 0xf3
 80031f4:	f7ff fe86 	bl	8002f04 <read_data>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d1f6      	bne.n	80031ea <bmp280_init+0x62>
				&& (status & 1) == 0)
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	001a      	movs	r2, r3
 8003202:	2301      	movs	r3, #1
 8003204:	4013      	ands	r3, r2
 8003206:	d1f0      	bne.n	80031ea <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff feae 	bl	8002f6c <read_calibration_data>
 8003210:	0003      	movs	r3, r0
 8003212:	001a      	movs	r2, r3
 8003214:	2301      	movs	r3, #1
 8003216:	4053      	eors	r3, r2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d100      	bne.n	8003220 <bmp280_init+0x98>
 800321e:	e001      	b.n	8003224 <bmp280_init+0x9c>
		return false;
 8003220:	2300      	movs	r3, #0
 8003222:	e064      	b.n	80032ee <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2232      	movs	r2, #50	; 0x32
 8003228:	5c9b      	ldrb	r3, [r3, r2]
 800322a:	2b60      	cmp	r3, #96	; 0x60
 800322c:	d10c      	bne.n	8003248 <bmp280_init+0xc0>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff1b 	bl	800306c <read_hum_calibration_data>
 8003236:	0003      	movs	r3, r0
 8003238:	001a      	movs	r2, r3
 800323a:	2301      	movs	r3, #1
 800323c:	4053      	eors	r3, r2
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <bmp280_init+0xc0>
		return false;
 8003244:	2300      	movs	r3, #0
 8003246:	e052      	b.n	80032ee <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	795b      	ldrb	r3, [r3, #5]
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	b25a      	sxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	b25b      	sxtb	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b25a      	sxtb	r2, r3
 800325c:	210f      	movs	r1, #15
 800325e:	187b      	adds	r3, r7, r1
 8003260:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8003262:	187b      	adds	r3, r7, r1
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	21f5      	movs	r1, #245	; 0xf5
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff ff5e 	bl	800312c <write_register8>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <bmp280_init+0xf0>
		return false;
 8003274:	2300      	movs	r3, #0
 8003276:	e03a      	b.n	80032ee <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	78db      	ldrb	r3, [r3, #3]
 800328a:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800328c:	b25a      	sxtb	r2, r3
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	789b      	ldrb	r3, [r3, #2]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	b25b      	sxtb	r3, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	b25a      	sxtb	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b25b      	sxtb	r3, r3
 80032a0:	4313      	orrs	r3, r2
 80032a2:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80032a4:	230e      	movs	r3, #14
 80032a6:	18fb      	adds	r3, r7, r3
 80032a8:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2232      	movs	r2, #50	; 0x32
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	2b60      	cmp	r3, #96	; 0x60
 80032b2:	d10f      	bne.n	80032d4 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80032b4:	210d      	movs	r1, #13
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	7912      	ldrb	r2, [r2, #4]
 80032bc:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	21f2      	movs	r1, #242	; 0xf2
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff30 	bl	800312c <write_register8>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <bmp280_init+0x14c>
			return false;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e00c      	b.n	80032ee <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80032d4:	230e      	movs	r3, #14
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	21f4      	movs	r1, #244	; 0xf4
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff ff24 	bl	800312c <write_register8>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <bmp280_init+0x164>
		return false;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <bmp280_init+0x166>
	}

	return true;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b005      	add	sp, #20
 80032f4:	bd90      	pop	{r4, r7, pc}

080032f6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	10da      	asrs	r2, r3, #3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	2102      	movs	r1, #2
 8003312:	5e52      	ldrsh	r2, [r2, r1]
 8003314:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8003316:	12db      	asrs	r3, r3, #11
 8003318:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	111b      	asrs	r3, r3, #4
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	8812      	ldrh	r2, [r2, #0]
 8003322:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	1112      	asrs	r2, r2, #4
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	8809      	ldrh	r1, [r1, #0]
 800332c:	1a52      	subs	r2, r2, r1
 800332e:	4353      	muls	r3, r2
 8003330:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	2104      	movs	r1, #4
 8003336:	5e52      	ldrsh	r2, [r2, r1]
 8003338:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800333a:	139b      	asrs	r3, r3, #14
 800333c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	18d2      	adds	r2, r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	0013      	movs	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	189b      	adds	r3, r3, r2
 8003352:	3380      	adds	r3, #128	; 0x80
 8003354:	121b      	asrs	r3, r3, #8
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b006      	add	sp, #24
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b0af      	sub	sp, #188	; 0xbc
 8003364:	af00      	add	r7, sp, #0
 8003366:	239c      	movs	r3, #156	; 0x9c
 8003368:	18fe      	adds	r6, r7, r3
 800336a:	6030      	str	r0, [r6, #0]
 800336c:	2098      	movs	r0, #152	; 0x98
 800336e:	1838      	adds	r0, r7, r0
 8003370:	6001      	str	r1, [r0, #0]
 8003372:	2194      	movs	r1, #148	; 0x94
 8003374:	1878      	adds	r0, r7, r1
 8003376:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8003378:	187a      	adds	r2, r7, r1
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	65bb      	str	r3, [r7, #88]	; 0x58
 800337e:	17db      	asrs	r3, r3, #31
 8003380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003382:	4ace      	ldr	r2, [pc, #824]	; (80036bc <compensate_pressure+0x35c>)
 8003384:	2301      	movs	r3, #1
 8003386:	425b      	negs	r3, r3
 8003388:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800338a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800338c:	1880      	adds	r0, r0, r2
 800338e:	4159      	adcs	r1, r3
 8003390:	0002      	movs	r2, r0
 8003392:	000b      	movs	r3, r1
 8003394:	26b0      	movs	r6, #176	; 0xb0
 8003396:	19b9      	adds	r1, r7, r6
 8003398:	600a      	str	r2, [r1, #0]
 800339a:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800339c:	19ba      	adds	r2, r7, r6
 800339e:	6853      	ldr	r3, [r2, #4]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	19b9      	adds	r1, r7, r6
 80033a4:	6808      	ldr	r0, [r1, #0]
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	f7fd f8d4 	bl	8000554 <__aeabi_lmul>
 80033ac:	0002      	movs	r2, r0
 80033ae:	000b      	movs	r3, r1
 80033b0:	0010      	movs	r0, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	239c      	movs	r3, #156	; 0x9c
 80033b6:	18fa      	adds	r2, r7, r3
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	2210      	movs	r2, #16
 80033bc:	5e9b      	ldrsh	r3, [r3, r2]
 80033be:	653b      	str	r3, [r7, #80]	; 0x50
 80033c0:	17db      	asrs	r3, r3, #31
 80033c2:	657b      	str	r3, [r7, #84]	; 0x54
 80033c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	f7fd f8c4 	bl	8000554 <__aeabi_lmul>
 80033cc:	0002      	movs	r2, r0
 80033ce:	000b      	movs	r3, r1
 80033d0:	21a8      	movs	r1, #168	; 0xa8
 80033d2:	1878      	adds	r0, r7, r1
 80033d4:	6002      	str	r2, [r0, #0]
 80033d6:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80033d8:	239c      	movs	r3, #156	; 0x9c
 80033da:	18fa      	adds	r2, r7, r3
 80033dc:	6813      	ldr	r3, [r2, #0]
 80033de:	220e      	movs	r2, #14
 80033e0:	5e9b      	ldrsh	r3, [r3, r2]
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e4:	17db      	asrs	r3, r3, #31
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	19ba      	adds	r2, r7, r6
 80033ea:	6853      	ldr	r3, [r2, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80033f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80033f2:	f7fd f8af 	bl	8000554 <__aeabi_lmul>
 80033f6:	0002      	movs	r2, r0
 80033f8:	000b      	movs	r3, r1
 80033fa:	0bd1      	lsrs	r1, r2, #15
 80033fc:	045d      	lsls	r5, r3, #17
 80033fe:	430d      	orrs	r5, r1
 8003400:	0454      	lsls	r4, r2, #17
 8003402:	21a8      	movs	r1, #168	; 0xa8
 8003404:	187a      	adds	r2, r7, r1
 8003406:	6853      	ldr	r3, [r2, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	1912      	adds	r2, r2, r4
 800340c:	416b      	adcs	r3, r5
 800340e:	1878      	adds	r0, r7, r1
 8003410:	6002      	str	r2, [r0, #0]
 8003412:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8003414:	259c      	movs	r5, #156	; 0x9c
 8003416:	197b      	adds	r3, r7, r5
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	220c      	movs	r2, #12
 800341c:	5e9b      	ldrsh	r3, [r3, r2]
 800341e:	643b      	str	r3, [r7, #64]	; 0x40
 8003420:	17db      	asrs	r3, r3, #31
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342a:	2300      	movs	r3, #0
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
 800342e:	000c      	movs	r4, r1
 8003430:	187b      	adds	r3, r7, r1
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800343a:	1812      	adds	r2, r2, r0
 800343c:	414b      	adcs	r3, r1
 800343e:	1939      	adds	r1, r7, r4
 8003440:	600a      	str	r2, [r1, #0]
 8003442:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003444:	0034      	movs	r4, r6
 8003446:	193b      	adds	r3, r7, r4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	1939      	adds	r1, r7, r4
 800344e:	6808      	ldr	r0, [r1, #0]
 8003450:	6849      	ldr	r1, [r1, #4]
 8003452:	f7fd f87f 	bl	8000554 <__aeabi_lmul>
 8003456:	0002      	movs	r2, r0
 8003458:	000b      	movs	r3, r1
 800345a:	0010      	movs	r0, r2
 800345c:	0019      	movs	r1, r3
 800345e:	197b      	adds	r3, r7, r5
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	220a      	movs	r2, #10
 8003464:	5e9b      	ldrsh	r3, [r3, r2]
 8003466:	633b      	str	r3, [r7, #48]	; 0x30
 8003468:	17db      	asrs	r3, r3, #31
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
 800346c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003470:	f7fd f870 	bl	8000554 <__aeabi_lmul>
 8003474:	0002      	movs	r2, r0
 8003476:	000b      	movs	r3, r1
 8003478:	0619      	lsls	r1, r3, #24
 800347a:	468c      	mov	ip, r1
 800347c:	0a10      	lsrs	r0, r2, #8
 800347e:	2688      	movs	r6, #136	; 0x88
 8003480:	19b9      	adds	r1, r7, r6
 8003482:	6008      	str	r0, [r1, #0]
 8003484:	19b8      	adds	r0, r7, r6
 8003486:	6800      	ldr	r0, [r0, #0]
 8003488:	4661      	mov	r1, ip
 800348a:	4308      	orrs	r0, r1
 800348c:	19b9      	adds	r1, r7, r6
 800348e:	6008      	str	r0, [r1, #0]
 8003490:	121b      	asrs	r3, r3, #8
 8003492:	228c      	movs	r2, #140	; 0x8c
 8003494:	18ba      	adds	r2, r7, r2
 8003496:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8003498:	197b      	adds	r3, r7, r5
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2208      	movs	r2, #8
 800349e:	5e9b      	ldrsh	r3, [r3, r2]
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034a2:	17db      	asrs	r3, r3, #31
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	193b      	adds	r3, r7, r4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034b0:	f7fd f850 	bl	8000554 <__aeabi_lmul>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0d11      	lsrs	r1, r2, #20
 80034ba:	468c      	mov	ip, r1
 80034bc:	0318      	lsls	r0, r3, #12
 80034be:	2184      	movs	r1, #132	; 0x84
 80034c0:	1879      	adds	r1, r7, r1
 80034c2:	6008      	str	r0, [r1, #0]
 80034c4:	2084      	movs	r0, #132	; 0x84
 80034c6:	1839      	adds	r1, r7, r0
 80034c8:	6808      	ldr	r0, [r1, #0]
 80034ca:	4661      	mov	r1, ip
 80034cc:	4308      	orrs	r0, r1
 80034ce:	2184      	movs	r1, #132	; 0x84
 80034d0:	1879      	adds	r1, r7, r1
 80034d2:	6008      	str	r0, [r1, #0]
 80034d4:	0313      	lsls	r3, r2, #12
 80034d6:	2180      	movs	r1, #128	; 0x80
 80034d8:	187a      	adds	r2, r7, r1
 80034da:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80034dc:	19bb      	adds	r3, r7, r6
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	1879      	adds	r1, r7, r1
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	6849      	ldr	r1, [r1, #4]
 80034e8:	1812      	adds	r2, r2, r0
 80034ea:	414b      	adcs	r3, r1
 80034ec:	1939      	adds	r1, r7, r4
 80034ee:	600a      	str	r2, [r1, #0]
 80034f0:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	1880      	adds	r0, r0, r2
 8003500:	4159      	adcs	r1, r3
 8003502:	197b      	adds	r3, r7, r5
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	88db      	ldrh	r3, [r3, #6]
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f7fd f81f 	bl	8000554 <__aeabi_lmul>
 8003516:	0002      	movs	r2, r0
 8003518:	000b      	movs	r3, r1
 800351a:	1059      	asrs	r1, r3, #1
 800351c:	1938      	adds	r0, r7, r4
 800351e:	6001      	str	r1, [r0, #0]
 8003520:	17db      	asrs	r3, r3, #31
 8003522:	21b4      	movs	r1, #180	; 0xb4
 8003524:	187a      	adds	r2, r7, r1
 8003526:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 8003528:	193b      	adds	r3, r7, r4
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	187b      	adds	r3, r7, r1
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	431a      	orrs	r2, r3
 8003532:	d101      	bne.n	8003538 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 8003534:	2300      	movs	r3, #0
 8003536:	e0bc      	b.n	80036b2 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 8003538:	2398      	movs	r3, #152	; 0x98
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	035b      	lsls	r3, r3, #13
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	24a0      	movs	r4, #160	; 0xa0
 8003546:	193a      	adds	r2, r7, r4
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	17db      	asrs	r3, r3, #31
 800354c:	25a4      	movs	r5, #164	; 0xa4
 800354e:	197a      	adds	r2, r7, r5
 8003550:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 8003552:	193b      	adds	r3, r7, r4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	105b      	asrs	r3, r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	193b      	adds	r3, r7, r4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	07db      	lsls	r3, r3, #31
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	20a8      	movs	r0, #168	; 0xa8
 8003564:	183a      	adds	r2, r7, r0
 8003566:	6853      	ldr	r3, [r2, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	69b8      	ldr	r0, [r7, #24]
 800356c:	69f9      	ldr	r1, [r7, #28]
 800356e:	1a80      	subs	r0, r0, r2
 8003570:	4199      	sbcs	r1, r3
 8003572:	4a53      	ldr	r2, [pc, #332]	; (80036c0 <compensate_pressure+0x360>)
 8003574:	2300      	movs	r3, #0
 8003576:	f7fc ffed 	bl	8000554 <__aeabi_lmul>
 800357a:	0002      	movs	r2, r0
 800357c:	000b      	movs	r3, r1
 800357e:	0010      	movs	r0, r2
 8003580:	0019      	movs	r1, r3
 8003582:	23b0      	movs	r3, #176	; 0xb0
 8003584:	18fa      	adds	r2, r7, r3
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	f7fc ffbf 	bl	800050c <__aeabi_ldivmod>
 800358e:	0002      	movs	r2, r0
 8003590:	000b      	movs	r3, r1
 8003592:	1939      	adds	r1, r7, r4
 8003594:	600a      	str	r2, [r1, #0]
 8003596:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003598:	269c      	movs	r6, #156	; 0x9c
 800359a:	19ba      	adds	r2, r7, r6
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	2216      	movs	r2, #22
 80035a0:	5e9b      	ldrsh	r3, [r3, r2]
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	17db      	asrs	r3, r3, #31
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	197a      	adds	r2, r7, r5
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	04da      	lsls	r2, r3, #19
 80035ae:	1939      	adds	r1, r7, r4
 80035b0:	680b      	ldr	r3, [r1, #0]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b8:	4313      	orrs	r3, r2
 80035ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80035bc:	197a      	adds	r2, r7, r5
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	135b      	asrs	r3, r3, #13
 80035c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035c8:	6938      	ldr	r0, [r7, #16]
 80035ca:	6979      	ldr	r1, [r7, #20]
 80035cc:	f7fc ffc2 	bl	8000554 <__aeabi_lmul>
 80035d0:	0002      	movs	r2, r0
 80035d2:	000b      	movs	r3, r1
 80035d4:	0010      	movs	r0, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	197a      	adds	r2, r7, r5
 80035da:	6813      	ldr	r3, [r2, #0]
 80035dc:	04da      	lsls	r2, r3, #19
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0b5b      	lsrs	r3, r3, #13
 80035e4:	673b      	str	r3, [r7, #112]	; 0x70
 80035e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e8:	4313      	orrs	r3, r2
 80035ea:	673b      	str	r3, [r7, #112]	; 0x70
 80035ec:	197a      	adds	r2, r7, r5
 80035ee:	6813      	ldr	r3, [r2, #0]
 80035f0:	135b      	asrs	r3, r3, #13
 80035f2:	677b      	str	r3, [r7, #116]	; 0x74
 80035f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80035f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f8:	f7fc ffac 	bl	8000554 <__aeabi_lmul>
 80035fc:	0002      	movs	r2, r0
 80035fe:	000b      	movs	r3, r1
 8003600:	01d9      	lsls	r1, r3, #7
 8003602:	0e50      	lsrs	r0, r2, #25
 8003604:	4301      	orrs	r1, r0
 8003606:	25b0      	movs	r5, #176	; 0xb0
 8003608:	1978      	adds	r0, r7, r5
 800360a:	6001      	str	r1, [r0, #0]
 800360c:	165b      	asrs	r3, r3, #25
 800360e:	22b4      	movs	r2, #180	; 0xb4
 8003610:	18ba      	adds	r2, r7, r2
 8003612:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8003614:	19ba      	adds	r2, r7, r6
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	2214      	movs	r2, #20
 800361a:	5e9b      	ldrsh	r3, [r3, r2]
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	17db      	asrs	r3, r3, #31
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	193a      	adds	r2, r7, r4
 8003624:	6853      	ldr	r3, [r2, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	68f9      	ldr	r1, [r7, #12]
 800362c:	f7fc ff92 	bl	8000554 <__aeabi_lmul>
 8003630:	0002      	movs	r2, r0
 8003632:	000b      	movs	r3, r1
 8003634:	0359      	lsls	r1, r3, #13
 8003636:	0cd0      	lsrs	r0, r2, #19
 8003638:	4301      	orrs	r1, r0
 800363a:	20a8      	movs	r0, #168	; 0xa8
 800363c:	1838      	adds	r0, r7, r0
 800363e:	6001      	str	r1, [r0, #0]
 8003640:	14db      	asrs	r3, r3, #19
 8003642:	22ac      	movs	r2, #172	; 0xac
 8003644:	18ba      	adds	r2, r7, r2
 8003646:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8003648:	193a      	adds	r2, r7, r4
 800364a:	6810      	ldr	r0, [r2, #0]
 800364c:	6851      	ldr	r1, [r2, #4]
 800364e:	197a      	adds	r2, r7, r5
 8003650:	6853      	ldr	r3, [r2, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	1880      	adds	r0, r0, r2
 8003656:	4159      	adcs	r1, r3
 8003658:	23a8      	movs	r3, #168	; 0xa8
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	1812      	adds	r2, r2, r0
 8003662:	414b      	adcs	r3, r1
 8003664:	0619      	lsls	r1, r3, #24
 8003666:	0a10      	lsrs	r0, r2, #8
 8003668:	66b8      	str	r0, [r7, #104]	; 0x68
 800366a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800366c:	4308      	orrs	r0, r1
 800366e:	66b8      	str	r0, [r7, #104]	; 0x68
 8003670:	121b      	asrs	r3, r3, #8
 8003672:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003674:	19bb      	adds	r3, r7, r6
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2212      	movs	r2, #18
 800367a:	5e9b      	ldrsh	r3, [r3, r2]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	17db      	asrs	r3, r3, #31
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	6839      	ldr	r1, [r7, #0]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	000b      	movs	r3, r1
 8003688:	0f1b      	lsrs	r3, r3, #28
 800368a:	0010      	movs	r0, r2
 800368c:	0100      	lsls	r0, r0, #4
 800368e:	6678      	str	r0, [r7, #100]	; 0x64
 8003690:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003692:	4318      	orrs	r0, r3
 8003694:	6678      	str	r0, [r7, #100]	; 0x64
 8003696:	000b      	movs	r3, r1
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	663b      	str	r3, [r7, #96]	; 0x60
 800369c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80036a2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80036a4:	1812      	adds	r2, r2, r0
 80036a6:	414b      	adcs	r3, r1
 80036a8:	1939      	adds	r1, r7, r4
 80036aa:	600a      	str	r2, [r1, #0]
 80036ac:	604b      	str	r3, [r1, #4]
	return p;
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	681b      	ldr	r3, [r3, #0]
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b02f      	add	sp, #188	; 0xbc
 80036b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	fffe0c00 	.word	0xfffe0c00
 80036c0:	00000c35 	.word	0x00000c35

080036c4 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <compensate_humidity+0xc0>)
 80036d4:	4694      	mov	ip, r2
 80036d6:	4463      	add	r3, ip
 80036d8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	039a      	lsls	r2, r3, #14
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	211e      	movs	r1, #30
 80036e2:	5e5b      	ldrsh	r3, [r3, r1]
 80036e4:	051b      	lsls	r3, r3, #20
 80036e6:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2120      	movs	r1, #32
 80036ec:	5e5b      	ldrsh	r3, [r3, r1]
 80036ee:	0019      	movs	r1, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	434b      	muls	r3, r1
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2280      	movs	r2, #128	; 0x80
 80036f8:	01d2      	lsls	r2, r2, #7
 80036fa:	4694      	mov	ip, r2
 80036fc:	4463      	add	r3, ip
 80036fe:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	2122      	movs	r1, #34	; 0x22
 8003704:	5652      	ldrsb	r2, [r2, r1]
 8003706:	0011      	movs	r1, r2
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	434a      	muls	r2, r1
 800370c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	7f09      	ldrb	r1, [r1, #28]
 8003712:	0008      	movs	r0, r1
 8003714:	6979      	ldr	r1, [r7, #20]
 8003716:	4341      	muls	r1, r0
 8003718:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800371a:	2080      	movs	r0, #128	; 0x80
 800371c:	0200      	lsls	r0, r0, #8
 800371e:	4684      	mov	ip, r0
 8003720:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8003722:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8003724:	1292      	asrs	r2, r2, #10
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	0389      	lsls	r1, r1, #14
 800372a:	468c      	mov	ip, r1
 800372c:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 800372e:	68f9      	ldr	r1, [r7, #12]
 8003730:	201a      	movs	r0, #26
 8003732:	5e09      	ldrsh	r1, [r1, r0]
 8003734:	434a      	muls	r2, r1
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	0189      	lsls	r1, r1, #6
 800373a:	468c      	mov	ip, r1
 800373c:	4462      	add	r2, ip
 800373e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003740:	4353      	muls	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	13db      	asrs	r3, r3, #15
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	13d2      	asrs	r2, r2, #15
 800374c:	4353      	muls	r3, r2
 800374e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	7e12      	ldrb	r2, [r2, #24]
 8003754:	4353      	muls	r3, r2
 8003756:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da00      	bge.n	8003766 <compensate_humidity+0xa2>
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	22c8      	movs	r2, #200	; 0xc8
 800376c:	0552      	lsls	r2, r2, #21
 800376e:	4293      	cmp	r3, r2
 8003770:	dd01      	ble.n	8003776 <compensate_humidity+0xb2>
 8003772:	23c8      	movs	r3, #200	; 0xc8
 8003774:	055b      	lsls	r3, r3, #21
 8003776:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	131b      	asrs	r3, r3, #12
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b006      	add	sp, #24
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fffed400 	.word	0xfffed400

08003788 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b08d      	sub	sp, #52	; 0x34
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2232      	movs	r2, #50	; 0x32
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	2b60      	cmp	r3, #96	; 0x60
 800379e:	d007      	beq.n	80037b0 <bmp280_read_fixed+0x28>
		if (humidity)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <bmp280_read_fixed+0x24>
			*humidity = 0;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <bmp280_read_fixed+0x32>
 80037b6:	2308      	movs	r3, #8
 80037b8:	e000      	b.n	80037bc <bmp280_read_fixed+0x34>
 80037ba:	2306      	movs	r3, #6
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2218      	movs	r2, #24
 80037c4:	18ba      	adds	r2, r7, r2
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	21f7      	movs	r1, #247	; 0xf7
 80037ca:	f7ff fb9b 	bl	8002f04 <read_data>
 80037ce:	1e03      	subs	r3, r0, #0
 80037d0:	d001      	beq.n	80037d6 <bmp280_read_fixed+0x4e>
		return false;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e041      	b.n	800385a <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80037d6:	2418      	movs	r4, #24
 80037d8:	193b      	adds	r3, r7, r4
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	031a      	lsls	r2, r3, #12
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4313      	orrs	r3, r2
 80037e6:	193a      	adds	r2, r7, r4
 80037e8:	7892      	ldrb	r2, [r2, #2]
 80037ea:	0912      	lsrs	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	4313      	orrs	r3, r2
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80037f2:	193b      	adds	r3, r7, r4
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	031a      	lsls	r2, r3, #12
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	791b      	ldrb	r3, [r3, #4]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4313      	orrs	r3, r2
 8003800:	193a      	adds	r2, r7, r4
 8003802:	7952      	ldrb	r2, [r2, #5]
 8003804:	0912      	lsrs	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	4313      	orrs	r3, r2
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 800380c:	2314      	movs	r3, #20
 800380e:	18fa      	adds	r2, r7, r3
 8003810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff fd6e 	bl	80032f6 <compensate_temperature>
 800381a:	0002      	movs	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	0018      	movs	r0, r3
 8003828:	f7ff fd9a 	bl	8003360 <compensate_pressure>
 800382c:	0002      	movs	r2, r0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8003838:	193b      	adds	r3, r7, r4
 800383a:	799b      	ldrb	r3, [r3, #6]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	193a      	adds	r2, r7, r4
 8003840:	79d2      	ldrb	r2, [r2, #7]
 8003842:	4313      	orrs	r3, r2
 8003844:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	6a39      	ldr	r1, [r7, #32]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	0018      	movs	r0, r3
 800384e:	f7ff ff39 	bl	80036c4 <compensate_humidity>
 8003852:	0002      	movs	r2, r0
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003858:	2301      	movs	r3, #1
}
 800385a:	0018      	movs	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	b00d      	add	sp, #52	; 0x34
 8003860:	bd90      	pop	{r4, r7, pc}
	...

08003864 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <bmp280_read_float+0x1a>
 8003878:	2314      	movs	r3, #20
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	e000      	b.n	8003880 <bmp280_read_float+0x1c>
 800387e:	2300      	movs	r3, #0
 8003880:	2218      	movs	r2, #24
 8003882:	18ba      	adds	r2, r7, r2
 8003884:	211c      	movs	r1, #28
 8003886:	1879      	adds	r1, r7, r1
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff ff7d 	bl	8003788 <bmp280_read_fixed>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d02d      	beq.n	80038ee <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	0018      	movs	r0, r3
 8003896:	f7fd fa6d 	bl	8000d74 <__aeabi_i2f>
 800389a:	1c03      	adds	r3, r0, #0
 800389c:	4916      	ldr	r1, [pc, #88]	; (80038f8 <bmp280_read_float+0x94>)
 800389e:	1c18      	adds	r0, r3, #0
 80038a0:	f7fc feb6 	bl	8000610 <__aeabi_fdiv>
 80038a4:	1c03      	adds	r3, r0, #0
 80038a6:	1c1a      	adds	r2, r3, #0
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fd faa6 	bl	8000e00 <__aeabi_ui2f>
 80038b4:	1c03      	adds	r3, r0, #0
 80038b6:	2187      	movs	r1, #135	; 0x87
 80038b8:	05c9      	lsls	r1, r1, #23
 80038ba:	1c18      	adds	r0, r3, #0
 80038bc:	f7fc fea8 	bl	8000610 <__aeabi_fdiv>
 80038c0:	1c03      	adds	r3, r0, #0
 80038c2:	1c1a      	adds	r2, r3, #0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
		if (humidity)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fd fa95 	bl	8000e00 <__aeabi_ui2f>
 80038d6:	1c03      	adds	r3, r0, #0
 80038d8:	2189      	movs	r1, #137	; 0x89
 80038da:	05c9      	lsls	r1, r1, #23
 80038dc:	1c18      	adds	r0, r3, #0
 80038de:	f7fc fe97 	bl	8000610 <__aeabi_fdiv>
 80038e2:	1c03      	adds	r3, r0, #0
 80038e4:	1c1a      	adds	r2, r3, #0
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
		return true;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <bmp280_read_float+0x8c>
	}

	return false;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	0018      	movs	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b008      	add	sp, #32
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	42c80000 	.word	0x42c80000

080038fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003902:	240c      	movs	r4, #12
 8003904:	193b      	adds	r3, r7, r4
 8003906:	0018      	movs	r0, r3
 8003908:	2314      	movs	r3, #20
 800390a:	001a      	movs	r2, r3
 800390c:	2100      	movs	r1, #0
 800390e:	f003 fc77 	bl	8007200 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	4b3e      	ldr	r3, [pc, #248]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003918:	2180      	movs	r1, #128	; 0x80
 800391a:	0289      	lsls	r1, r1, #10
 800391c:	430a      	orrs	r2, r1
 800391e:	615a      	str	r2, [r3, #20]
 8003920:	4b3a      	ldr	r3, [pc, #232]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	4b36      	ldr	r3, [pc, #216]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	02c9      	lsls	r1, r1, #11
 8003938:	430a      	orrs	r2, r1
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <MX_GPIO_Init+0x110>)
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	02db      	lsls	r3, r3, #11
 8003944:	4013      	ands	r3, r2
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <MX_GPIO_Init+0x110>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	4b2f      	ldr	r3, [pc, #188]	; (8003a0c <MX_GPIO_Init+0x110>)
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0309      	lsls	r1, r1, #12
 8003954:	430a      	orrs	r2, r1
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <MX_GPIO_Init+0x110>)
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	031b      	lsls	r3, r3, #12
 8003960:	4013      	ands	r3, r2
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003966:	2390      	movs	r3, #144	; 0x90
 8003968:	05db      	lsls	r3, r3, #23
 800396a:	2200      	movs	r2, #0
 800396c:	2120      	movs	r1, #32
 800396e:	0018      	movs	r0, r3
 8003970:	f001 fd33 	bl	80053da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 8003974:	2380      	movs	r3, #128	; 0x80
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4825      	ldr	r0, [pc, #148]	; (8003a10 <MX_GPIO_Init+0x114>)
 800397a:	2200      	movs	r2, #0
 800397c:	0019      	movs	r1, r3
 800397e:	f001 fd2c 	bl	80053da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003982:	193b      	adds	r3, r7, r4
 8003984:	2220      	movs	r2, #32
 8003986:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003988:	193b      	adds	r3, r7, r4
 800398a:	2201      	movs	r2, #1
 800398c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	193b      	adds	r3, r7, r4
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	193b      	adds	r3, r7, r4
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800399a:	193a      	adds	r2, r7, r4
 800399c:	2390      	movs	r3, #144	; 0x90
 800399e:	05db      	lsls	r3, r3, #23
 80039a0:	0011      	movs	r1, r2
 80039a2:	0018      	movs	r0, r3
 80039a4:	f001 fb8c 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80039a8:	0021      	movs	r1, r4
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2204      	movs	r2, #4
 80039ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	22c4      	movs	r2, #196	; 0xc4
 80039b4:	0392      	lsls	r2, r2, #14
 80039b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80039be:	000c      	movs	r4, r1
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <MX_GPIO_Init+0x118>)
 80039c4:	0019      	movs	r1, r3
 80039c6:	0010      	movs	r0, r2
 80039c8:	f001 fb7a 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUMP_Pin;
 80039cc:	0021      	movs	r1, r4
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	0052      	lsls	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	2201      	movs	r2, #1
 80039da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	187b      	adds	r3, r7, r1
 80039e4:	2200      	movs	r2, #0
 80039e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PUMP_GPIO_Port, &GPIO_InitStruct);
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <MX_GPIO_Init+0x114>)
 80039ec:	0019      	movs	r1, r3
 80039ee:	0010      	movs	r0, r2
 80039f0:	f001 fb66 	bl	80050c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2006      	movs	r0, #6
 80039fa:	f001 fb2f 	bl	800505c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80039fe:	2006      	movs	r0, #6
 8003a00:	f001 fb41 	bl	8005086 <HAL_NVIC_EnableIRQ>

}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b009      	add	sp, #36	; 0x24
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	48000800 	.word	0x48000800
 8003a14:	48000400 	.word	0x48000400

08003a18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <MX_I2C1_Init+0x78>)
 8003a20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003a22:	4b1a      	ldr	r3, [pc, #104]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <MX_I2C1_Init+0x7c>)
 8003a26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a28:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a54:	0018      	movs	r0, r3
 8003a56:	f001 fcf9 	bl	800544c <HAL_I2C_Init>
 8003a5a:	1e03      	subs	r3, r0, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003a5e:	f000 fc2d 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a64:	2100      	movs	r1, #0
 8003a66:	0018      	movs	r0, r3
 8003a68:	f002 fb42 	bl	80060f0 <HAL_I2CEx_ConfigAnalogFilter>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003a70:	f000 fc24 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a74:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <MX_I2C1_Init+0x74>)
 8003a76:	2100      	movs	r1, #0
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f002 fb85 	bl	8006188 <HAL_I2CEx_ConfigDigitalFilter>
 8003a7e:	1e03      	subs	r3, r0, #0
 8003a80:	d001      	beq.n	8003a86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003a82:	f000 fc1b 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200000dc 	.word	0x200000dc
 8003a90:	40005400 	.word	0x40005400
 8003a94:	2000090e 	.word	0x2000090e

08003a98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <MX_I2C2_Init+0x78>)
 8003aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <MX_I2C2_Init+0x7c>)
 8003aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003aa8:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aae:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f001 fcb9 	bl	800544c <HAL_I2C_Init>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003ade:	f000 fbed 	bl	80042bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f002 fb02 	bl	80060f0 <HAL_I2CEx_ConfigAnalogFilter>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d001      	beq.n	8003af4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003af0:	f000 fbe4 	bl	80042bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <MX_I2C2_Init+0x74>)
 8003af6:	2100      	movs	r1, #0
 8003af8:	0018      	movs	r0, r3
 8003afa:	f002 fb45 	bl	8006188 <HAL_I2CEx_ConfigDigitalFilter>
 8003afe:	1e03      	subs	r3, r0, #0
 8003b00:	d001      	beq.n	8003b06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003b02:	f000 fbdb 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20000128 	.word	0x20000128
 8003b10:	40005800 	.word	0x40005800
 8003b14:	2000090e 	.word	0x2000090e

08003b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b08d      	sub	sp, #52	; 0x34
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	241c      	movs	r4, #28
 8003b22:	193b      	adds	r3, r7, r4
 8003b24:	0018      	movs	r0, r3
 8003b26:	2314      	movs	r3, #20
 8003b28:	001a      	movs	r2, r3
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f003 fb68 	bl	8007200 <memset>
  if(i2cHandle->Instance==I2C1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_I2C_MspInit+0x100>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d132      	bne.n	8003ba0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b3c:	695a      	ldr	r2, [r3, #20]
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b40:	2180      	movs	r1, #128	; 0x80
 8003b42:	02c9      	lsls	r1, r1, #11
 8003b44:	430a      	orrs	r2, r1
 8003b46:	615a      	str	r2, [r3, #20]
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b4a:	695a      	ldr	r2, [r3, #20]
 8003b4c:	2380      	movs	r3, #128	; 0x80
 8003b4e:	02db      	lsls	r3, r3, #11
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
 8003b54:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b56:	0021      	movs	r1, r4
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	22c0      	movs	r2, #192	; 0xc0
 8003b5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2212      	movs	r2, #18
 8003b62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	2201      	movs	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	4a29      	ldr	r2, [pc, #164]	; (8003c20 <HAL_I2C_MspInit+0x108>)
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	0010      	movs	r0, r2
 8003b7e:	f001 fa9f 	bl	80050c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b82:	4b26      	ldr	r3, [pc, #152]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	0389      	lsls	r1, r1, #14
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	61da      	str	r2, [r3, #28]
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003b92:	69da      	ldr	r2, [r3, #28]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	039b      	lsls	r3, r3, #14
 8003b98:	4013      	ands	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003b9e:	e037      	b.n	8003c10 <HAL_I2C_MspInit+0xf8>
  else if(i2cHandle->Instance==I2C2)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_I2C_MspInit+0x10c>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d132      	bne.n	8003c10 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003baa:	4b1c      	ldr	r3, [pc, #112]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003bac:	695a      	ldr	r2, [r3, #20]
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003bb0:	2180      	movs	r1, #128	; 0x80
 8003bb2:	02c9      	lsls	r1, r1, #11
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	615a      	str	r2, [r3, #20]
 8003bb8:	4b18      	ldr	r3, [pc, #96]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	02db      	lsls	r3, r3, #11
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003bc6:	211c      	movs	r1, #28
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	22c0      	movs	r2, #192	; 0xc0
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	2212      	movs	r2, #18
 8003bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	2203      	movs	r2, #3
 8003be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2201      	movs	r2, #1
 8003be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_I2C_MspInit+0x108>)
 8003bec:	0019      	movs	r1, r3
 8003bee:	0010      	movs	r0, r2
 8003bf0:	f001 fa66 	bl	80050c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003bf6:	69da      	ldr	r2, [r3, #28]
 8003bf8:	4b08      	ldr	r3, [pc, #32]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003bfa:	2180      	movs	r1, #128	; 0x80
 8003bfc:	03c9      	lsls	r1, r1, #15
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	61da      	str	r2, [r3, #28]
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_I2C_MspInit+0x104>)
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	2380      	movs	r3, #128	; 0x80
 8003c08:	03db      	lsls	r3, r3, #15
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b00d      	add	sp, #52	; 0x34
 8003c16:	bd90      	pop	{r4, r7, pc}
 8003c18:	40005400 	.word	0x40005400
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	48000400 	.word	0x48000400
 8003c24:	40005800 	.word	0x40005800

08003c28 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003c30:	210f      	movs	r1, #15
 8003c32:	187b      	adds	r3, r7, r1
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
	/* set backlight */
	if(lcd->bl)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2223      	movs	r2, #35	; 0x23
 8003c3c:	5c9b      	ldrb	r3, [r3, r2]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <lcd_init+0x20>
	{
		xpin = BL_PIN;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	2208      	movs	r2, #8
 8003c46:	701a      	strb	r2, [r3, #0]
	}

	/* init sequence */
	HAL_Delay(40);
 8003c48:	2028      	movs	r0, #40	; 0x28
 8003c4a:	f000 fd85 	bl	8004758 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7818      	ldrb	r0, [r3, #0]
 8003c52:	240f      	movs	r4, #15
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	001a      	movs	r2, r3
 8003c5a:	2130      	movs	r1, #48	; 0x30
 8003c5c:	f000 f82e 	bl	8003cbc <lcd_write>
	HAL_Delay(5);
 8003c60:	2005      	movs	r0, #5
 8003c62:	f000 fd79 	bl	8004758 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7818      	ldrb	r0, [r3, #0]
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	001a      	movs	r2, r3
 8003c70:	2130      	movs	r1, #48	; 0x30
 8003c72:	f000 f823 	bl	8003cbc <lcd_write>
	HAL_Delay(1);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f000 fd6e 	bl	8004758 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7818      	ldrb	r0, [r3, #0]
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	001a      	movs	r2, r3
 8003c86:	2130      	movs	r1, #48	; 0x30
 8003c88:	f000 f818 	bl	8003cbc <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	7818      	ldrb	r0, [r3, #0]
 8003c90:	193b      	adds	r3, r7, r4
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	001a      	movs	r2, r3
 8003c96:	2102      	movs	r1, #2
 8003c98:	f000 f810 	bl	8003cbc <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	7818      	ldrb	r0, [r3, #0]
 8003ca0:	193b      	adds	r3, r7, r4
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	001a      	movs	r2, r3
 8003ca6:	210c      	movs	r1, #12
 8003ca8:	f000 f808 	bl	8003cbc <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f8ce 	bl	8003e50 <lcd_clear>

}
 8003cb4:	46c0      	nop			; (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	b005      	add	sp, #20
 8003cba:	bd90      	pop	{r4, r7, pc}

08003cbc <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8003cbc:	b590      	push	{r4, r7, lr}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	0004      	movs	r4, r0
 8003cc4:	0008      	movs	r0, r1
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	1dfb      	adds	r3, r7, #7
 8003cca:	1c22      	adds	r2, r4, #0
 8003ccc:	701a      	strb	r2, [r3, #0]
 8003cce:	1dbb      	adds	r3, r7, #6
 8003cd0:	1c02      	adds	r2, r0, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	1d7b      	adds	r3, r7, #5
 8003cd6:	1c0a      	adds	r2, r1, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8003cda:	1dbb      	adds	r3, r7, #6
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	220f      	movs	r2, #15
 8003ce0:	4393      	bics	r3, r2
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	1d7b      	adds	r3, r7, #5
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2204      	movs	r2, #4
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	210c      	movs	r1, #12
 8003cf4:	187b      	adds	r3, r7, r1
 8003cf6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | xpin;
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b25b      	sxtb	r3, r3
 8003cfe:	220f      	movs	r2, #15
 8003d00:	4393      	bics	r3, r2
 8003d02:	b25a      	sxtb	r2, r3
 8003d04:	1d7b      	adds	r3, r7, #5
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	1d7b      	adds	r3, r7, #5
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2204      	movs	r2, #4
 8003d26:	4313      	orrs	r3, r2
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	187b      	adds	r3, r7, r1
 8003d2c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4) | xpin;
 8003d2e:	1dbb      	adds	r3, r7, #6
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	b25a      	sxtb	r2, r3
 8003d36:	1d7b      	adds	r3, r7, #5
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b25b      	sxtb	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b25b      	sxtb	r3, r3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	0008      	movs	r0, r1
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	70da      	strb	r2, [r3, #3]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8003d48:	1dfb      	adds	r3, r7, #7
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b299      	uxth	r1, r3
 8003d4e:	183a      	adds	r2, r7, r0
 8003d50:	4806      	ldr	r0, [pc, #24]	; (8003d6c <lcd_write+0xb0>)
 8003d52:	2364      	movs	r3, #100	; 0x64
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2304      	movs	r3, #4
 8003d58:	f001 fc0e 	bl	8005578 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8003d5c:	2005      	movs	r0, #5
 8003d5e:	f000 fcfb 	bl	8004758 <HAL_Delay>
}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b005      	add	sp, #20
 8003d68:	bd90      	pop	{r4, r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	200000dc 	.word	0x200000dc

08003d70 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8003d78:	210f      	movs	r1, #15
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	230e      	movs	r3, #14
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2223      	movs	r2, #35	; 0x23
 8003d8c:	5c9b      	ldrb	r3, [r3, r2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <lcd_display+0x28>
	{
		xpin = BL_PIN;
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2208      	movs	r2, #8
 8003d96:	701a      	strb	r2, [r3, #0]
	}

	lcd_clear(lcd);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f858 	bl	8003e50 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7818      	ldrb	r0, [r3, #0]
 8003da4:	230f      	movs	r3, #15
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	001a      	movs	r2, r3
 8003dac:	2180      	movs	r1, #128	; 0x80
 8003dae:	f7ff ff85 	bl	8003cbc <lcd_write>
	while(lcd->f_line[i])
 8003db2:	e015      	b.n	8003de0 <lcd_display+0x70>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	7818      	ldrb	r0, [r3, #0]
 8003db8:	240e      	movs	r4, #14
 8003dba:	193b      	adds	r3, r7, r4
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	7859      	ldrb	r1, [r3, #1]
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	001a      	movs	r2, r3
 8003dd2:	f7ff ff73 	bl	8003cbc <lcd_write>
		i++;
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	3201      	adds	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
	while(lcd->f_line[i])
 8003de0:	210e      	movs	r1, #14
 8003de2:	187b      	adds	r3, r7, r1
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e1      	bne.n	8003db4 <lcd_display+0x44>
	}

	/* send second line data */
	i = 0;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	7818      	ldrb	r0, [r3, #0]
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	001a      	movs	r2, r3
 8003e02:	21c0      	movs	r1, #192	; 0xc0
 8003e04:	f7ff ff5a 	bl	8003cbc <lcd_write>
	while(lcd->s_line[i])
 8003e08:	e015      	b.n	8003e36 <lcd_display+0xc6>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	7818      	ldrb	r0, [r3, #0]
 8003e0e:	240e      	movs	r4, #14
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	18d3      	adds	r3, r2, r3
 8003e18:	7c99      	ldrb	r1, [r3, #18]
 8003e1a:	230f      	movs	r3, #15
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4313      	orrs	r3, r2
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	001a      	movs	r2, r3
 8003e28:	f7ff ff48 	bl	8003cbc <lcd_write>
		i++;
 8003e2c:	193b      	adds	r3, r7, r4
 8003e2e:	781a      	ldrb	r2, [r3, #0]
 8003e30:	193b      	adds	r3, r7, r4
 8003e32:	3201      	adds	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
	while(lcd->s_line[i])
 8003e36:	230e      	movs	r3, #14
 8003e38:	18fb      	adds	r3, r7, r3
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	18d3      	adds	r3, r2, r3
 8003e40:	7c9b      	ldrb	r3, [r3, #18]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1e1      	bne.n	8003e0a <lcd_display+0x9a>
	}
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b005      	add	sp, #20
 8003e4e:	bd90      	pop	{r4, r7, pc}

08003e50 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003e58:	210f      	movs	r1, #15
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2223      	movs	r2, #35	; 0x23
 8003e64:	5c9b      	ldrb	r3, [r3, r2]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <lcd_clear+0x20>
	{
		xpin = BL_PIN;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	701a      	strb	r2, [r3, #0]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	7818      	ldrb	r0, [r3, #0]
 8003e74:	230f      	movs	r3, #15
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	f7ff ff1d 	bl	8003cbc <lcd_write>
}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b004      	add	sp, #16
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <clamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// helper functions
uint16_t clamp(float input, uint16_t min, uint16_t max) {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b082      	sub	sp, #8
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	0008      	movs	r0, r1
 8003e94:	0011      	movs	r1, r2
 8003e96:	1cbb      	adds	r3, r7, #2
 8003e98:	1c02      	adds	r2, r0, #0
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	003b      	movs	r3, r7
 8003e9e:	1c0a      	adds	r2, r1, #0
 8003ea0:	801a      	strh	r2, [r3, #0]
	return input < min ? min : input > max ? max : input;
 8003ea2:	1cbb      	adds	r3, r7, #2
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7fc ff64 	bl	8000d74 <__aeabi_i2f>
 8003eac:	1c03      	adds	r3, r0, #0
 8003eae:	1c19      	adds	r1, r3, #0
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fc fb03 	bl	80004bc <__aeabi_fcmplt>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d00b      	beq.n	8003ed2 <clamp+0x48>
 8003eba:	1cbb      	adds	r3, r7, #2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fc ff58 	bl	8000d74 <__aeabi_i2f>
 8003ec4:	1c03      	adds	r3, r0, #0
 8003ec6:	1c18      	adds	r0, r3, #0
 8003ec8:	f7fc fb6c 	bl	80005a4 <__aeabi_f2uiz>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	e01c      	b.n	8003f0c <clamp+0x82>
 8003ed2:	003b      	movs	r3, r7
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fc ff4c 	bl	8000d74 <__aeabi_i2f>
 8003edc:	1c03      	adds	r3, r0, #0
 8003ede:	1c19      	adds	r1, r3, #0
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7fc faff 	bl	80004e4 <__aeabi_fcmpgt>
 8003ee6:	1e03      	subs	r3, r0, #0
 8003ee8:	d00b      	beq.n	8003f02 <clamp+0x78>
 8003eea:	003b      	movs	r3, r7
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f7fc ff40 	bl	8000d74 <__aeabi_i2f>
 8003ef4:	1c03      	adds	r3, r0, #0
 8003ef6:	1c18      	adds	r0, r3, #0
 8003ef8:	f7fc fb54 	bl	80005a4 <__aeabi_f2uiz>
 8003efc:	0003      	movs	r3, r0
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	e004      	b.n	8003f0c <clamp+0x82>
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fc fb4e 	bl	80005a4 <__aeabi_f2uiz>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	b29b      	uxth	r3, r3
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <map>:
float map(uint16_t current, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max) {
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	0005      	movs	r5, r0
 8003f1c:	000c      	movs	r4, r1
 8003f1e:	0010      	movs	r0, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	1dbb      	adds	r3, r7, #6
 8003f24:	1c2a      	adds	r2, r5, #0
 8003f26:	801a      	strh	r2, [r3, #0]
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	1c22      	adds	r2, r4, #0
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	1cbb      	adds	r3, r7, #2
 8003f30:	1c02      	adds	r2, r0, #0
 8003f32:	801a      	strh	r2, [r3, #0]
 8003f34:	003b      	movs	r3, r7
 8003f36:	1c0a      	adds	r2, r1, #0
 8003f38:	801a      	strh	r2, [r3, #0]
	float mapped = ((current - in_min) * (out_max - out_min))
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	1ad2      	subs	r2, r2, r3
 8003f44:	2420      	movs	r4, #32
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	8819      	ldrh	r1, [r3, #0]
 8003f4a:	003b      	movs	r3, r7
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	4353      	muls	r3, r2
 8003f52:	0018      	movs	r0, r3
			/ (in_max - in_min) + out_min;
 8003f54:	1cbb      	adds	r3, r7, #2
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	0019      	movs	r1, r3
 8003f60:	f7fc f970 	bl	8000244 <__divsi3>
 8003f64:	0003      	movs	r3, r0
 8003f66:	001a      	movs	r2, r3
 8003f68:	003b      	movs	r3, r7
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	18d3      	adds	r3, r2, r3
	float mapped = ((current - in_min) * (out_max - out_min))
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7fc ff00 	bl	8000d74 <__aeabi_i2f>
 8003f74:	1c03      	adds	r3, r0, #0
 8003f76:	60fb      	str	r3, [r7, #12]
	return clamp(mapped, out_min, out_max);
 8003f78:	193b      	adds	r3, r7, r4
 8003f7a:	881a      	ldrh	r2, [r3, #0]
 8003f7c:	003b      	movs	r3, r7
 8003f7e:	8819      	ldrh	r1, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1c18      	adds	r0, r3, #0
 8003f84:	f7ff ff81 	bl	8003e8a <clamp>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fc ff38 	bl	8000e00 <__aeabi_ui2f>
 8003f90:	1c03      	adds	r3, r0, #0
}
 8003f92:	1c18      	adds	r0, r3, #0
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f9c:	b590      	push	{r4, r7, lr}
 8003f9e:	b089      	sub	sp, #36	; 0x24
 8003fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fa2:	f000 fb75 	bl	8004690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fa6:	f000 f8c9 	bl	800413c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003faa:	f7ff fca7 	bl	80038fc <MX_GPIO_Init>
  MX_ADC_Init();
 8003fae:	f7fe feb5 	bl	8002d1c <MX_ADC_Init>
  MX_I2C1_Init();
 8003fb2:	f7ff fd31 	bl	8003a18 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003fb6:	f7ff fd6f 	bl	8003a98 <MX_I2C2_Init>
  MX_TIM16_Init();
 8003fba:	f000 faa5 	bl	8004508 <MX_TIM16_Init>
  MX_TIM17_Init();
 8003fbe:	f000 facd 	bl	800455c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// init display (i2c)

	HAL_ADC_Start(&hadc);
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <main+0x160>)
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 fd2b 	bl	8004a20 <HAL_ADC_Start>
	disp.addr = (0x27 << 1);
 8003fca:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <main+0x164>)
 8003fcc:	224e      	movs	r2, #78	; 0x4e
 8003fce:	701a      	strb	r2, [r3, #0]
	disp.bl = true;
 8003fd0:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <main+0x164>)
 8003fd2:	2223      	movs	r2, #35	; 0x23
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]
	lcd_init(&disp);
 8003fd8:	4b49      	ldr	r3, [pc, #292]	; (8004100 <main+0x164>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff fe24 	bl	8003c28 <lcd_init>

	// init bosch sensor (i2c)
	bmp280_init_default_params(&bmp280.params);
 8003fe0:	4b48      	ldr	r3, [pc, #288]	; (8004104 <main+0x168>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f7fe ff3c 	bl	8002e60 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <main+0x16c>)
 8003fea:	2276      	movs	r2, #118	; 0x76
 8003fec:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c2;
 8003fee:	4b46      	ldr	r3, [pc, #280]	; (8004108 <main+0x16c>)
 8003ff0:	4a46      	ldr	r2, [pc, #280]	; (800410c <main+0x170>)
 8003ff2:	629a      	str	r2, [r3, #40]	; 0x28

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8003ff4:	e004      	b.n	8004000 <main+0x64>
		HAL_Delay(2000);
 8003ff6:	23fa      	movs	r3, #250	; 0xfa
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fbac 	bl	8004758 <HAL_Delay>
	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8004000:	4a40      	ldr	r2, [pc, #256]	; (8004104 <main+0x168>)
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <main+0x16c>)
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff f8be 	bl	8003188 <bmp280_init>
 800400c:	0003      	movs	r3, r0
 800400e:	001a      	movs	r2, r3
 8004010:	2301      	movs	r3, #1
 8004012:	4053      	eors	r3, r2
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ed      	bne.n	8003ff6 <main+0x5a>
	}
	HAL_TIM_Base_Start_IT(&htim16);
 800401a:	4b3d      	ldr	r3, [pc, #244]	; (8004110 <main+0x174>)
 800401c:	0018      	movs	r0, r3
 800401e:	f002 fe69 	bl	8006cf4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_ADC_PollForConversion(&hadc, 1000);
 8004022:	23fa      	movs	r3, #250	; 0xfa
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <main+0x160>)
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f000 fd4c 	bl	8004ac8 <HAL_ADC_PollForConversion>
		soil_humidity = HAL_ADC_GetValue(&hadc);
 8004030:	4b32      	ldr	r3, [pc, #200]	; (80040fc <main+0x160>)
 8004032:	0018      	movs	r0, r3
 8004034:	f000 fde0 	bl	8004bf8 <HAL_ADC_GetValue>
 8004038:	0002      	movs	r2, r0
 800403a:	4b36      	ldr	r3, [pc, #216]	; (8004114 <main+0x178>)
 800403c:	601a      	str	r2, [r3, #0]

		char soil_value_s[6];
		gcvt(100 - map(soil_humidity, 1400, 4095, 0, 100), 4, soil_value_s);
 800403e:	4b35      	ldr	r3, [pc, #212]	; (8004114 <main+0x178>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	b298      	uxth	r0, r3
 8004044:	4a34      	ldr	r2, [pc, #208]	; (8004118 <main+0x17c>)
 8004046:	23af      	movs	r3, #175	; 0xaf
 8004048:	00d9      	lsls	r1, r3, #3
 800404a:	2364      	movs	r3, #100	; 0x64
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	f7ff ff60 	bl	8003f14 <map>
 8004054:	1c03      	adds	r3, r0, #0
 8004056:	1c19      	adds	r1, r3, #0
 8004058:	4830      	ldr	r0, [pc, #192]	; (800411c <main+0x180>)
 800405a:	f7fc fca3 	bl	80009a4 <__aeabi_fsub>
 800405e:	1c03      	adds	r3, r0, #0
 8004060:	1c18      	adds	r0, r3, #0
 8004062:	f7fe fd03 	bl	8002a6c <__aeabi_f2d>
 8004066:	2410      	movs	r4, #16
 8004068:	193b      	adds	r3, r7, r4
 800406a:	2204      	movs	r2, #4
 800406c:	f003 f878 	bl	8007160 <gcvt>
		sprintf((char*) disp.f_line, "H: %s%%", soil_value_s);
 8004070:	193a      	adds	r2, r7, r4
 8004072:	492b      	ldr	r1, [pc, #172]	; (8004120 <main+0x184>)
 8004074:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <main+0x188>)
 8004076:	0018      	movs	r0, r3
 8004078:	f003 f8ca 	bl	8007210 <siprintf>
		lcd_display(&disp);
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <main+0x164>)
 800407e:	0018      	movs	r0, r3
 8004080:	f7ff fe76 	bl	8003d70 <lcd_display>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8004084:	e004      	b.n	8004090 <main+0xf4>
			HAL_Delay(2000);
 8004086:	23fa      	movs	r3, #250	; 0xfa
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	0018      	movs	r0, r3
 800408c:	f000 fb64 	bl	8004758 <HAL_Delay>
		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <main+0x18c>)
 8004092:	4a26      	ldr	r2, [pc, #152]	; (800412c <main+0x190>)
 8004094:	4926      	ldr	r1, [pc, #152]	; (8004130 <main+0x194>)
 8004096:	481c      	ldr	r0, [pc, #112]	; (8004108 <main+0x16c>)
 8004098:	f7ff fbe4 	bl	8003864 <bmp280_read_float>
 800409c:	0003      	movs	r3, r0
 800409e:	001a      	movs	r2, r3
 80040a0:	2301      	movs	r3, #1
 80040a2:	4053      	eors	r3, r2
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ed      	bne.n	8004086 <main+0xea>
		}
		char temperature_s[6];
		gcvt(temperature, 2, temperature_s);
 80040aa:	4b21      	ldr	r3, [pc, #132]	; (8004130 <main+0x194>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1c18      	adds	r0, r3, #0
 80040b0:	f7fe fcdc 	bl	8002a6c <__aeabi_f2d>
 80040b4:	2408      	movs	r4, #8
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	2202      	movs	r2, #2
 80040ba:	f003 f851 	bl	8007160 <gcvt>
		char pressure_s[6];
		gcvt(pressure / 100, 4, pressure_s);
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <main+0x190>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4916      	ldr	r1, [pc, #88]	; (800411c <main+0x180>)
 80040c4:	1c18      	adds	r0, r3, #0
 80040c6:	f7fc faa3 	bl	8000610 <__aeabi_fdiv>
 80040ca:	1c03      	adds	r3, r0, #0
 80040cc:	1c18      	adds	r0, r3, #0
 80040ce:	f7fe fccd 	bl	8002a6c <__aeabi_f2d>
 80040d2:	003b      	movs	r3, r7
 80040d4:	2204      	movs	r2, #4
 80040d6:	f003 f843 	bl	8007160 <gcvt>

		sprintf((char*) disp.s_line, "T:%sC P:%shPa", temperature_s,
 80040da:	003b      	movs	r3, r7
 80040dc:	193a      	adds	r2, r7, r4
 80040de:	4915      	ldr	r1, [pc, #84]	; (8004134 <main+0x198>)
 80040e0:	4815      	ldr	r0, [pc, #84]	; (8004138 <main+0x19c>)
 80040e2:	f003 f895 	bl	8007210 <siprintf>
				pressure_s);
		lcd_display(&disp);
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <main+0x164>)
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fe41 	bl	8003d70 <lcd_display>

		HAL_Delay(1000);
 80040ee:	23fa      	movs	r3, #250	; 0xfa
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 fb30 	bl	8004758 <HAL_Delay>
	while (1) {
 80040f8:	e793      	b.n	8004022 <main+0x86>
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	2000009c 	.word	0x2000009c
 8004100:	200001cc 	.word	0x200001cc
 8004104:	200001c4 	.word	0x200001c4
 8004108:	20000198 	.word	0x20000198
 800410c:	20000128 	.word	0x20000128
 8004110:	20000238 	.word	0x20000238
 8004114:	20000000 	.word	0x20000000
 8004118:	00000fff 	.word	0x00000fff
 800411c:	42c80000 	.word	0x42c80000
 8004120:	08009d68 	.word	0x08009d68
 8004124:	200001cd 	.word	0x200001cd
 8004128:	2000017c 	.word	0x2000017c
 800412c:	20000178 	.word	0x20000178
 8004130:	20000174 	.word	0x20000174
 8004134:	08009d70 	.word	0x08009d70
 8004138:	200001de 	.word	0x200001de

0800413c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b095      	sub	sp, #84	; 0x54
 8004140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004142:	2420      	movs	r4, #32
 8004144:	193b      	adds	r3, r7, r4
 8004146:	0018      	movs	r0, r3
 8004148:	2330      	movs	r3, #48	; 0x30
 800414a:	001a      	movs	r2, r3
 800414c:	2100      	movs	r1, #0
 800414e:	f003 f857 	bl	8007200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004152:	2310      	movs	r3, #16
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	0018      	movs	r0, r3
 8004158:	2310      	movs	r3, #16
 800415a:	001a      	movs	r2, r3
 800415c:	2100      	movs	r1, #0
 800415e:	f003 f84f 	bl	8007200 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004162:	003b      	movs	r3, r7
 8004164:	0018      	movs	r0, r3
 8004166:	2310      	movs	r3, #16
 8004168:	001a      	movs	r2, r3
 800416a:	2100      	movs	r1, #0
 800416c:	f003 f848 	bl	8007200 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004170:	0021      	movs	r1, r4
 8004172:	187b      	adds	r3, r7, r1
 8004174:	2212      	movs	r2, #18
 8004176:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004178:	187b      	adds	r3, r7, r1
 800417a:	2201      	movs	r2, #1
 800417c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800417e:	187b      	adds	r3, r7, r1
 8004180:	2201      	movs	r2, #1
 8004182:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004184:	187b      	adds	r3, r7, r1
 8004186:	2210      	movs	r2, #16
 8004188:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800418a:	187b      	adds	r3, r7, r1
 800418c:	2210      	movs	r2, #16
 800418e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004190:	187b      	adds	r3, r7, r1
 8004192:	2200      	movs	r2, #0
 8004194:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004196:	187b      	adds	r3, r7, r1
 8004198:	0018      	movs	r0, r3
 800419a:	f002 f841 	bl	8006220 <HAL_RCC_OscConfig>
 800419e:	1e03      	subs	r3, r0, #0
 80041a0:	d001      	beq.n	80041a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80041a2:	f000 f88b 	bl	80042bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041a6:	2110      	movs	r1, #16
 80041a8:	187b      	adds	r3, r7, r1
 80041aa:	2207      	movs	r2, #7
 80041ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2100      	movs	r1, #0
 80041c4:	0018      	movs	r0, r3
 80041c6:	f002 fb45 	bl	8006854 <HAL_RCC_ClockConfig>
 80041ca:	1e03      	subs	r3, r0, #0
 80041cc:	d001      	beq.n	80041d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80041ce:	f000 f875 	bl	80042bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041d2:	003b      	movs	r3, r7
 80041d4:	2220      	movs	r2, #32
 80041d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80041d8:	003b      	movs	r3, r7
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041de:	003b      	movs	r3, r7
 80041e0:	0018      	movs	r0, r3
 80041e2:	f002 fc69 	bl	8006ab8 <HAL_RCCEx_PeriphCLKConfig>
 80041e6:	1e03      	subs	r3, r0, #0
 80041e8:	d001      	beq.n	80041ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80041ea:	f000 f867 	bl	80042bc <Error_Handler>
  }
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	46bd      	mov	sp, r7
 80041f2:	b015      	add	sp, #84	; 0x54
 80041f4:	bd90      	pop	{r4, r7, pc}
	...

080041f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	0002      	movs	r2, r0
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	801a      	strh	r2, [r3, #0]
	// water via button
	while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8004204:	e006      	b.n	8004214 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	480c      	ldr	r0, [pc, #48]	; (800423c <HAL_GPIO_EXTI_Callback+0x44>)
 800420c:	2200      	movs	r2, #0
 800420e:	0019      	movs	r1, r3
 8004210:	f001 f8e3 	bl	80053da <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_SET) {
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_GPIO_EXTI_Callback+0x48>)
 8004216:	2104      	movs	r1, #4
 8004218:	0018      	movs	r0, r3
 800421a:	f001 f8c1 	bl	80053a0 <HAL_GPIO_ReadPin>
 800421e:	0003      	movs	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d0f0      	beq.n	8004206 <HAL_GPIO_EXTI_Callback+0xe>
	}
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4804      	ldr	r0, [pc, #16]	; (800423c <HAL_GPIO_EXTI_Callback+0x44>)
 800422a:	2201      	movs	r2, #1
 800422c:	0019      	movs	r1, r3
 800422e:	f001 f8d4 	bl	80053da <HAL_GPIO_WritePin>
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	48000800 	.word	0x48000800
 8004240:	48000400 	.word	0x48000400

08004244 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	// time to check soil
	if (htim->Instance == TIM16) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a14      	ldr	r2, [pc, #80]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d110      	bne.n	8004278 <HAL_TIM_PeriodElapsedCallback+0x34>
		// 4095 - without water
		// 1400 - in water
		if (soil_humidity > MIN_SOIL_HUMIDITY) {
 8004256:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a14      	ldr	r2, [pc, #80]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x68>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d91c      	bls.n	800429a <HAL_TIM_PeriodElapsedCallback+0x56>
			HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_SET);
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4812      	ldr	r0, [pc, #72]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004266:	2201      	movs	r2, #1
 8004268:	0019      	movs	r1, r3
 800426a:	f001 f8b6 	bl	80053da <HAL_GPIO_WritePin>
			HAL_TIM_Base_Start_IT(&htim17);
 800426e:	4b11      	ldr	r3, [pc, #68]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004270:	0018      	movs	r0, r3
 8004272:	f002 fd3f 	bl	8006cf4 <HAL_TIM_Base_Start_IT>
		}
	}else if (htim->Instance == TIM17) {
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
		HAL_TIM_Base_Stop_IT(&htim17);
	}
	return;
 8004276:	e010      	b.n	800429a <HAL_TIM_PeriodElapsedCallback+0x56>
	}else if (htim->Instance == TIM17) {
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10b      	bne.n	800429a <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, GPIO_PIN_RESET);
 8004282:	2380      	movs	r3, #128	; 0x80
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	480a      	ldr	r0, [pc, #40]	; (80042b0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004288:	2200      	movs	r2, #0
 800428a:	0019      	movs	r1, r3
 800428c:	f001 f8a5 	bl	80053da <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim17);
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004292:	0018      	movs	r0, r3
 8004294:	f002 fd7a 	bl	8006d8c <HAL_TIM_Base_Stop_IT>
	return;
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46c0      	nop			; (mov r8, r8)
}
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	40014400 	.word	0x40014400
 80042a8:	20000000 	.word	0x20000000
 80042ac:	00000dac 	.word	0x00000dac
 80042b0:	48000800 	.word	0x48000800
 80042b4:	200001f0 	.word	0x200001f0
 80042b8:	40014800 	.word	0x40014800

080042bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80042c0:	b672      	cpsid	i
}
 80042c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80042c4:	e7fe      	b.n	80042c4 <Error_Handler+0x8>
	...

080042c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_MspInit+0x44>)
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_MspInit+0x44>)
 80042d4:	2101      	movs	r1, #1
 80042d6:	430a      	orrs	r2, r1
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_MspInit+0x44>)
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2201      	movs	r2, #1
 80042e0:	4013      	ands	r3, r2
 80042e2:	607b      	str	r3, [r7, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <HAL_MspInit+0x44>)
 80042e8:	69da      	ldr	r2, [r3, #28]
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_MspInit+0x44>)
 80042ec:	2180      	movs	r1, #128	; 0x80
 80042ee:	0549      	lsls	r1, r1, #21
 80042f0:	430a      	orrs	r2, r1
 80042f2:	61da      	str	r2, [r3, #28]
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_MspInit+0x44>)
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	055b      	lsls	r3, r3, #21
 80042fc:	4013      	ands	r3, r2
 80042fe:	603b      	str	r3, [r7, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b002      	add	sp, #8
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	40021000 	.word	0x40021000

08004310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <NMI_Handler+0x4>

08004316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800431a:	e7fe      	b.n	800431a <HardFault_Handler+0x4>

0800431c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004334:	f000 f9f4 	bl	8004720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004342:	2004      	movs	r0, #4
 8004344:	f001 f866 	bl	8005414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004348:	46c0      	nop			; (mov r8, r8)
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <TIM16_IRQHandler+0x14>)
 8004356:	0018      	movs	r0, r3
 8004358:	f002 fd46 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	20000238 	.word	0x20000238

08004368 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <TIM17_IRQHandler+0x14>)
 800436e:	0018      	movs	r0, r3
 8004370:	f002 fd3a 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	200001f0 	.word	0x200001f0

08004380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	return 1;
 8004384:	2301      	movs	r3, #1
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <_kill>:

int _kill(int pid, int sig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004396:	f002 ff09 	bl	80071ac <__errno>
 800439a:	0003      	movs	r3, r0
 800439c:	2216      	movs	r2, #22
 800439e:	601a      	str	r2, [r3, #0]
	return -1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	425b      	negs	r3, r3
}
 80043a4:	0018      	movs	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}

080043ac <_exit>:

void _exit (int status)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043b4:	2301      	movs	r3, #1
 80043b6:	425a      	negs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0011      	movs	r1, r2
 80043bc:	0018      	movs	r0, r3
 80043be:	f7ff ffe5 	bl	800438c <_kill>
	while (1) {}		/* Make sure we hang here */
 80043c2:	e7fe      	b.n	80043c2 <_exit+0x16>

080043c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e00a      	b.n	80043ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043d6:	e000      	b.n	80043da <_read+0x16>
 80043d8:	bf00      	nop
 80043da:	0001      	movs	r1, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	60ba      	str	r2, [r7, #8]
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3301      	adds	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dbf0      	blt.n	80043d6 <_read+0x12>
	}

return len;
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	0018      	movs	r0, r3
 80043f8:	46bd      	mov	sp, r7
 80043fa:	b006      	add	sp, #24
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e009      	b.n	8004424 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	60ba      	str	r2, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	0018      	movs	r0, r3
 800441a:	e000      	b.n	800441e <_write+0x20>
 800441c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	dbf1      	blt.n	8004410 <_write+0x12>
	}
	return len;
 800442c:	687b      	ldr	r3, [r7, #4]
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b006      	add	sp, #24
 8004434:	bd80      	pop	{r7, pc}

08004436 <_close>:

int _close(int file)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b082      	sub	sp, #8
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
	return -1;
 800443e:	2301      	movs	r3, #1
 8004440:	425b      	negs	r3, r3
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bd80      	pop	{r7, pc}

0800444a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	0192      	lsls	r2, r2, #6
 800445a:	605a      	str	r2, [r3, #4]
	return 0;
 800445c:	2300      	movs	r3, #0
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b002      	add	sp, #8
 8004464:	bd80      	pop	{r7, pc}

08004466 <_isatty>:

int _isatty(int file)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	return 1;
 800446e:	2301      	movs	r3, #1
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}

08004478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
	return 0;
 8004484:	2300      	movs	r3, #0
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b004      	add	sp, #16
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004498:	4a14      	ldr	r2, [pc, #80]	; (80044ec <_sbrk+0x5c>)
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <_sbrk+0x60>)
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044a4:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <_sbrk+0x64>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <_sbrk+0x64>)
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <_sbrk+0x68>)
 80044b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <_sbrk+0x64>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	18d3      	adds	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d207      	bcs.n	80044d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044c0:	f002 fe74 	bl	80071ac <__errno>
 80044c4:	0003      	movs	r3, r0
 80044c6:	220c      	movs	r2, #12
 80044c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	425b      	negs	r3, r3
 80044ce:	e009      	b.n	80044e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <_sbrk+0x64>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044d6:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <_sbrk+0x64>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	18d2      	adds	r2, r2, r3
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <_sbrk+0x64>)
 80044e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b006      	add	sp, #24
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20002000 	.word	0x20002000
 80044f0:	00000400 	.word	0x00000400
 80044f4:	20000090 	.word	0x20000090
 80044f8:	20000298 	.word	0x20000298

080044fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <MX_TIM16_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <MX_TIM16_Init+0x44>)
 800450e:	4a10      	ldr	r2, [pc, #64]	; (8004550 <MX_TIM16_Init+0x48>)
 8004510:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 799;
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <MX_TIM16_Init+0x44>)
 8004514:	4a0f      	ldr	r2, [pc, #60]	; (8004554 <MX_TIM16_Init+0x4c>)
 8004516:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004518:	4b0c      	ldr	r3, [pc, #48]	; (800454c <MX_TIM16_Init+0x44>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 60999;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <MX_TIM16_Init+0x44>)
 8004520:	4a0d      	ldr	r2, [pc, #52]	; (8004558 <MX_TIM16_Init+0x50>)
 8004522:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <MX_TIM16_Init+0x44>)
 8004526:	2200      	movs	r2, #0
 8004528:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 1;
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <MX_TIM16_Init+0x44>)
 800452c:	2201      	movs	r2, #1
 800452e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <MX_TIM16_Init+0x44>)
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <MX_TIM16_Init+0x44>)
 8004538:	0018      	movs	r0, r3
 800453a:	f002 fb8b 	bl	8006c54 <HAL_TIM_Base_Init>
 800453e:	1e03      	subs	r3, r0, #0
 8004540:	d001      	beq.n	8004546 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8004542:	f7ff febb 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000238 	.word	0x20000238
 8004550:	40014400 	.word	0x40014400
 8004554:	0000031f 	.word	0x0000031f
 8004558:	0000ee47 	.word	0x0000ee47

0800455c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <MX_TIM17_Init+0x44>)
 8004562:	4a10      	ldr	r2, [pc, #64]	; (80045a4 <MX_TIM17_Init+0x48>)
 8004564:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 799;
 8004566:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <MX_TIM17_Init+0x44>)
 8004568:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <MX_TIM17_Init+0x4c>)
 800456a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800456c:	4b0c      	ldr	r3, [pc, #48]	; (80045a0 <MX_TIM17_Init+0x44>)
 800456e:	2200      	movs	r2, #0
 8004570:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 10099;
 8004572:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <MX_TIM17_Init+0x44>)
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <MX_TIM17_Init+0x50>)
 8004576:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <MX_TIM17_Init+0x44>)
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 1;
 800457e:	4b08      	ldr	r3, [pc, #32]	; (80045a0 <MX_TIM17_Init+0x44>)
 8004580:	2201      	movs	r2, #1
 8004582:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <MX_TIM17_Init+0x44>)
 8004586:	2200      	movs	r2, #0
 8004588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <MX_TIM17_Init+0x44>)
 800458c:	0018      	movs	r0, r3
 800458e:	f002 fb61 	bl	8006c54 <HAL_TIM_Base_Init>
 8004592:	1e03      	subs	r3, r0, #0
 8004594:	d001      	beq.n	800459a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8004596:	f7ff fe91 	bl	80042bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200001f0 	.word	0x200001f0
 80045a4:	40014800 	.word	0x40014800
 80045a8:	0000031f 	.word	0x0000031f
 80045ac:	00002773 	.word	0x00002773

080045b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1c      	ldr	r2, [pc, #112]	; (8004630 <HAL_TIM_Base_MspInit+0x80>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d116      	bne.n	80045f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80045c2:	4b1c      	ldr	r3, [pc, #112]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 80045c8:	2180      	movs	r1, #128	; 0x80
 80045ca:	0289      	lsls	r1, r1, #10
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	029b      	lsls	r3, r3, #10
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80045de:	2200      	movs	r2, #0
 80045e0:	2100      	movs	r1, #0
 80045e2:	2015      	movs	r0, #21
 80045e4:	f000 fd3a 	bl	800505c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80045e8:	2015      	movs	r0, #21
 80045ea:	f000 fd4c 	bl	8005086 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80045ee:	e01a      	b.n	8004626 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM17)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <HAL_TIM_Base_MspInit+0x88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d115      	bne.n	8004626 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	02c9      	lsls	r1, r1, #11
 8004604:	430a      	orrs	r2, r1
 8004606:	619a      	str	r2, [r3, #24]
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <HAL_TIM_Base_MspInit+0x84>)
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	02db      	lsls	r3, r3, #11
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	2016      	movs	r0, #22
 800461c:	f000 fd1e 	bl	800505c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004620:	2016      	movs	r0, #22
 8004622:	f000 fd30 	bl	8005086 <HAL_NVIC_EnableIRQ>
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b004      	add	sp, #16
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	40014400 	.word	0x40014400
 8004634:	40021000 	.word	0x40021000
 8004638:	40014800 	.word	0x40014800

0800463c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800463c:	480d      	ldr	r0, [pc, #52]	; (8004674 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800463e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004640:	480d      	ldr	r0, [pc, #52]	; (8004678 <LoopForever+0x6>)
  ldr r1, =_edata
 8004642:	490e      	ldr	r1, [pc, #56]	; (800467c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004644:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <LoopForever+0xe>)
  movs r3, #0
 8004646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004648:	e002      	b.n	8004650 <LoopCopyDataInit>

0800464a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800464a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800464c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800464e:	3304      	adds	r3, #4

08004650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004654:	d3f9      	bcc.n	800464a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004656:	4a0b      	ldr	r2, [pc, #44]	; (8004684 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004658:	4c0b      	ldr	r4, [pc, #44]	; (8004688 <LoopForever+0x16>)
  movs r3, #0
 800465a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800465c:	e001      	b.n	8004662 <LoopFillZerobss>

0800465e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800465e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004660:	3204      	adds	r2, #4

08004662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004664:	d3fb      	bcc.n	800465e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004666:	f7ff ff49 	bl	80044fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800466a:	f002 fda5 	bl	80071b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800466e:	f7ff fc95 	bl	8003f9c <main>

08004672 <LoopForever>:

LoopForever:
    b LoopForever
 8004672:	e7fe      	b.n	8004672 <LoopForever>
  ldr   r0, =_estack
 8004674:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800467c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8004680:	0800a18c 	.word	0x0800a18c
  ldr r2, =_sbss
 8004684:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8004688:	20000294 	.word	0x20000294

0800468c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800468c:	e7fe      	b.n	800468c <ADC1_IRQHandler>
	...

08004690 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <HAL_Init+0x24>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_Init+0x24>)
 800469a:	2110      	movs	r1, #16
 800469c:	430a      	orrs	r2, r1
 800469e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80046a0:	2003      	movs	r0, #3
 80046a2:	f000 f809 	bl	80046b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046a6:	f7ff fe0f 	bl	80042c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	0018      	movs	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	40022000 	.word	0x40022000

080046b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <HAL_InitTick+0x5c>)
 80046c2:	681c      	ldr	r4, [r3, #0]
 80046c4:	4b14      	ldr	r3, [pc, #80]	; (8004718 <HAL_InitTick+0x60>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	0019      	movs	r1, r3
 80046ca:	23fa      	movs	r3, #250	; 0xfa
 80046cc:	0098      	lsls	r0, r3, #2
 80046ce:	f7fb fd2f 	bl	8000130 <__udivsi3>
 80046d2:	0003      	movs	r3, r0
 80046d4:	0019      	movs	r1, r3
 80046d6:	0020      	movs	r0, r4
 80046d8:	f7fb fd2a 	bl	8000130 <__udivsi3>
 80046dc:	0003      	movs	r3, r0
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fce1 	bl	80050a6 <HAL_SYSTICK_Config>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d001      	beq.n	80046ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e00f      	b.n	800470c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d80b      	bhi.n	800470a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	2301      	movs	r3, #1
 80046f6:	425b      	negs	r3, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fcae 	bl	800505c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_InitTick+0x64>)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b003      	add	sp, #12
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	20000004 	.word	0x20000004
 8004718:	2000000c 	.word	0x2000000c
 800471c:	20000008 	.word	0x20000008

08004720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <HAL_IncTick+0x1c>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	001a      	movs	r2, r3
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_IncTick+0x20>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	18d2      	adds	r2, r2, r3
 8004730:	4b03      	ldr	r3, [pc, #12]	; (8004740 <HAL_IncTick+0x20>)
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	2000000c 	.word	0x2000000c
 8004740:	20000280 	.word	0x20000280

08004744 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  return uwTick;
 8004748:	4b02      	ldr	r3, [pc, #8]	; (8004754 <HAL_GetTick+0x10>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	20000280 	.word	0x20000280

08004758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7ff fff0 	bl	8004744 <HAL_GetTick>
 8004764:	0003      	movs	r3, r0
 8004766:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	3301      	adds	r3, #1
 8004770:	d005      	beq.n	800477e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_Delay+0x44>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	001a      	movs	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	189b      	adds	r3, r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	f7ff ffe0 	bl	8004744 <HAL_GetTick>
 8004784:	0002      	movs	r2, r0
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	429a      	cmp	r2, r3
 800478e:	d8f7      	bhi.n	8004780 <HAL_Delay+0x28>
  {
  }
}
 8004790:	46c0      	nop			; (mov r8, r8)
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	2000000c 	.word	0x2000000c

080047a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a8:	230f      	movs	r3, #15
 80047aa:	18fb      	adds	r3, r7, r3
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e125      	b.n	8004a0a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2234      	movs	r2, #52	; 0x34
 80047d0:	2100      	movs	r1, #0
 80047d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7fe fafc 	bl	8002dd4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e0:	2210      	movs	r2, #16
 80047e2:	4013      	ands	r3, r2
 80047e4:	d000      	beq.n	80047e8 <HAL_ADC_Init+0x48>
 80047e6:	e103      	b.n	80049f0 <HAL_ADC_Init+0x250>
 80047e8:	230f      	movs	r3, #15
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d000      	beq.n	80047f4 <HAL_ADC_Init+0x54>
 80047f2:	e0fd      	b.n	80049f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2204      	movs	r2, #4
 80047fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80047fe:	d000      	beq.n	8004802 <HAL_ADC_Init+0x62>
 8004800:	e0f6      	b.n	80049f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	4a83      	ldr	r2, [pc, #524]	; (8004a14 <HAL_ADC_Init+0x274>)
 8004808:	4013      	ands	r3, r2
 800480a:	2202      	movs	r2, #2
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2203      	movs	r2, #3
 800481a:	4013      	ands	r3, r2
 800481c:	2b01      	cmp	r3, #1
 800481e:	d112      	bne.n	8004846 <HAL_ADC_Init+0xa6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2201      	movs	r2, #1
 8004828:	4013      	ands	r3, r2
 800482a:	2b01      	cmp	r3, #1
 800482c:	d009      	beq.n	8004842 <HAL_ADC_Init+0xa2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	2380      	movs	r3, #128	; 0x80
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	401a      	ands	r2, r3
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	429a      	cmp	r2, r3
 8004840:	d101      	bne.n	8004846 <HAL_ADC_Init+0xa6>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_ADC_Init+0xa8>
 8004846:	2300      	movs	r3, #0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d116      	bne.n	800487a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2218      	movs	r2, #24
 8004854:	4393      	bics	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	0899      	lsrs	r1, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4964      	ldr	r1, [pc, #400]	; (8004a18 <HAL_ADC_Init+0x278>)
 8004886:	400a      	ands	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7e1b      	ldrb	r3, [r3, #24]
 800488e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	7e5b      	ldrb	r3, [r3, #25]
 8004894:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004896:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	7e9b      	ldrb	r3, [r3, #26]
 800489c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800489e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d002      	beq.n	80048ae <HAL_ADC_Init+0x10e>
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	015b      	lsls	r3, r3, #5
 80048ac:	e000      	b.n	80048b0 <HAL_ADC_Init+0x110>
 80048ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80048b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80048b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_Init+0x124>
 80048c0:	2304      	movs	r3, #4
 80048c2:	e000      	b.n	80048c6 <HAL_ADC_Init+0x126>
 80048c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80048c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2124      	movs	r1, #36	; 0x24
 80048cc:	5c5b      	ldrb	r3, [r3, r1]
 80048ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80048d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	7edb      	ldrb	r3, [r3, #27]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d115      	bne.n	800490c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	7e9b      	ldrb	r3, [r3, #26]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d105      	bne.n	80048f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	0252      	lsls	r2, r2, #9
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	e00b      	b.n	800490c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2220      	movs	r2, #32
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004904:	2201      	movs	r2, #1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	23c2      	movs	r3, #194	; 0xc2
 8004912:	33ff      	adds	r3, #255	; 0xff
 8004914:	429a      	cmp	r2, r3
 8004916:	d007      	beq.n	8004928 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004920:	4313      	orrs	r3, r2
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68d9      	ldr	r1, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	430a      	orrs	r2, r1
 8004936:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	055b      	lsls	r3, r3, #21
 8004940:	429a      	cmp	r2, r3
 8004942:	d01b      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d017      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	2b02      	cmp	r3, #2
 8004952:	d013      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	2b03      	cmp	r3, #3
 800495a:	d00f      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	2b04      	cmp	r3, #4
 8004962:	d00b      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2b05      	cmp	r3, #5
 800496a:	d007      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b06      	cmp	r3, #6
 8004972:	d003      	beq.n	800497c <HAL_ADC_Init+0x1dc>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2b07      	cmp	r3, #7
 800497a:	d112      	bne.n	80049a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2107      	movs	r1, #7
 8004988:	438a      	bics	r2, r1
 800498a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6959      	ldr	r1, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	2207      	movs	r2, #7
 8004998:	401a      	ands	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_ADC_Init+0x27c>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d10b      	bne.n	80049ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	2203      	movs	r2, #3
 80049be:	4393      	bics	r3, r2
 80049c0:	2201      	movs	r2, #1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80049c8:	e01c      	b.n	8004a04 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ce:	2212      	movs	r2, #18
 80049d0:	4393      	bics	r3, r2
 80049d2:	2210      	movs	r2, #16
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	2201      	movs	r2, #1
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80049e6:	230f      	movs	r3, #15
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80049ee:	e009      	b.n	8004a04 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	2210      	movs	r2, #16
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80049fc:	230f      	movs	r3, #15
 80049fe:	18fb      	adds	r3, r7, r3
 8004a00:	2201      	movs	r2, #1
 8004a02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a04:	230f      	movs	r3, #15
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	781b      	ldrb	r3, [r3, #0]
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	fffffefd 	.word	0xfffffefd
 8004a18:	fffe0219 	.word	0xfffe0219
 8004a1c:	833fffe7 	.word	0x833fffe7

08004a20 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a28:	230f      	movs	r3, #15
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2204      	movs	r2, #4
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d138      	bne.n	8004aae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2234      	movs	r2, #52	; 0x34
 8004a40:	5c9b      	ldrb	r3, [r3, r2]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_ADC_Start+0x2a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e038      	b.n	8004abc <HAL_ADC_Start+0x9c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2234      	movs	r2, #52	; 0x34
 8004a4e:	2101      	movs	r1, #1
 8004a50:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	7e5b      	ldrb	r3, [r3, #25]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d007      	beq.n	8004a6a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	18fc      	adds	r4, r7, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f9cb 	bl	8004dfc <ADC_Enable>
 8004a66:	0003      	movs	r3, r0
 8004a68:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a6a:	230f      	movs	r3, #15
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d120      	bne.n	8004ab6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	4a12      	ldr	r2, [pc, #72]	; (8004ac4 <HAL_ADC_Start+0xa4>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	0052      	lsls	r2, r2, #1
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2234      	movs	r2, #52	; 0x34
 8004a90:	2100      	movs	r1, #0
 8004a92:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	221c      	movs	r2, #28
 8004a9a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	e003      	b.n	8004ab6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004aae:	230f      	movs	r3, #15
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ab6:	230f      	movs	r3, #15
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	781b      	ldrb	r3, [r3, #0]
}
 8004abc:	0018      	movs	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	b005      	add	sp, #20
 8004ac2:	bd90      	pop	{r4, r7, pc}
 8004ac4:	fffff0fe 	.word	0xfffff0fe

08004ac8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d102      	bne.n	8004ae0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004ada:	2308      	movs	r3, #8
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	e014      	b.n	8004b0a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d10b      	bne.n	8004b06 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af2:	2220      	movs	r2, #32
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2234      	movs	r2, #52	; 0x34
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e071      	b.n	8004bea <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004b06:	230c      	movs	r3, #12
 8004b08:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004b0a:	f7ff fe1b 	bl	8004744 <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b12:	e01f      	b.n	8004b54 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	d01c      	beq.n	8004b54 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <HAL_ADC_PollForConversion+0x68>
 8004b20:	f7ff fe10 	bl	8004744 <HAL_GetTick>
 8004b24:	0002      	movs	r2, r0
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d211      	bcs.n	8004b54 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d10b      	bne.n	8004b54 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2204      	movs	r2, #4
 8004b42:	431a      	orrs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2234      	movs	r2, #52	; 0x34
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e04a      	b.n	8004bea <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d0d9      	beq.n	8004b14 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	23c0      	movs	r3, #192	; 0xc0
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d12d      	bne.n	8004bd8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d129      	bne.n	8004bd8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d122      	bne.n	8004bd8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d110      	bne.n	8004bc0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	210c      	movs	r1, #12
 8004baa:	438a      	bics	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <HAL_ADC_PollForConversion+0x12c>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004bbe:	e00b      	b.n	8004bd8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7e1b      	ldrb	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d103      	bne.n	8004be8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	220c      	movs	r2, #12
 8004be6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	0018      	movs	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	b004      	add	sp, #16
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	fffffefe 	.word	0xfffffefe

08004bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c06:	0018      	movs	r0, r3
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	b002      	add	sp, #8
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c1a:	230f      	movs	r3, #15
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2a:	2380      	movs	r3, #128	; 0x80
 8004c2c:	055b      	lsls	r3, r3, #21
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d011      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x46>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d00d      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x46>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d009      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x46>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d005      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x46>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d001      	beq.n	8004c56 <HAL_ADC_ConfigChannel+0x46>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2234      	movs	r2, #52	; 0x34
 8004c5a:	5c9b      	ldrb	r3, [r3, r2]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_ADC_ConfigChannel+0x54>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e0bb      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x1cc>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2234      	movs	r2, #52	; 0x34
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2204      	movs	r2, #4
 8004c74:	4013      	ands	r3, r2
 8004c76:	d000      	beq.n	8004c7a <HAL_ADC_ConfigChannel+0x6a>
 8004c78:	e09f      	b.n	8004dba <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4a59      	ldr	r2, [pc, #356]	; (8004de4 <HAL_ADC_ConfigChannel+0x1d4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d100      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x76>
 8004c84:	e077      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	409a      	lsls	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	2380      	movs	r3, #128	; 0x80
 8004ca2:	055b      	lsls	r3, r3, #21
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d037      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d033      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d02f      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d02b      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d027      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	2b05      	cmp	r3, #5
 8004cce:	d023      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	2b06      	cmp	r3, #6
 8004cd6:	d01f      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	d01b      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	2107      	movs	r1, #7
 8004cec:	400b      	ands	r3, r1
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d012      	beq.n	8004d18 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2107      	movs	r1, #7
 8004cfe:	438a      	bics	r2, r1
 8004d00:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6959      	ldr	r1, [r3, #20]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	401a      	ands	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d003      	beq.n	8004d28 <HAL_ADC_ConfigChannel+0x118>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b11      	cmp	r3, #17
 8004d26:	d152      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004d28:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004d2a:	6819      	ldr	r1, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d102      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x12a>
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	e001      	b.n	8004d3e <HAL_ADC_ConfigChannel+0x12e>
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	03db      	lsls	r3, r3, #15
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004d40:	430b      	orrs	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d140      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_ADC_ConfigChannel+0x1dc>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4927      	ldr	r1, [pc, #156]	; (8004df0 <HAL_ADC_ConfigChannel+0x1e0>)
 8004d52:	0018      	movs	r0, r3
 8004d54:	f7fb f9ec 	bl	8000130 <__udivsi3>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	0013      	movs	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d66:	e002      	b.n	8004d6e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f9      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x158>
 8004d74:	e02b      	b.n	8004dce <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	4099      	lsls	r1, r3
 8004d84:	000b      	movs	r3, r1
 8004d86:	43d9      	mvns	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d003      	beq.n	8004da0 <HAL_ADC_ConfigChannel+0x190>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b11      	cmp	r3, #17
 8004d9e:	d116      	bne.n	8004dce <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004da2:	6819      	ldr	r1, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x1a0>
 8004dac:	4a11      	ldr	r2, [pc, #68]	; (8004df4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004dae:	e000      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x1a2>
 8004db0:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <HAL_ADC_ConfigChannel+0x1e8>)
 8004db2:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <HAL_ADC_ConfigChannel+0x1d8>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e009      	b.n	8004dce <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004dc6:	230f      	movs	r3, #15
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2234      	movs	r2, #52	; 0x34
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004dd6:	230f      	movs	r3, #15
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	781b      	ldrb	r3, [r3, #0]
}
 8004ddc:	0018      	movs	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b004      	add	sp, #16
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	00001001 	.word	0x00001001
 8004de8:	40012708 	.word	0x40012708
 8004dec:	20000004 	.word	0x20000004
 8004df0:	000f4240 	.word	0x000f4240
 8004df4:	ff7fffff 	.word	0xff7fffff
 8004df8:	ffbfffff 	.word	0xffbfffff

08004dfc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2203      	movs	r2, #3
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d112      	bne.n	8004e40 <ADC_Enable+0x44>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2201      	movs	r2, #1
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d009      	beq.n	8004e3c <ADC_Enable+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	401a      	ands	r2, r3
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d101      	bne.n	8004e40 <ADC_Enable+0x44>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e000      	b.n	8004e42 <ADC_Enable+0x46>
 8004e40:	2300      	movs	r3, #0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d152      	bne.n	8004eec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <ADC_Enable+0xfc>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d00d      	beq.n	8004e6e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	2210      	movs	r2, #16
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2201      	movs	r2, #1
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e03f      	b.n	8004eee <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e7e:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <ADC_Enable+0x100>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	491f      	ldr	r1, [pc, #124]	; (8004f00 <ADC_Enable+0x104>)
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fb f953 	bl	8000130 <__udivsi3>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e8e:	e002      	b.n	8004e96 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f9      	bne.n	8004e90 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e9c:	f7ff fc52 	bl	8004744 <HAL_GetTick>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ea4:	e01b      	b.n	8004ede <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ea6:	f7ff fc4d 	bl	8004744 <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d914      	bls.n	8004ede <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d00d      	beq.n	8004ede <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e007      	b.n	8004eee <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d1dc      	bne.n	8004ea6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	80000017 	.word	0x80000017
 8004efc:	20000004 	.word	0x20000004
 8004f00:	000f4240 	.word	0x000f4240

08004f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f10:	1dfb      	adds	r3, r7, #7
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b7f      	cmp	r3, #127	; 0x7f
 8004f16:	d809      	bhi.n	8004f2c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	231f      	movs	r3, #31
 8004f20:	401a      	ands	r2, r3
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <__NVIC_EnableIRQ+0x30>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	4091      	lsls	r1, r2
 8004f28:	000a      	movs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]
  }
}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b002      	add	sp, #8
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	e000e100 	.word	0xe000e100

08004f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	0002      	movs	r2, r0
 8004f40:	6039      	str	r1, [r7, #0]
 8004f42:	1dfb      	adds	r3, r7, #7
 8004f44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	1dfb      	adds	r3, r7, #7
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4c:	d828      	bhi.n	8004fa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	; (800500c <__NVIC_SetPriority+0xd4>)
 8004f50:	1dfb      	adds	r3, r7, #7
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	33c0      	adds	r3, #192	; 0xc0
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	589b      	ldr	r3, [r3, r2]
 8004f5e:	1dfa      	adds	r2, r7, #7
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	0011      	movs	r1, r2
 8004f64:	2203      	movs	r2, #3
 8004f66:	400a      	ands	r2, r1
 8004f68:	00d2      	lsls	r2, r2, #3
 8004f6a:	21ff      	movs	r1, #255	; 0xff
 8004f6c:	4091      	lsls	r1, r2
 8004f6e:	000a      	movs	r2, r1
 8004f70:	43d2      	mvns	r2, r2
 8004f72:	401a      	ands	r2, r3
 8004f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	019b      	lsls	r3, r3, #6
 8004f7a:	22ff      	movs	r2, #255	; 0xff
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	1dfb      	adds	r3, r7, #7
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	0018      	movs	r0, r3
 8004f84:	2303      	movs	r3, #3
 8004f86:	4003      	ands	r3, r0
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f8c:	481f      	ldr	r0, [pc, #124]	; (800500c <__NVIC_SetPriority+0xd4>)
 8004f8e:	1dfb      	adds	r3, r7, #7
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	b25b      	sxtb	r3, r3
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	430a      	orrs	r2, r1
 8004f98:	33c0      	adds	r3, #192	; 0xc0
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f9e:	e031      	b.n	8005004 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fa0:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <__NVIC_SetPriority+0xd8>)
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	230f      	movs	r3, #15
 8004faa:	400b      	ands	r3, r1
 8004fac:	3b08      	subs	r3, #8
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3306      	adds	r3, #6
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	18d3      	adds	r3, r2, r3
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	1dfa      	adds	r2, r7, #7
 8004fbc:	7812      	ldrb	r2, [r2, #0]
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	400a      	ands	r2, r1
 8004fc4:	00d2      	lsls	r2, r2, #3
 8004fc6:	21ff      	movs	r1, #255	; 0xff
 8004fc8:	4091      	lsls	r1, r2
 8004fca:	000a      	movs	r2, r1
 8004fcc:	43d2      	mvns	r2, r2
 8004fce:	401a      	ands	r2, r3
 8004fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	019b      	lsls	r3, r3, #6
 8004fd6:	22ff      	movs	r2, #255	; 0xff
 8004fd8:	401a      	ands	r2, r3
 8004fda:	1dfb      	adds	r3, r7, #7
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	0018      	movs	r0, r3
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	4003      	ands	r3, r0
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004fe8:	4809      	ldr	r0, [pc, #36]	; (8005010 <__NVIC_SetPriority+0xd8>)
 8004fea:	1dfb      	adds	r3, r7, #7
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	001c      	movs	r4, r3
 8004ff0:	230f      	movs	r3, #15
 8004ff2:	4023      	ands	r3, r4
 8004ff4:	3b08      	subs	r3, #8
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	3306      	adds	r3, #6
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	18c3      	adds	r3, r0, r3
 8005000:	3304      	adds	r3, #4
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	46c0      	nop			; (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b003      	add	sp, #12
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	e000e100 	.word	0xe000e100
 8005010:	e000ed00 	.word	0xe000ed00

08005014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	045b      	lsls	r3, r3, #17
 8005024:	429a      	cmp	r2, r3
 8005026:	d301      	bcc.n	800502c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005028:	2301      	movs	r3, #1
 800502a:	e010      	b.n	800504e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800502c:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <SysTick_Config+0x44>)
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	3a01      	subs	r2, #1
 8005032:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005034:	2301      	movs	r3, #1
 8005036:	425b      	negs	r3, r3
 8005038:	2103      	movs	r1, #3
 800503a:	0018      	movs	r0, r3
 800503c:	f7ff ff7c 	bl	8004f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <SysTick_Config+0x44>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005046:	4b04      	ldr	r3, [pc, #16]	; (8005058 <SysTick_Config+0x44>)
 8005048:	2207      	movs	r2, #7
 800504a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800504c:	2300      	movs	r3, #0
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b002      	add	sp, #8
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	e000e010 	.word	0xe000e010

0800505c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	210f      	movs	r1, #15
 8005068:	187b      	adds	r3, r7, r1
 800506a:	1c02      	adds	r2, r0, #0
 800506c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	187b      	adds	r3, r7, r1
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b25b      	sxtb	r3, r3
 8005076:	0011      	movs	r1, r2
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff ff5d 	bl	8004f38 <__NVIC_SetPriority>
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b004      	add	sp, #16
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	0002      	movs	r2, r0
 800508e:	1dfb      	adds	r3, r7, #7
 8005090:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005092:	1dfb      	adds	r3, r7, #7
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b25b      	sxtb	r3, r3
 8005098:	0018      	movs	r0, r3
 800509a:	f7ff ff33 	bl	8004f04 <__NVIC_EnableIRQ>
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b002      	add	sp, #8
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7ff ffaf 	bl	8005014 <SysTick_Config>
 80050b6:	0003      	movs	r3, r0
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b002      	add	sp, #8
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ce:	e14f      	b.n	8005370 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4091      	lsls	r1, r2
 80050da:	000a      	movs	r2, r1
 80050dc:	4013      	ands	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d100      	bne.n	80050e8 <HAL_GPIO_Init+0x28>
 80050e6:	e140      	b.n	800536a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2203      	movs	r2, #3
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d005      	beq.n	8005100 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2203      	movs	r2, #3
 80050fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d130      	bne.n	8005162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	409a      	lsls	r2, r3
 800510e:	0013      	movs	r3, r2
 8005110:	43da      	mvns	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4013      	ands	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	409a      	lsls	r2, r3
 8005122:	0013      	movs	r3, r2
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005136:	2201      	movs	r2, #1
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	409a      	lsls	r2, r3
 800513c:	0013      	movs	r3, r2
 800513e:	43da      	mvns	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4013      	ands	r3, r2
 8005144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	2201      	movs	r2, #1
 800514e:	401a      	ands	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	409a      	lsls	r2, r3
 8005154:	0013      	movs	r3, r2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2203      	movs	r2, #3
 8005168:	4013      	ands	r3, r2
 800516a:	2b03      	cmp	r3, #3
 800516c:	d017      	beq.n	800519e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	409a      	lsls	r2, r3
 800517c:	0013      	movs	r3, r2
 800517e:	43da      	mvns	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4013      	ands	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	0013      	movs	r3, r2
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2203      	movs	r2, #3
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d123      	bne.n	80051f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	08da      	lsrs	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3208      	adds	r2, #8
 80051b2:	0092      	lsls	r2, r2, #2
 80051b4:	58d3      	ldr	r3, [r2, r3]
 80051b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2207      	movs	r2, #7
 80051bc:	4013      	ands	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	220f      	movs	r2, #15
 80051c2:	409a      	lsls	r2, r3
 80051c4:	0013      	movs	r3, r2
 80051c6:	43da      	mvns	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691a      	ldr	r2, [r3, #16]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2107      	movs	r1, #7
 80051d6:	400b      	ands	r3, r1
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	409a      	lsls	r2, r3
 80051dc:	0013      	movs	r3, r2
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	08da      	lsrs	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3208      	adds	r2, #8
 80051ec:	0092      	lsls	r2, r2, #2
 80051ee:	6939      	ldr	r1, [r7, #16]
 80051f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	2203      	movs	r2, #3
 80051fe:	409a      	lsls	r2, r3
 8005200:	0013      	movs	r3, r2
 8005202:	43da      	mvns	r2, r3
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4013      	ands	r3, r2
 8005208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2203      	movs	r2, #3
 8005210:	401a      	ands	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	409a      	lsls	r2, r3
 8005218:	0013      	movs	r3, r2
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	23c0      	movs	r3, #192	; 0xc0
 800522c:	029b      	lsls	r3, r3, #10
 800522e:	4013      	ands	r3, r2
 8005230:	d100      	bne.n	8005234 <HAL_GPIO_Init+0x174>
 8005232:	e09a      	b.n	800536a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005234:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_GPIO_Init+0x2c8>)
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	4b53      	ldr	r3, [pc, #332]	; (8005388 <HAL_GPIO_Init+0x2c8>)
 800523a:	2101      	movs	r1, #1
 800523c:	430a      	orrs	r2, r1
 800523e:	619a      	str	r2, [r3, #24]
 8005240:	4b51      	ldr	r3, [pc, #324]	; (8005388 <HAL_GPIO_Init+0x2c8>)
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	2201      	movs	r2, #1
 8005246:	4013      	ands	r3, r2
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800524c:	4a4f      	ldr	r2, [pc, #316]	; (800538c <HAL_GPIO_Init+0x2cc>)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	3302      	adds	r3, #2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	589b      	ldr	r3, [r3, r2]
 8005258:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2203      	movs	r2, #3
 800525e:	4013      	ands	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	220f      	movs	r2, #15
 8005264:	409a      	lsls	r2, r3
 8005266:	0013      	movs	r3, r2
 8005268:	43da      	mvns	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4013      	ands	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	2390      	movs	r3, #144	; 0x90
 8005274:	05db      	lsls	r3, r3, #23
 8005276:	429a      	cmp	r2, r3
 8005278:	d013      	beq.n	80052a2 <HAL_GPIO_Init+0x1e2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a44      	ldr	r2, [pc, #272]	; (8005390 <HAL_GPIO_Init+0x2d0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00d      	beq.n	800529e <HAL_GPIO_Init+0x1de>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a43      	ldr	r2, [pc, #268]	; (8005394 <HAL_GPIO_Init+0x2d4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <HAL_GPIO_Init+0x1da>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a42      	ldr	r2, [pc, #264]	; (8005398 <HAL_GPIO_Init+0x2d8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d101      	bne.n	8005296 <HAL_GPIO_Init+0x1d6>
 8005292:	2303      	movs	r3, #3
 8005294:	e006      	b.n	80052a4 <HAL_GPIO_Init+0x1e4>
 8005296:	2305      	movs	r3, #5
 8005298:	e004      	b.n	80052a4 <HAL_GPIO_Init+0x1e4>
 800529a:	2302      	movs	r3, #2
 800529c:	e002      	b.n	80052a4 <HAL_GPIO_Init+0x1e4>
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <HAL_GPIO_Init+0x1e4>
 80052a2:	2300      	movs	r3, #0
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	2103      	movs	r1, #3
 80052a8:	400a      	ands	r2, r1
 80052aa:	0092      	lsls	r2, r2, #2
 80052ac:	4093      	lsls	r3, r2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052b4:	4935      	ldr	r1, [pc, #212]	; (800538c <HAL_GPIO_Init+0x2cc>)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	089b      	lsrs	r3, r3, #2
 80052ba:	3302      	adds	r3, #2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052c2:	4b36      	ldr	r3, [pc, #216]	; (800539c <HAL_GPIO_Init+0x2dc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	43da      	mvns	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4013      	ands	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	025b      	lsls	r3, r3, #9
 80052da:	4013      	ands	r3, r2
 80052dc:	d003      	beq.n	80052e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <HAL_GPIO_Init+0x2dc>)
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80052ec:	4b2b      	ldr	r3, [pc, #172]	; (800539c <HAL_GPIO_Init+0x2dc>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	43da      	mvns	r2, r3
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	4013      	ands	r3, r2
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005310:	4b22      	ldr	r3, [pc, #136]	; (800539c <HAL_GPIO_Init+0x2dc>)
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005316:	4b21      	ldr	r3, [pc, #132]	; (800539c <HAL_GPIO_Init+0x2dc>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43da      	mvns	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	035b      	lsls	r3, r3, #13
 800532e:	4013      	ands	r3, r2
 8005330:	d003      	beq.n	800533a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_GPIO_Init+0x2dc>)
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005340:	4b16      	ldr	r3, [pc, #88]	; (800539c <HAL_GPIO_Init+0x2dc>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43da      	mvns	r2, r3
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	4013      	ands	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	039b      	lsls	r3, r3, #14
 8005358:	4013      	ands	r3, r2
 800535a:	d003      	beq.n	8005364 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <HAL_GPIO_Init+0x2dc>)
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3301      	adds	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	40da      	lsrs	r2, r3
 8005378:	1e13      	subs	r3, r2, #0
 800537a:	d000      	beq.n	800537e <HAL_GPIO_Init+0x2be>
 800537c:	e6a8      	b.n	80050d0 <HAL_GPIO_Init+0x10>
  } 
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021000 	.word	0x40021000
 800538c:	40010000 	.word	0x40010000
 8005390:	48000400 	.word	0x48000400
 8005394:	48000800 	.word	0x48000800
 8005398:	48000c00 	.word	0x48000c00
 800539c:	40010400 	.word	0x40010400

080053a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	000a      	movs	r2, r1
 80053aa:	1cbb      	adds	r3, r7, #2
 80053ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	1cba      	adds	r2, r7, #2
 80053b4:	8812      	ldrh	r2, [r2, #0]
 80053b6:	4013      	ands	r3, r2
 80053b8:	d004      	beq.n	80053c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80053ba:	230f      	movs	r3, #15
 80053bc:	18fb      	adds	r3, r7, r3
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e003      	b.n	80053cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053c4:	230f      	movs	r3, #15
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80053cc:	230f      	movs	r3, #15
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	781b      	ldrb	r3, [r3, #0]
  }
 80053d2:	0018      	movs	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	b004      	add	sp, #16
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	0008      	movs	r0, r1
 80053e4:	0011      	movs	r1, r2
 80053e6:	1cbb      	adds	r3, r7, #2
 80053e8:	1c02      	adds	r2, r0, #0
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	1c7b      	adds	r3, r7, #1
 80053ee:	1c0a      	adds	r2, r1, #0
 80053f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f2:	1c7b      	adds	r3, r7, #1
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d004      	beq.n	8005404 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053fa:	1cbb      	adds	r3, r7, #2
 80053fc:	881a      	ldrh	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005402:	e003      	b.n	800540c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005404:	1cbb      	adds	r3, r7, #2
 8005406:	881a      	ldrh	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800540c:	46c0      	nop			; (mov r8, r8)
 800540e:	46bd      	mov	sp, r7
 8005410:	b002      	add	sp, #8
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	0002      	movs	r2, r0
 800541c:	1dbb      	adds	r3, r7, #6
 800541e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	1dba      	adds	r2, r7, #6
 8005426:	8812      	ldrh	r2, [r2, #0]
 8005428:	4013      	ands	r3, r2
 800542a:	d008      	beq.n	800543e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800542e:	1dba      	adds	r2, r7, #6
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005434:	1dbb      	adds	r3, r7, #6
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	0018      	movs	r0, r3
 800543a:	f7fe fedd 	bl	80041f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800543e:	46c0      	nop			; (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	40010400 	.word	0x40010400

0800544c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e082      	b.n	8005564 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	5c9b      	ldrb	r3, [r3, r2]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d107      	bne.n	800547a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2240      	movs	r2, #64	; 0x40
 800546e:	2100      	movs	r1, #0
 8005470:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0018      	movs	r0, r3
 8005476:	f7fe fb4f 	bl	8003b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2241      	movs	r2, #65	; 0x41
 800547e:	2124      	movs	r1, #36	; 0x24
 8005480:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	438a      	bics	r2, r1
 8005490:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4934      	ldr	r1, [pc, #208]	; (800556c <HAL_I2C_Init+0x120>)
 800549c:	400a      	ands	r2, r1
 800549e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4931      	ldr	r1, [pc, #196]	; (8005570 <HAL_I2C_Init+0x124>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d108      	bne.n	80054ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	0209      	lsls	r1, r1, #8
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	e007      	b.n	80054da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689a      	ldr	r2, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2184      	movs	r1, #132	; 0x84
 80054d4:	0209      	lsls	r1, r1, #8
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d104      	bne.n	80054ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	0112      	lsls	r2, r2, #4
 80054ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	491f      	ldr	r1, [pc, #124]	; (8005574 <HAL_I2C_Init+0x128>)
 80054f8:	430a      	orrs	r2, r1
 80054fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	491a      	ldr	r1, [pc, #104]	; (8005570 <HAL_I2C_Init+0x124>)
 8005508:	400a      	ands	r2, r1
 800550a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	431a      	orrs	r2, r3
 8005516:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69d9      	ldr	r1, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2101      	movs	r1, #1
 8005542:	430a      	orrs	r2, r1
 8005544:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2241      	movs	r2, #65	; 0x41
 8005550:	2120      	movs	r1, #32
 8005552:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2242      	movs	r2, #66	; 0x42
 800555e:	2100      	movs	r1, #0
 8005560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	0018      	movs	r0, r3
 8005566:	46bd      	mov	sp, r7
 8005568:	b002      	add	sp, #8
 800556a:	bd80      	pop	{r7, pc}
 800556c:	f0ffffff 	.word	0xf0ffffff
 8005570:	ffff7fff 	.word	0xffff7fff
 8005574:	02008000 	.word	0x02008000

08005578 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	0008      	movs	r0, r1
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	0019      	movs	r1, r3
 8005586:	230a      	movs	r3, #10
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	1c02      	adds	r2, r0, #0
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	2308      	movs	r3, #8
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	1c0a      	adds	r2, r1, #0
 8005594:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2241      	movs	r2, #65	; 0x41
 800559a:	5c9b      	ldrb	r3, [r3, r2]
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d000      	beq.n	80055a4 <HAL_I2C_Master_Transmit+0x2c>
 80055a2:	e0e7      	b.n	8005774 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2240      	movs	r2, #64	; 0x40
 80055a8:	5c9b      	ldrb	r3, [r3, r2]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_I2C_Master_Transmit+0x3a>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e0e1      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2240      	movs	r2, #64	; 0x40
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ba:	f7ff f8c3 	bl	8004744 <HAL_GetTick>
 80055be:	0003      	movs	r3, r0
 80055c0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	0219      	lsls	r1, r3, #8
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	2319      	movs	r3, #25
 80055ce:	2201      	movs	r2, #1
 80055d0:	f000 fc24 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 80055d4:	1e03      	subs	r3, r0, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0cc      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2241      	movs	r2, #65	; 0x41
 80055e0:	2121      	movs	r1, #33	; 0x21
 80055e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2242      	movs	r2, #66	; 0x42
 80055e8:	2110      	movs	r1, #16
 80055ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2208      	movs	r2, #8
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	2bff      	cmp	r3, #255	; 0xff
 8005610:	d911      	bls.n	8005636 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	22ff      	movs	r2, #255	; 0xff
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	b2da      	uxtb	r2, r3
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	045c      	lsls	r4, r3, #17
 8005622:	230a      	movs	r3, #10
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	8819      	ldrh	r1, [r3, #0]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	4b55      	ldr	r3, [pc, #340]	; (8005780 <HAL_I2C_Master_Transmit+0x208>)
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	0023      	movs	r3, r4
 8005630:	f000 fd28 	bl	8006084 <I2C_TransferConfig>
 8005634:	e075      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	b2da      	uxtb	r2, r3
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	049c      	lsls	r4, r3, #18
 800564a:	230a      	movs	r3, #10
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	8819      	ldrh	r1, [r3, #0]
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	4b4b      	ldr	r3, [pc, #300]	; (8005780 <HAL_I2C_Master_Transmit+0x208>)
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	0023      	movs	r3, r4
 8005658:	f000 fd14 	bl	8006084 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800565c:	e061      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fc18 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 800566a:	1e03      	subs	r3, r0, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e081      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	781a      	ldrb	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d03a      	beq.n	8005722 <HAL_I2C_Master_Transmit+0x1aa>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d136      	bne.n	8005722 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	0013      	movs	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	f000 fbab 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 80056c6:	1e03      	subs	r3, r0, #0
 80056c8:	d001      	beq.n	80056ce <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e053      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	2bff      	cmp	r3, #255	; 0xff
 80056d6:	d911      	bls.n	80056fc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	045c      	lsls	r4, r3, #17
 80056e8:	230a      	movs	r3, #10
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	8819      	ldrh	r1, [r3, #0]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	2300      	movs	r3, #0
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	0023      	movs	r3, r4
 80056f6:	f000 fcc5 	bl	8006084 <I2C_TransferConfig>
 80056fa:	e012      	b.n	8005722 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	b2da      	uxtb	r2, r3
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	049c      	lsls	r4, r3, #18
 8005710:	230a      	movs	r3, #10
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	8819      	ldrh	r1, [r3, #0]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	2300      	movs	r3, #0
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	0023      	movs	r3, r4
 800571e:	f000 fcb1 	bl	8006084 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d198      	bne.n	800565e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	0018      	movs	r0, r3
 8005734:	f000 fbf0 	bl	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d001      	beq.n	8005740 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e01a      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2220      	movs	r2, #32
 8005746:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	490c      	ldr	r1, [pc, #48]	; (8005784 <HAL_I2C_Master_Transmit+0x20c>)
 8005754:	400a      	ands	r2, r1
 8005756:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2241      	movs	r2, #65	; 0x41
 800575c:	2120      	movs	r1, #32
 800575e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2242      	movs	r2, #66	; 0x42
 8005764:	2100      	movs	r1, #0
 8005766:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2240      	movs	r2, #64	; 0x40
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b007      	add	sp, #28
 800577c:	bd90      	pop	{r4, r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	80002000 	.word	0x80002000
 8005784:	fe00e800 	.word	0xfe00e800

08005788 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b089      	sub	sp, #36	; 0x24
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	000c      	movs	r4, r1
 8005792:	0010      	movs	r0, r2
 8005794:	0019      	movs	r1, r3
 8005796:	230a      	movs	r3, #10
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	1c22      	adds	r2, r4, #0
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	2308      	movs	r3, #8
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	1c02      	adds	r2, r0, #0
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	1dbb      	adds	r3, r7, #6
 80057a8:	1c0a      	adds	r2, r1, #0
 80057aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2241      	movs	r2, #65	; 0x41
 80057b0:	5c9b      	ldrb	r3, [r3, r2]
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d000      	beq.n	80057ba <HAL_I2C_Mem_Write+0x32>
 80057b8:	e10c      	b.n	80059d4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <HAL_I2C_Mem_Write+0x42>
 80057c0:	232c      	movs	r3, #44	; 0x2c
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d105      	bne.n	80057d6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0ff      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2240      	movs	r2, #64	; 0x40
 80057da:	5c9b      	ldrb	r3, [r3, r2]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_I2C_Mem_Write+0x5c>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0f8      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	2101      	movs	r1, #1
 80057ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057ec:	f7fe ffaa 	bl	8004744 <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	0219      	lsls	r1, r3, #8
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2319      	movs	r3, #25
 8005800:	2201      	movs	r2, #1
 8005802:	f000 fb0b 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005806:	1e03      	subs	r3, r0, #0
 8005808:	d001      	beq.n	800580e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e0e3      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2241      	movs	r2, #65	; 0x41
 8005812:	2121      	movs	r1, #33	; 0x21
 8005814:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2242      	movs	r2, #66	; 0x42
 800581a:	2140      	movs	r1, #64	; 0x40
 800581c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	222c      	movs	r2, #44	; 0x2c
 800582e:	18ba      	adds	r2, r7, r2
 8005830:	8812      	ldrh	r2, [r2, #0]
 8005832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800583a:	1dbb      	adds	r3, r7, #6
 800583c:	881c      	ldrh	r4, [r3, #0]
 800583e:	2308      	movs	r3, #8
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	881a      	ldrh	r2, [r3, #0]
 8005844:	230a      	movs	r3, #10
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	8819      	ldrh	r1, [r3, #0]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	0023      	movs	r3, r4
 8005856:	f000 f9f9 	bl	8005c4c <I2C_RequestMemoryWrite>
 800585a:	1e03      	subs	r3, r0, #0
 800585c:	d005      	beq.n	800586a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2240      	movs	r2, #64	; 0x40
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0b5      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	2bff      	cmp	r3, #255	; 0xff
 8005872:	d911      	bls.n	8005898 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587e:	b2da      	uxtb	r2, r3
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	045c      	lsls	r4, r3, #17
 8005884:	230a      	movs	r3, #10
 8005886:	18fb      	adds	r3, r7, r3
 8005888:	8819      	ldrh	r1, [r3, #0]
 800588a:	68f8      	ldr	r0, [r7, #12]
 800588c:	2300      	movs	r3, #0
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	0023      	movs	r3, r4
 8005892:	f000 fbf7 	bl	8006084 <I2C_TransferConfig>
 8005896:	e012      	b.n	80058be <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	049c      	lsls	r4, r3, #18
 80058ac:	230a      	movs	r3, #10
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	8819      	ldrh	r1, [r3, #0]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	2300      	movs	r3, #0
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	0023      	movs	r3, r4
 80058ba:	f000 fbe3 	bl	8006084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	0018      	movs	r0, r3
 80058c6:	f000 fae8 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 80058ca:	1e03      	subs	r3, r0, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e081      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d03a      	beq.n	8005982 <HAL_I2C_Mem_Write+0x1fa>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005910:	2b00      	cmp	r3, #0
 8005912:	d136      	bne.n	8005982 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	0013      	movs	r3, r2
 800591e:	2200      	movs	r2, #0
 8005920:	2180      	movs	r1, #128	; 0x80
 8005922:	f000 fa7b 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005926:	1e03      	subs	r3, r0, #0
 8005928:	d001      	beq.n	800592e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e053      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2bff      	cmp	r3, #255	; 0xff
 8005936:	d911      	bls.n	800595c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	22ff      	movs	r2, #255	; 0xff
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	b2da      	uxtb	r2, r3
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	045c      	lsls	r4, r3, #17
 8005948:	230a      	movs	r3, #10
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	8819      	ldrh	r1, [r3, #0]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	2300      	movs	r3, #0
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	0023      	movs	r3, r4
 8005956:	f000 fb95 	bl	8006084 <I2C_TransferConfig>
 800595a:	e012      	b.n	8005982 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596a:	b2da      	uxtb	r2, r3
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	049c      	lsls	r4, r3, #18
 8005970:	230a      	movs	r3, #10
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	8819      	ldrh	r1, [r3, #0]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	0023      	movs	r3, r4
 800597e:	f000 fb81 	bl	8006084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d198      	bne.n	80058be <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	0018      	movs	r0, r3
 8005994:	f000 fac0 	bl	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005998:	1e03      	subs	r3, r0, #0
 800599a:	d001      	beq.n	80059a0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e01a      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2220      	movs	r2, #32
 80059a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	490b      	ldr	r1, [pc, #44]	; (80059e0 <HAL_I2C_Mem_Write+0x258>)
 80059b4:	400a      	ands	r2, r1
 80059b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2241      	movs	r2, #65	; 0x41
 80059bc:	2120      	movs	r1, #32
 80059be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2242      	movs	r2, #66	; 0x42
 80059c4:	2100      	movs	r1, #0
 80059c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2240      	movs	r2, #64	; 0x40
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e000      	b.n	80059d6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	0018      	movs	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	b007      	add	sp, #28
 80059dc:	bd90      	pop	{r4, r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	fe00e800 	.word	0xfe00e800

080059e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e4:	b590      	push	{r4, r7, lr}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	000c      	movs	r4, r1
 80059ee:	0010      	movs	r0, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	230a      	movs	r3, #10
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	1c22      	adds	r2, r4, #0
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	2308      	movs	r3, #8
 80059fc:	18fb      	adds	r3, r7, r3
 80059fe:	1c02      	adds	r2, r0, #0
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	1dbb      	adds	r3, r7, #6
 8005a04:	1c0a      	adds	r2, r1, #0
 8005a06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2241      	movs	r2, #65	; 0x41
 8005a0c:	5c9b      	ldrb	r3, [r3, r2]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d000      	beq.n	8005a16 <HAL_I2C_Mem_Read+0x32>
 8005a14:	e110      	b.n	8005c38 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <HAL_I2C_Mem_Read+0x42>
 8005a1c:	232c      	movs	r3, #44	; 0x2c
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2280      	movs	r2, #128	; 0x80
 8005a2a:	0092      	lsls	r2, r2, #2
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e103      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2240      	movs	r2, #64	; 0x40
 8005a36:	5c9b      	ldrb	r3, [r3, r2]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_I2C_Mem_Read+0x5c>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e0fc      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2240      	movs	r2, #64	; 0x40
 8005a44:	2101      	movs	r1, #1
 8005a46:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a48:	f7fe fe7c 	bl	8004744 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a50:	2380      	movs	r3, #128	; 0x80
 8005a52:	0219      	lsls	r1, r3, #8
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	2319      	movs	r3, #25
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f000 f9dd 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005a62:	1e03      	subs	r3, r0, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e0e7      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2241      	movs	r2, #65	; 0x41
 8005a6e:	2122      	movs	r1, #34	; 0x22
 8005a70:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2242      	movs	r2, #66	; 0x42
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	222c      	movs	r2, #44	; 0x2c
 8005a8a:	18ba      	adds	r2, r7, r2
 8005a8c:	8812      	ldrh	r2, [r2, #0]
 8005a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a96:	1dbb      	adds	r3, r7, #6
 8005a98:	881c      	ldrh	r4, [r3, #0]
 8005a9a:	2308      	movs	r3, #8
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	230a      	movs	r3, #10
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	8819      	ldrh	r1, [r3, #0]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	0023      	movs	r3, r4
 8005ab2:	f000 f92f 	bl	8005d14 <I2C_RequestMemoryRead>
 8005ab6:	1e03      	subs	r3, r0, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2240      	movs	r2, #64	; 0x40
 8005abe:	2100      	movs	r1, #0
 8005ac0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e0b9      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2bff      	cmp	r3, #255	; 0xff
 8005ace:	d911      	bls.n	8005af4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	22ff      	movs	r2, #255	; 0xff
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	045c      	lsls	r4, r3, #17
 8005ae0:	230a      	movs	r3, #10
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	8819      	ldrh	r1, [r3, #0]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4b56      	ldr	r3, [pc, #344]	; (8005c44 <HAL_I2C_Mem_Read+0x260>)
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	0023      	movs	r3, r4
 8005aee:	f000 fac9 	bl	8006084 <I2C_TransferConfig>
 8005af2:	e012      	b.n	8005b1a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	2380      	movs	r3, #128	; 0x80
 8005b06:	049c      	lsls	r4, r3, #18
 8005b08:	230a      	movs	r3, #10
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	8819      	ldrh	r1, [r3, #0]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <HAL_I2C_Mem_Read+0x260>)
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0023      	movs	r3, r4
 8005b16:	f000 fab5 	bl	8006084 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	0013      	movs	r3, r2
 8005b24:	2200      	movs	r2, #0
 8005b26:	2104      	movs	r1, #4
 8005b28:	f000 f978 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e082      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d03a      	beq.n	8005be6 <HAL_I2C_Mem_Read+0x202>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d136      	bne.n	8005be6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	0013      	movs	r3, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	2180      	movs	r1, #128	; 0x80
 8005b86:	f000 f949 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	1e03      	subs	r3, r0, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e053      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	2bff      	cmp	r3, #255	; 0xff
 8005b9a:	d911      	bls.n	8005bc0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	22ff      	movs	r2, #255	; 0xff
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	045c      	lsls	r4, r3, #17
 8005bac:	230a      	movs	r3, #10
 8005bae:	18fb      	adds	r3, r7, r3
 8005bb0:	8819      	ldrh	r1, [r3, #0]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	0023      	movs	r3, r4
 8005bba:	f000 fa63 	bl	8006084 <I2C_TransferConfig>
 8005bbe:	e012      	b.n	8005be6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	049c      	lsls	r4, r3, #18
 8005bd4:	230a      	movs	r3, #10
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	8819      	ldrh	r1, [r3, #0]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	0023      	movs	r3, r4
 8005be2:	f000 fa4f 	bl	8006084 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d194      	bne.n	8005b1a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f98e 	bl	8005f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bfc:	1e03      	subs	r3, r0, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e01a      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	490c      	ldr	r1, [pc, #48]	; (8005c48 <HAL_I2C_Mem_Read+0x264>)
 8005c18:	400a      	ands	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2241      	movs	r2, #65	; 0x41
 8005c20:	2120      	movs	r1, #32
 8005c22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2242      	movs	r2, #66	; 0x42
 8005c28:	2100      	movs	r1, #0
 8005c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2240      	movs	r2, #64	; 0x40
 8005c30:	2100      	movs	r1, #0
 8005c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b007      	add	sp, #28
 8005c40:	bd90      	pop	{r4, r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	80002400 	.word	0x80002400
 8005c48:	fe00e800 	.word	0xfe00e800

08005c4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af02      	add	r7, sp, #8
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	000c      	movs	r4, r1
 8005c56:	0010      	movs	r0, r2
 8005c58:	0019      	movs	r1, r3
 8005c5a:	250a      	movs	r5, #10
 8005c5c:	197b      	adds	r3, r7, r5
 8005c5e:	1c22      	adds	r2, r4, #0
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	2308      	movs	r3, #8
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	1c02      	adds	r2, r0, #0
 8005c68:	801a      	strh	r2, [r3, #0]
 8005c6a:	1dbb      	adds	r3, r7, #6
 8005c6c:	1c0a      	adds	r2, r1, #0
 8005c6e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	045c      	lsls	r4, r3, #17
 8005c7a:	197b      	adds	r3, r7, r5
 8005c7c:	8819      	ldrh	r1, [r3, #0]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <I2C_RequestMemoryWrite+0xc4>)
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	0023      	movs	r3, r4
 8005c86:	f000 f9fd 	bl	8006084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	6a39      	ldr	r1, [r7, #32]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f902 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c96:	1e03      	subs	r3, r0, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e033      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c9e:	1dbb      	adds	r3, r7, #6
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d107      	bne.n	8005cb6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb4:	e019      	b.n	8005cea <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cca:	6a39      	ldr	r1, [r7, #32]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 f8e3 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd4:	1e03      	subs	r3, r0, #0
 8005cd6:	d001      	beq.n	8005cdc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e014      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cdc:	2308      	movs	r3, #8
 8005cde:	18fb      	adds	r3, r7, r3
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005cea:	6a3a      	ldr	r2, [r7, #32]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	0013      	movs	r3, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	; 0x80
 8005cf8:	f000 f890 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005cfc:	1e03      	subs	r3, r0, #0
 8005cfe:	d001      	beq.n	8005d04 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b004      	add	sp, #16
 8005d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	80002000 	.word	0x80002000

08005d14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	000c      	movs	r4, r1
 8005d1e:	0010      	movs	r0, r2
 8005d20:	0019      	movs	r1, r3
 8005d22:	250a      	movs	r5, #10
 8005d24:	197b      	adds	r3, r7, r5
 8005d26:	1c22      	adds	r2, r4, #0
 8005d28:	801a      	strh	r2, [r3, #0]
 8005d2a:	2308      	movs	r3, #8
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	1c02      	adds	r2, r0, #0
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	1dbb      	adds	r3, r7, #6
 8005d34:	1c0a      	adds	r2, r1, #0
 8005d36:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d38:	1dbb      	adds	r3, r7, #6
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	197b      	adds	r3, r7, r5
 8005d40:	8819      	ldrh	r1, [r3, #0]
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <I2C_RequestMemoryRead+0xc0>)
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f000 f99b 	bl	8006084 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	6a39      	ldr	r1, [r7, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f8a0 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d5a:	1e03      	subs	r3, r0, #0
 8005d5c:	d001      	beq.n	8005d62 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e033      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d62:	1dbb      	adds	r3, r7, #6
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d107      	bne.n	8005d7a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28
 8005d78:	e019      	b.n	8005dae <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	6a39      	ldr	r1, [r7, #32]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	0018      	movs	r0, r3
 8005d94:	f000 f881 	bl	8005e9a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d98:	1e03      	subs	r3, r0, #0
 8005d9a:	d001      	beq.n	8005da0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e014      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005da0:	2308      	movs	r3, #8
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	0013      	movs	r3, r2
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	f000 f82e 	bl	8005e1c <I2C_WaitOnFlagUntilTimeout>
 8005dc0:	1e03      	subs	r3, r0, #0
 8005dc2:	d001      	beq.n	8005dc8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	80002000 	.word	0x80002000

08005dd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2202      	movs	r2, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d103      	bne.n	8005df6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d007      	beq.n	8005e14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2101      	movs	r1, #1
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
  }
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	1dfb      	adds	r3, r7, #7
 8005e2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e2c:	e021      	b.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	d01e      	beq.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fe fc86 	bl	8004744 <HAL_GetTick>
 8005e38:	0002      	movs	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d113      	bne.n	8005e72 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	2220      	movs	r2, #32
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2241      	movs	r2, #65	; 0x41
 8005e5a:	2120      	movs	r1, #32
 8005e5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2242      	movs	r2, #66	; 0x42
 8005e62:	2100      	movs	r1, #0
 8005e64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2240      	movs	r2, #64	; 0x40
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e00f      	b.n	8005e92 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	425a      	negs	r2, r3
 8005e82:	4153      	adcs	r3, r2
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	001a      	movs	r2, r3
 8005e88:	1dfb      	adds	r3, r7, #7
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d0ce      	beq.n	8005e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b004      	add	sp, #16
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ea6:	e02b      	b.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	0018      	movs	r0, r3
 8005eb0:	f000 f86e 	bl	8005f90 <I2C_IsAcknowledgeFailed>
 8005eb4:	1e03      	subs	r3, r0, #0
 8005eb6:	d001      	beq.n	8005ebc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e029      	b.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	d01e      	beq.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fe fc3f 	bl	8004744 <HAL_GetTick>
 8005ec6:	0002      	movs	r2, r0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d113      	bne.n	8005f00 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	2220      	movs	r2, #32
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2241      	movs	r2, #65	; 0x41
 8005ee8:	2120      	movs	r1, #32
 8005eea:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2242      	movs	r2, #66	; 0x42
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	2100      	movs	r1, #0
 8005efa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e007      	b.n	8005f10 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	2202      	movs	r2, #2
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d1cc      	bne.n	8005ea8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	0018      	movs	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b004      	add	sp, #16
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f24:	e028      	b.n	8005f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 f82f 	bl	8005f90 <I2C_IsAcknowledgeFailed>
 8005f32:	1e03      	subs	r3, r0, #0
 8005f34:	d001      	beq.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e026      	b.n	8005f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3a:	f7fe fc03 	bl	8004744 <HAL_GetTick>
 8005f3e:	0002      	movs	r2, r0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d302      	bcc.n	8005f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d113      	bne.n	8005f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f54:	2220      	movs	r2, #32
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2241      	movs	r2, #65	; 0x41
 8005f60:	2120      	movs	r1, #32
 8005f62:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2242      	movs	r2, #66	; 0x42
 8005f68:	2100      	movs	r1, #0
 8005f6a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2240      	movs	r2, #64	; 0x40
 8005f70:	2100      	movs	r1, #0
 8005f72:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e007      	b.n	8005f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d1cf      	bne.n	8005f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	0018      	movs	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	b004      	add	sp, #16
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d164      	bne.n	8006074 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685a      	ldr	r2, [r3, #4]
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	049b      	lsls	r3, r3, #18
 8005fb4:	401a      	ands	r2, r3
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	049b      	lsls	r3, r3, #18
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d02b      	beq.n	8006016 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	01c9      	lsls	r1, r1, #7
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fd0:	e021      	b.n	8006016 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	d01e      	beq.n	8006016 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fe fbb4 	bl	8004744 <HAL_GetTick>
 8005fdc:	0002      	movs	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <I2C_IsAcknowledgeFailed+0x5e>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d113      	bne.n	8006016 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2241      	movs	r2, #65	; 0x41
 8005ffe:	2120      	movs	r1, #32
 8006000:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2242      	movs	r2, #66	; 0x42
 8006006:	2100      	movs	r1, #0
 8006008:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	2100      	movs	r1, #0
 8006010:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e02f      	b.n	8006076 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2220      	movs	r2, #32
 800601e:	4013      	ands	r3, r2
 8006020:	2b20      	cmp	r3, #32
 8006022:	d1d6      	bne.n	8005fd2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2210      	movs	r2, #16
 800602a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2220      	movs	r2, #32
 8006032:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	0018      	movs	r0, r3
 8006038:	f7ff fece 	bl	8005dd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	490e      	ldr	r1, [pc, #56]	; (8006080 <I2C_IsAcknowledgeFailed+0xf0>)
 8006048:	400a      	ands	r2, r1
 800604a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	2204      	movs	r2, #4
 8006052:	431a      	orrs	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2241      	movs	r2, #65	; 0x41
 800605c:	2120      	movs	r1, #32
 800605e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2242      	movs	r2, #66	; 0x42
 8006064:	2100      	movs	r1, #0
 8006066:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	0018      	movs	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	b004      	add	sp, #16
 800607c:	bd80      	pop	{r7, pc}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	fe00e800 	.word	0xfe00e800

08006084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	0008      	movs	r0, r1
 800608e:	0011      	movs	r1, r2
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	240a      	movs	r4, #10
 8006094:	193b      	adds	r3, r7, r4
 8006096:	1c02      	adds	r2, r0, #0
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	2009      	movs	r0, #9
 800609c:	183b      	adds	r3, r7, r0
 800609e:	1c0a      	adds	r2, r1, #0
 80060a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	0d51      	lsrs	r1, r2, #21
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	00d2      	lsls	r2, r2, #3
 80060b0:	400a      	ands	r2, r1
 80060b2:	490e      	ldr	r1, [pc, #56]	; (80060ec <I2C_TransferConfig+0x68>)
 80060b4:	430a      	orrs	r2, r1
 80060b6:	43d2      	mvns	r2, r2
 80060b8:	401a      	ands	r2, r3
 80060ba:	0011      	movs	r1, r2
 80060bc:	193b      	adds	r3, r7, r4
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	059b      	lsls	r3, r3, #22
 80060c2:	0d9a      	lsrs	r2, r3, #22
 80060c4:	183b      	adds	r3, r7, r0
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	0418      	lsls	r0, r3, #16
 80060ca:	23ff      	movs	r3, #255	; 0xff
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	4003      	ands	r3, r0
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	431a      	orrs	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80060e2:	46c0      	nop			; (mov r8, r8)
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b005      	add	sp, #20
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	03ff63ff 	.word	0x03ff63ff

080060f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2241      	movs	r2, #65	; 0x41
 80060fe:	5c9b      	ldrb	r3, [r3, r2]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b20      	cmp	r3, #32
 8006104:	d138      	bne.n	8006178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	5c9b      	ldrb	r3, [r3, r2]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006110:	2302      	movs	r3, #2
 8006112:	e032      	b.n	800617a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	2101      	movs	r1, #1
 800611a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2241      	movs	r2, #65	; 0x41
 8006120:	2124      	movs	r1, #36	; 0x24
 8006122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	438a      	bics	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4911      	ldr	r1, [pc, #68]	; (8006184 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006140:	400a      	ands	r2, r1
 8006142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2101      	movs	r1, #1
 8006160:	430a      	orrs	r2, r1
 8006162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2241      	movs	r2, #65	; 0x41
 8006168:	2120      	movs	r1, #32
 800616a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2240      	movs	r2, #64	; 0x40
 8006170:	2100      	movs	r1, #0
 8006172:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	e000      	b.n	800617a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006178:	2302      	movs	r3, #2
  }
}
 800617a:	0018      	movs	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	b002      	add	sp, #8
 8006180:	bd80      	pop	{r7, pc}
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	ffffefff 	.word	0xffffefff

08006188 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2241      	movs	r2, #65	; 0x41
 8006196:	5c9b      	ldrb	r3, [r3, r2]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b20      	cmp	r3, #32
 800619c:	d139      	bne.n	8006212 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2240      	movs	r2, #64	; 0x40
 80061a2:	5c9b      	ldrb	r3, [r3, r2]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e033      	b.n	8006214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	2101      	movs	r1, #1
 80061b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2241      	movs	r2, #65	; 0x41
 80061b8:	2124      	movs	r1, #36	; 0x24
 80061ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2101      	movs	r1, #1
 80061c8:	438a      	bics	r2, r1
 80061ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a11      	ldr	r2, [pc, #68]	; (800621c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2101      	movs	r1, #1
 80061fa:	430a      	orrs	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2241      	movs	r2, #65	; 0x41
 8006202:	2120      	movs	r1, #32
 8006204:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2240      	movs	r2, #64	; 0x40
 800620a:	2100      	movs	r1, #0
 800620c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e000      	b.n	8006214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006212:	2302      	movs	r3, #2
  }
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b004      	add	sp, #16
 800621a:	bd80      	pop	{r7, pc}
 800621c:	fffff0ff 	.word	0xfffff0ff

08006220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e301      	b.n	8006836 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2201      	movs	r2, #1
 8006238:	4013      	ands	r3, r2
 800623a:	d100      	bne.n	800623e <HAL_RCC_OscConfig+0x1e>
 800623c:	e08d      	b.n	800635a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800623e:	4bc3      	ldr	r3, [pc, #780]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	220c      	movs	r2, #12
 8006244:	4013      	ands	r3, r2
 8006246:	2b04      	cmp	r3, #4
 8006248:	d00e      	beq.n	8006268 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800624a:	4bc0      	ldr	r3, [pc, #768]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	220c      	movs	r2, #12
 8006250:	4013      	ands	r3, r2
 8006252:	2b08      	cmp	r3, #8
 8006254:	d116      	bne.n	8006284 <HAL_RCC_OscConfig+0x64>
 8006256:	4bbd      	ldr	r3, [pc, #756]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	025b      	lsls	r3, r3, #9
 800625e:	401a      	ands	r2, r3
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	025b      	lsls	r3, r3, #9
 8006264:	429a      	cmp	r2, r3
 8006266:	d10d      	bne.n	8006284 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006268:	4bb8      	ldr	r3, [pc, #736]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	029b      	lsls	r3, r3, #10
 8006270:	4013      	ands	r3, r2
 8006272:	d100      	bne.n	8006276 <HAL_RCC_OscConfig+0x56>
 8006274:	e070      	b.n	8006358 <HAL_RCC_OscConfig+0x138>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d000      	beq.n	8006280 <HAL_RCC_OscConfig+0x60>
 800627e:	e06b      	b.n	8006358 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e2d8      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <HAL_RCC_OscConfig+0x7c>
 800628c:	4baf      	ldr	r3, [pc, #700]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	4bae      	ldr	r3, [pc, #696]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	0249      	lsls	r1, r1, #9
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	e02f      	b.n	80062fc <HAL_RCC_OscConfig+0xdc>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d10c      	bne.n	80062be <HAL_RCC_OscConfig+0x9e>
 80062a4:	4ba9      	ldr	r3, [pc, #676]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4ba8      	ldr	r3, [pc, #672]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062aa:	49a9      	ldr	r1, [pc, #676]	; (8006550 <HAL_RCC_OscConfig+0x330>)
 80062ac:	400a      	ands	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	4ba6      	ldr	r3, [pc, #664]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4ba5      	ldr	r3, [pc, #660]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062b6:	49a7      	ldr	r1, [pc, #668]	; (8006554 <HAL_RCC_OscConfig+0x334>)
 80062b8:	400a      	ands	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e01e      	b.n	80062fc <HAL_RCC_OscConfig+0xdc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d10e      	bne.n	80062e4 <HAL_RCC_OscConfig+0xc4>
 80062c6:	4ba1      	ldr	r3, [pc, #644]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4ba0      	ldr	r3, [pc, #640]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062cc:	2180      	movs	r1, #128	; 0x80
 80062ce:	02c9      	lsls	r1, r1, #11
 80062d0:	430a      	orrs	r2, r1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	4b9d      	ldr	r3, [pc, #628]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	4b9c      	ldr	r3, [pc, #624]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	0249      	lsls	r1, r1, #9
 80062de:	430a      	orrs	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e00b      	b.n	80062fc <HAL_RCC_OscConfig+0xdc>
 80062e4:	4b99      	ldr	r3, [pc, #612]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	4b98      	ldr	r3, [pc, #608]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062ea:	4999      	ldr	r1, [pc, #612]	; (8006550 <HAL_RCC_OscConfig+0x330>)
 80062ec:	400a      	ands	r2, r1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	4b96      	ldr	r3, [pc, #600]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b95      	ldr	r3, [pc, #596]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80062f6:	4997      	ldr	r1, [pc, #604]	; (8006554 <HAL_RCC_OscConfig+0x334>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d014      	beq.n	800632e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7fe fa1e 	bl	8004744 <HAL_GetTick>
 8006308:	0003      	movs	r3, r0
 800630a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800630e:	f7fe fa19 	bl	8004744 <HAL_GetTick>
 8006312:	0002      	movs	r2, r0
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b64      	cmp	r3, #100	; 0x64
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e28a      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006320:	4b8a      	ldr	r3, [pc, #552]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	4013      	ands	r3, r2
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0xee>
 800632c:	e015      	b.n	800635a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632e:	f7fe fa09 	bl	8004744 <HAL_GetTick>
 8006332:	0003      	movs	r3, r0
 8006334:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006338:	f7fe fa04 	bl	8004744 <HAL_GetTick>
 800633c:	0002      	movs	r2, r0
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	; 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e275      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634a:	4b80      	ldr	r3, [pc, #512]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	2380      	movs	r3, #128	; 0x80
 8006350:	029b      	lsls	r3, r3, #10
 8006352:	4013      	ands	r3, r2
 8006354:	d1f0      	bne.n	8006338 <HAL_RCC_OscConfig+0x118>
 8006356:	e000      	b.n	800635a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006358:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2202      	movs	r2, #2
 8006360:	4013      	ands	r3, r2
 8006362:	d100      	bne.n	8006366 <HAL_RCC_OscConfig+0x146>
 8006364:	e069      	b.n	800643a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006366:	4b79      	ldr	r3, [pc, #484]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	220c      	movs	r2, #12
 800636c:	4013      	ands	r3, r2
 800636e:	d00b      	beq.n	8006388 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006370:	4b76      	ldr	r3, [pc, #472]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	220c      	movs	r2, #12
 8006376:	4013      	ands	r3, r2
 8006378:	2b08      	cmp	r3, #8
 800637a:	d11c      	bne.n	80063b6 <HAL_RCC_OscConfig+0x196>
 800637c:	4b73      	ldr	r3, [pc, #460]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	025b      	lsls	r3, r3, #9
 8006384:	4013      	ands	r3, r2
 8006386:	d116      	bne.n	80063b6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006388:	4b70      	ldr	r3, [pc, #448]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2202      	movs	r2, #2
 800638e:	4013      	ands	r3, r2
 8006390:	d005      	beq.n	800639e <HAL_RCC_OscConfig+0x17e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e24b      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	4b6b      	ldr	r3, [pc, #428]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	22f8      	movs	r2, #248	; 0xf8
 80063a4:	4393      	bics	r3, r2
 80063a6:	0019      	movs	r1, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	00da      	lsls	r2, r3, #3
 80063ae:	4b67      	ldr	r3, [pc, #412]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063b0:	430a      	orrs	r2, r1
 80063b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b4:	e041      	b.n	800643a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d024      	beq.n	8006408 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063be:	4b63      	ldr	r3, [pc, #396]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b62      	ldr	r3, [pc, #392]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063c4:	2101      	movs	r1, #1
 80063c6:	430a      	orrs	r2, r1
 80063c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fe f9bb 	bl	8004744 <HAL_GetTick>
 80063ce:	0003      	movs	r3, r0
 80063d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d2:	e008      	b.n	80063e6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063d4:	f7fe f9b6 	bl	8004744 <HAL_GetTick>
 80063d8:	0002      	movs	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d901      	bls.n	80063e6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e227      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e6:	4b59      	ldr	r3, [pc, #356]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2202      	movs	r2, #2
 80063ec:	4013      	ands	r3, r2
 80063ee:	d0f1      	beq.n	80063d4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f0:	4b56      	ldr	r3, [pc, #344]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	22f8      	movs	r2, #248	; 0xf8
 80063f6:	4393      	bics	r3, r2
 80063f8:	0019      	movs	r1, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	4b52      	ldr	r3, [pc, #328]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006402:	430a      	orrs	r2, r1
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e018      	b.n	800643a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006408:	4b50      	ldr	r3, [pc, #320]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	4b4f      	ldr	r3, [pc, #316]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800640e:	2101      	movs	r1, #1
 8006410:	438a      	bics	r2, r1
 8006412:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7fe f996 	bl	8004744 <HAL_GetTick>
 8006418:	0003      	movs	r3, r0
 800641a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800641e:	f7fe f991 	bl	8004744 <HAL_GetTick>
 8006422:	0002      	movs	r2, r0
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e202      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006430:	4b46      	ldr	r3, [pc, #280]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2202      	movs	r2, #2
 8006436:	4013      	ands	r3, r2
 8006438:	d1f1      	bne.n	800641e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2208      	movs	r2, #8
 8006440:	4013      	ands	r3, r2
 8006442:	d036      	beq.n	80064b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d019      	beq.n	8006480 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800644c:	4b3f      	ldr	r3, [pc, #252]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 800644e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006450:	4b3e      	ldr	r3, [pc, #248]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006452:	2101      	movs	r1, #1
 8006454:	430a      	orrs	r2, r1
 8006456:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006458:	f7fe f974 	bl	8004744 <HAL_GetTick>
 800645c:	0003      	movs	r3, r0
 800645e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006462:	f7fe f96f 	bl	8004744 <HAL_GetTick>
 8006466:	0002      	movs	r2, r0
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e1e0      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006474:	4b35      	ldr	r3, [pc, #212]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2202      	movs	r2, #2
 800647a:	4013      	ands	r3, r2
 800647c:	d0f1      	beq.n	8006462 <HAL_RCC_OscConfig+0x242>
 800647e:	e018      	b.n	80064b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006480:	4b32      	ldr	r3, [pc, #200]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006484:	4b31      	ldr	r3, [pc, #196]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006486:	2101      	movs	r1, #1
 8006488:	438a      	bics	r2, r1
 800648a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648c:	f7fe f95a 	bl	8004744 <HAL_GetTick>
 8006490:	0003      	movs	r3, r0
 8006492:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006496:	f7fe f955 	bl	8004744 <HAL_GetTick>
 800649a:	0002      	movs	r2, r0
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e1c6      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a8:	4b28      	ldr	r3, [pc, #160]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	2202      	movs	r2, #2
 80064ae:	4013      	ands	r3, r2
 80064b0:	d1f1      	bne.n	8006496 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2204      	movs	r2, #4
 80064b8:	4013      	ands	r3, r2
 80064ba:	d100      	bne.n	80064be <HAL_RCC_OscConfig+0x29e>
 80064bc:	e0b4      	b.n	8006628 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064be:	201f      	movs	r0, #31
 80064c0:	183b      	adds	r3, r7, r0
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064c6:	4b21      	ldr	r3, [pc, #132]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	2380      	movs	r3, #128	; 0x80
 80064cc:	055b      	lsls	r3, r3, #21
 80064ce:	4013      	ands	r3, r2
 80064d0:	d110      	bne.n	80064f4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	4b1d      	ldr	r3, [pc, #116]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80064d8:	2180      	movs	r1, #128	; 0x80
 80064da:	0549      	lsls	r1, r1, #21
 80064dc:	430a      	orrs	r2, r1
 80064de:	61da      	str	r2, [r3, #28]
 80064e0:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	2380      	movs	r3, #128	; 0x80
 80064e6:	055b      	lsls	r3, r3, #21
 80064e8:	4013      	ands	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064ee:	183b      	adds	r3, r7, r0
 80064f0:	2201      	movs	r2, #1
 80064f2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	d11a      	bne.n	8006536 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 8006506:	2180      	movs	r1, #128	; 0x80
 8006508:	0049      	lsls	r1, r1, #1
 800650a:	430a      	orrs	r2, r1
 800650c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800650e:	f7fe f919 	bl	8004744 <HAL_GetTick>
 8006512:	0003      	movs	r3, r0
 8006514:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006518:	f7fe f914 	bl	8004744 <HAL_GetTick>
 800651c:	0002      	movs	r2, r0
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e185      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <HAL_RCC_OscConfig+0x338>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	; 0x80
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	4013      	ands	r3, r2
 8006534:	d0f0      	beq.n	8006518 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10e      	bne.n	800655c <HAL_RCC_OscConfig+0x33c>
 800653e:	4b03      	ldr	r3, [pc, #12]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	4b02      	ldr	r3, [pc, #8]	; (800654c <HAL_RCC_OscConfig+0x32c>)
 8006544:	2101      	movs	r1, #1
 8006546:	430a      	orrs	r2, r1
 8006548:	621a      	str	r2, [r3, #32]
 800654a:	e035      	b.n	80065b8 <HAL_RCC_OscConfig+0x398>
 800654c:	40021000 	.word	0x40021000
 8006550:	fffeffff 	.word	0xfffeffff
 8006554:	fffbffff 	.word	0xfffbffff
 8006558:	40007000 	.word	0x40007000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10c      	bne.n	800657e <HAL_RCC_OscConfig+0x35e>
 8006564:	4bb6      	ldr	r3, [pc, #728]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	4bb5      	ldr	r3, [pc, #724]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800656a:	2101      	movs	r1, #1
 800656c:	438a      	bics	r2, r1
 800656e:	621a      	str	r2, [r3, #32]
 8006570:	4bb3      	ldr	r3, [pc, #716]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	4bb2      	ldr	r3, [pc, #712]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006576:	2104      	movs	r1, #4
 8006578:	438a      	bics	r2, r1
 800657a:	621a      	str	r2, [r3, #32]
 800657c:	e01c      	b.n	80065b8 <HAL_RCC_OscConfig+0x398>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b05      	cmp	r3, #5
 8006584:	d10c      	bne.n	80065a0 <HAL_RCC_OscConfig+0x380>
 8006586:	4bae      	ldr	r3, [pc, #696]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006588:	6a1a      	ldr	r2, [r3, #32]
 800658a:	4bad      	ldr	r3, [pc, #692]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800658c:	2104      	movs	r1, #4
 800658e:	430a      	orrs	r2, r1
 8006590:	621a      	str	r2, [r3, #32]
 8006592:	4bab      	ldr	r3, [pc, #684]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006594:	6a1a      	ldr	r2, [r3, #32]
 8006596:	4baa      	ldr	r3, [pc, #680]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006598:	2101      	movs	r1, #1
 800659a:	430a      	orrs	r2, r1
 800659c:	621a      	str	r2, [r3, #32]
 800659e:	e00b      	b.n	80065b8 <HAL_RCC_OscConfig+0x398>
 80065a0:	4ba7      	ldr	r3, [pc, #668]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80065a2:	6a1a      	ldr	r2, [r3, #32]
 80065a4:	4ba6      	ldr	r3, [pc, #664]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80065a6:	2101      	movs	r1, #1
 80065a8:	438a      	bics	r2, r1
 80065aa:	621a      	str	r2, [r3, #32]
 80065ac:	4ba4      	ldr	r3, [pc, #656]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80065ae:	6a1a      	ldr	r2, [r3, #32]
 80065b0:	4ba3      	ldr	r3, [pc, #652]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80065b2:	2104      	movs	r1, #4
 80065b4:	438a      	bics	r2, r1
 80065b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d014      	beq.n	80065ea <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c0:	f7fe f8c0 	bl	8004744 <HAL_GetTick>
 80065c4:	0003      	movs	r3, r0
 80065c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c8:	e009      	b.n	80065de <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ca:	f7fe f8bb 	bl	8004744 <HAL_GetTick>
 80065ce:	0002      	movs	r2, r0
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	4a9b      	ldr	r2, [pc, #620]	; (8006844 <HAL_RCC_OscConfig+0x624>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e12b      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065de:	4b98      	ldr	r3, [pc, #608]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	2202      	movs	r2, #2
 80065e4:	4013      	ands	r3, r2
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x3aa>
 80065e8:	e013      	b.n	8006612 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ea:	f7fe f8ab 	bl	8004744 <HAL_GetTick>
 80065ee:	0003      	movs	r3, r0
 80065f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f2:	e009      	b.n	8006608 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f4:	f7fe f8a6 	bl	8004744 <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	4a91      	ldr	r2, [pc, #580]	; (8006844 <HAL_RCC_OscConfig+0x624>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e116      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006608:	4b8d      	ldr	r3, [pc, #564]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	2202      	movs	r2, #2
 800660e:	4013      	ands	r3, r2
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006612:	231f      	movs	r3, #31
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d105      	bne.n	8006628 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800661c:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800661e:	69da      	ldr	r2, [r3, #28]
 8006620:	4b87      	ldr	r3, [pc, #540]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006622:	4989      	ldr	r1, [pc, #548]	; (8006848 <HAL_RCC_OscConfig+0x628>)
 8006624:	400a      	ands	r2, r1
 8006626:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2210      	movs	r2, #16
 800662e:	4013      	ands	r3, r2
 8006630:	d063      	beq.n	80066fa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d12a      	bne.n	8006690 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800663a:	4b81      	ldr	r3, [pc, #516]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800663c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663e:	4b80      	ldr	r3, [pc, #512]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006640:	2104      	movs	r1, #4
 8006642:	430a      	orrs	r2, r1
 8006644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006646:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800664a:	4b7d      	ldr	r3, [pc, #500]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800664c:	2101      	movs	r1, #1
 800664e:	430a      	orrs	r2, r1
 8006650:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006652:	f7fe f877 	bl	8004744 <HAL_GetTick>
 8006656:	0003      	movs	r3, r0
 8006658:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800665c:	f7fe f872 	bl	8004744 <HAL_GetTick>
 8006660:	0002      	movs	r2, r0
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e0e3      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800666e:	4b74      	ldr	r3, [pc, #464]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006672:	2202      	movs	r2, #2
 8006674:	4013      	ands	r3, r2
 8006676:	d0f1      	beq.n	800665c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006678:	4b71      	ldr	r3, [pc, #452]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	22f8      	movs	r2, #248	; 0xf8
 800667e:	4393      	bics	r3, r2
 8006680:	0019      	movs	r1, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	00da      	lsls	r2, r3, #3
 8006688:	4b6d      	ldr	r3, [pc, #436]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800668a:	430a      	orrs	r2, r1
 800668c:	635a      	str	r2, [r3, #52]	; 0x34
 800668e:	e034      	b.n	80066fa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	3305      	adds	r3, #5
 8006696:	d111      	bne.n	80066bc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006698:	4b69      	ldr	r3, [pc, #420]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800669a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800669c:	4b68      	ldr	r3, [pc, #416]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800669e:	2104      	movs	r1, #4
 80066a0:	438a      	bics	r2, r1
 80066a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80066a4:	4b66      	ldr	r3, [pc, #408]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	22f8      	movs	r2, #248	; 0xf8
 80066aa:	4393      	bics	r3, r2
 80066ac:	0019      	movs	r1, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	00da      	lsls	r2, r3, #3
 80066b4:	4b62      	ldr	r3, [pc, #392]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34
 80066ba:	e01e      	b.n	80066fa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80066bc:	4b60      	ldr	r3, [pc, #384]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066c0:	4b5f      	ldr	r3, [pc, #380]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066c2:	2104      	movs	r1, #4
 80066c4:	430a      	orrs	r2, r1
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80066c8:	4b5d      	ldr	r3, [pc, #372]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066cc:	4b5c      	ldr	r3, [pc, #368]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d4:	f7fe f836 	bl	8004744 <HAL_GetTick>
 80066d8:	0003      	movs	r3, r0
 80066da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80066de:	f7fe f831 	bl	8004744 <HAL_GetTick>
 80066e2:	0002      	movs	r2, r0
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e0a2      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80066f0:	4b53      	ldr	r3, [pc, #332]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80066f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f4:	2202      	movs	r2, #2
 80066f6:	4013      	ands	r3, r2
 80066f8:	d1f1      	bne.n	80066de <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d100      	bne.n	8006704 <HAL_RCC_OscConfig+0x4e4>
 8006702:	e097      	b.n	8006834 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006704:	4b4e      	ldr	r3, [pc, #312]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	220c      	movs	r2, #12
 800670a:	4013      	ands	r3, r2
 800670c:	2b08      	cmp	r3, #8
 800670e:	d100      	bne.n	8006712 <HAL_RCC_OscConfig+0x4f2>
 8006710:	e06b      	b.n	80067ea <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d14c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671a:	4b49      	ldr	r3, [pc, #292]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	4b48      	ldr	r3, [pc, #288]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006720:	494a      	ldr	r1, [pc, #296]	; (800684c <HAL_RCC_OscConfig+0x62c>)
 8006722:	400a      	ands	r2, r1
 8006724:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006726:	f7fe f80d 	bl	8004744 <HAL_GetTick>
 800672a:	0003      	movs	r3, r0
 800672c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800672e:	e008      	b.n	8006742 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006730:	f7fe f808 	bl	8004744 <HAL_GetTick>
 8006734:	0002      	movs	r2, r0
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	1ad3      	subs	r3, r2, r3
 800673a:	2b02      	cmp	r3, #2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e079      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006742:	4b3f      	ldr	r3, [pc, #252]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	049b      	lsls	r3, r3, #18
 800674a:	4013      	ands	r3, r2
 800674c:	d1f0      	bne.n	8006730 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006752:	220f      	movs	r2, #15
 8006754:	4393      	bics	r3, r2
 8006756:	0019      	movs	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675c:	4b38      	ldr	r3, [pc, #224]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800675e:	430a      	orrs	r2, r1
 8006760:	62da      	str	r2, [r3, #44]	; 0x2c
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4a3a      	ldr	r2, [pc, #232]	; (8006850 <HAL_RCC_OscConfig+0x630>)
 8006768:	4013      	ands	r3, r2
 800676a:	0019      	movs	r1, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	431a      	orrs	r2, r3
 8006776:	4b32      	ldr	r3, [pc, #200]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677c:	4b30      	ldr	r3, [pc, #192]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 8006782:	2180      	movs	r1, #128	; 0x80
 8006784:	0449      	lsls	r1, r1, #17
 8006786:	430a      	orrs	r2, r1
 8006788:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678a:	f7fd ffdb 	bl	8004744 <HAL_GetTick>
 800678e:	0003      	movs	r3, r0
 8006790:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006794:	f7fd ffd6 	bl	8004744 <HAL_GetTick>
 8006798:	0002      	movs	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e047      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a6:	4b26      	ldr	r3, [pc, #152]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	2380      	movs	r3, #128	; 0x80
 80067ac:	049b      	lsls	r3, r3, #18
 80067ae:	4013      	ands	r3, r2
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x574>
 80067b2:	e03f      	b.n	8006834 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b4:	4b22      	ldr	r3, [pc, #136]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b21      	ldr	r3, [pc, #132]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067ba:	4924      	ldr	r1, [pc, #144]	; (800684c <HAL_RCC_OscConfig+0x62c>)
 80067bc:	400a      	ands	r2, r1
 80067be:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fd ffc0 	bl	8004744 <HAL_GetTick>
 80067c4:	0003      	movs	r3, r0
 80067c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ca:	f7fd ffbb 	bl	8004744 <HAL_GetTick>
 80067ce:	0002      	movs	r2, r0
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e02c      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067dc:	4b18      	ldr	r3, [pc, #96]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	049b      	lsls	r3, r3, #18
 80067e4:	4013      	ands	r3, r2
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x5aa>
 80067e8:	e024      	b.n	8006834 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e01f      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80067f6:	4b12      	ldr	r3, [pc, #72]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <HAL_RCC_OscConfig+0x620>)
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	2380      	movs	r3, #128	; 0x80
 8006806:	025b      	lsls	r3, r3, #9
 8006808:	401a      	ands	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	429a      	cmp	r2, r3
 8006810:	d10e      	bne.n	8006830 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	220f      	movs	r2, #15
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800681c:	429a      	cmp	r2, r3
 800681e:	d107      	bne.n	8006830 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	23f0      	movs	r3, #240	; 0xf0
 8006824:	039b      	lsls	r3, r3, #14
 8006826:	401a      	ands	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800682c:	429a      	cmp	r2, r3
 800682e:	d001      	beq.n	8006834 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	0018      	movs	r0, r3
 8006838:	46bd      	mov	sp, r7
 800683a:	b008      	add	sp, #32
 800683c:	bd80      	pop	{r7, pc}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	40021000 	.word	0x40021000
 8006844:	00001388 	.word	0x00001388
 8006848:	efffffff 	.word	0xefffffff
 800684c:	feffffff 	.word	0xfeffffff
 8006850:	ffc2ffff 	.word	0xffc2ffff

08006854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0b3      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2201      	movs	r2, #1
 800686e:	4013      	ands	r3, r2
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d911      	bls.n	800689a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b58      	ldr	r3, [pc, #352]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2201      	movs	r2, #1
 800687c:	4393      	bics	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	4b55      	ldr	r3, [pc, #340]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006888:	4b53      	ldr	r3, [pc, #332]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2201      	movs	r2, #1
 800688e:	4013      	ands	r3, r2
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	429a      	cmp	r2, r3
 8006894:	d001      	beq.n	800689a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e09a      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2202      	movs	r2, #2
 80068a0:	4013      	ands	r3, r2
 80068a2:	d015      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2204      	movs	r2, #4
 80068aa:	4013      	ands	r3, r2
 80068ac:	d006      	beq.n	80068bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80068ae:	4b4b      	ldr	r3, [pc, #300]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	4b4a      	ldr	r3, [pc, #296]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068b4:	21e0      	movs	r1, #224	; 0xe0
 80068b6:	00c9      	lsls	r1, r1, #3
 80068b8:	430a      	orrs	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068bc:	4b47      	ldr	r3, [pc, #284]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	22f0      	movs	r2, #240	; 0xf0
 80068c2:	4393      	bics	r3, r2
 80068c4:	0019      	movs	r1, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	4b44      	ldr	r3, [pc, #272]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2201      	movs	r2, #1
 80068d6:	4013      	ands	r3, r2
 80068d8:	d040      	beq.n	800695c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b3e      	ldr	r3, [pc, #248]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	2380      	movs	r3, #128	; 0x80
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	4013      	ands	r3, r2
 80068ec:	d114      	bne.n	8006918 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e06e      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fa:	4b38      	ldr	r3, [pc, #224]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	049b      	lsls	r3, r3, #18
 8006902:	4013      	ands	r3, r2
 8006904:	d108      	bne.n	8006918 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e062      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690a:	4b34      	ldr	r3, [pc, #208]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2202      	movs	r2, #2
 8006910:	4013      	ands	r3, r2
 8006912:	d101      	bne.n	8006918 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e05b      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006918:	4b30      	ldr	r3, [pc, #192]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2203      	movs	r2, #3
 800691e:	4393      	bics	r3, r2
 8006920:	0019      	movs	r1, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800692c:	f7fd ff0a 	bl	8004744 <HAL_GetTick>
 8006930:	0003      	movs	r3, r0
 8006932:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006934:	e009      	b.n	800694a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006936:	f7fd ff05 	bl	8004744 <HAL_GetTick>
 800693a:	0002      	movs	r2, r0
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <HAL_RCC_ClockConfig+0x18c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e042      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	220c      	movs	r2, #12
 8006950:	401a      	ands	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d1ec      	bne.n	8006936 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800695c:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2201      	movs	r2, #1
 8006962:	4013      	ands	r3, r2
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d211      	bcs.n	800698e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2201      	movs	r2, #1
 8006970:	4393      	bics	r3, r2
 8006972:	0019      	movs	r1, r3
 8006974:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <HAL_RCC_ClockConfig+0x184>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	4013      	ands	r3, r2
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d001      	beq.n	800698e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e020      	b.n	80069d0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2204      	movs	r2, #4
 8006994:	4013      	ands	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006998:	4b10      	ldr	r3, [pc, #64]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a11      	ldr	r2, [pc, #68]	; (80069e4 <HAL_RCC_ClockConfig+0x190>)
 800699e:	4013      	ands	r3, r2
 80069a0:	0019      	movs	r1, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80069ac:	f000 f820 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80069b0:	0001      	movs	r1, r0
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <HAL_RCC_ClockConfig+0x188>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	091b      	lsrs	r3, r3, #4
 80069b8:	220f      	movs	r2, #15
 80069ba:	4013      	ands	r3, r2
 80069bc:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <HAL_RCC_ClockConfig+0x194>)
 80069be:	5cd3      	ldrb	r3, [r2, r3]
 80069c0:	000a      	movs	r2, r1
 80069c2:	40da      	lsrs	r2, r3
 80069c4:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCC_ClockConfig+0x198>)
 80069c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80069c8:	2003      	movs	r0, #3
 80069ca:	f7fd fe75 	bl	80046b8 <HAL_InitTick>
  
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	0018      	movs	r0, r3
 80069d2:	46bd      	mov	sp, r7
 80069d4:	b004      	add	sp, #16
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40022000 	.word	0x40022000
 80069dc:	40021000 	.word	0x40021000
 80069e0:	00001388 	.word	0x00001388
 80069e4:	fffff8ff 	.word	0xfffff8ff
 80069e8:	08009ea0 	.word	0x08009ea0
 80069ec:	20000004 	.word	0x20000004

080069f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b08f      	sub	sp, #60	; 0x3c
 80069f4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80069f6:	2314      	movs	r3, #20
 80069f8:	18fb      	adds	r3, r7, r3
 80069fa:	4a2b      	ldr	r2, [pc, #172]	; (8006aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80069fe:	c313      	stmia	r3!, {r0, r1, r4}
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006a04:	1d3b      	adds	r3, r7, #4
 8006a06:	4a29      	ldr	r2, [pc, #164]	; (8006aac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006a0a:	c313      	stmia	r3!, {r0, r1, r4}
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a14:	2300      	movs	r3, #0
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a18:	2300      	movs	r3, #0
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006a24:	4b22      	ldr	r3, [pc, #136]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	220c      	movs	r2, #12
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b04      	cmp	r3, #4
 8006a32:	d002      	beq.n	8006a3a <HAL_RCC_GetSysClockFreq+0x4a>
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d003      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x50>
 8006a38:	e02d      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a3e:	e02d      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	0c9b      	lsrs	r3, r3, #18
 8006a44:	220f      	movs	r2, #15
 8006a46:	4013      	ands	r3, r2
 8006a48:	2214      	movs	r2, #20
 8006a4a:	18ba      	adds	r2, r7, r2
 8006a4c:	5cd3      	ldrb	r3, [r2, r3]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006a50:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	220f      	movs	r2, #15
 8006a56:	4013      	ands	r3, r2
 8006a58:	1d3a      	adds	r2, r7, #4
 8006a5a:	5cd3      	ldrb	r3, [r2, r3]
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	025b      	lsls	r3, r3, #9
 8006a64:	4013      	ands	r3, r2
 8006a66:	d009      	beq.n	8006a7c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a6a:	4812      	ldr	r0, [pc, #72]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a6c:	f7f9 fb60 	bl	8000130 <__udivsi3>
 8006a70:	0003      	movs	r3, r0
 8006a72:	001a      	movs	r2, r3
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	4353      	muls	r3, r2
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7a:	e009      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a7e:	000a      	movs	r2, r1
 8006a80:	0152      	lsls	r2, r2, #5
 8006a82:	1a52      	subs	r2, r2, r1
 8006a84:	0193      	lsls	r3, r2, #6
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	185b      	adds	r3, r3, r1
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a94:	e002      	b.n	8006a9c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a96:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006a9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b00f      	add	sp, #60	; 0x3c
 8006aa4:	bd90      	pop	{r4, r7, pc}
 8006aa6:	46c0      	nop			; (mov r8, r8)
 8006aa8:	08009d80 	.word	0x08009d80
 8006aac:	08009d90 	.word	0x08009d90
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	007a1200 	.word	0x007a1200

08006ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	2380      	movs	r3, #128	; 0x80
 8006ace:	025b      	lsls	r3, r3, #9
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d100      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006ad4:	e08e      	b.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006ad6:	2017      	movs	r0, #23
 8006ad8:	183b      	adds	r3, r7, r0
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ade:	4b57      	ldr	r3, [pc, #348]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006ae0:	69da      	ldr	r2, [r3, #28]
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	055b      	lsls	r3, r3, #21
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	d110      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aea:	4b54      	ldr	r3, [pc, #336]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006aec:	69da      	ldr	r2, [r3, #28]
 8006aee:	4b53      	ldr	r3, [pc, #332]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006af0:	2180      	movs	r1, #128	; 0x80
 8006af2:	0549      	lsls	r1, r1, #21
 8006af4:	430a      	orrs	r2, r1
 8006af6:	61da      	str	r2, [r3, #28]
 8006af8:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	055b      	lsls	r3, r3, #21
 8006b00:	4013      	ands	r3, r2
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b06:	183b      	adds	r3, r7, r0
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0c:	4b4c      	ldr	r3, [pc, #304]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	4013      	ands	r3, r2
 8006b16:	d11a      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b18:	4b49      	ldr	r3, [pc, #292]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	4b48      	ldr	r3, [pc, #288]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	0049      	lsls	r1, r1, #1
 8006b22:	430a      	orrs	r2, r1
 8006b24:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b26:	f7fd fe0d 	bl	8004744 <HAL_GetTick>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b2e:	e008      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b30:	f7fd fe08 	bl	8004744 <HAL_GetTick>
 8006b34:	0002      	movs	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b64      	cmp	r3, #100	; 0x64
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e077      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b42:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d0f0      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b4e:	4b3b      	ldr	r3, [pc, #236]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	23c0      	movs	r3, #192	; 0xc0
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4013      	ands	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d034      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	23c0      	movs	r3, #192	; 0xc0
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4013      	ands	r3, r2
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d02c      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	4a33      	ldr	r2, [pc, #204]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b7a:	4b30      	ldr	r3, [pc, #192]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	4b2f      	ldr	r3, [pc, #188]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b80:	2180      	movs	r1, #128	; 0x80
 8006b82:	0249      	lsls	r1, r1, #9
 8006b84:	430a      	orrs	r2, r1
 8006b86:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b88:	4b2c      	ldr	r3, [pc, #176]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b8e:	492e      	ldr	r1, [pc, #184]	; (8006c48 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006b90:	400a      	ands	r2, r1
 8006b92:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b94:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba2:	f7fd fdcf 	bl	8004744 <HAL_GetTick>
 8006ba6:	0003      	movs	r3, r0
 8006ba8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006baa:	e009      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bac:	f7fd fdca 	bl	8004744 <HAL_GetTick>
 8006bb0:	0002      	movs	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e038      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bca:	4b1c      	ldr	r3, [pc, #112]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	0019      	movs	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	4b18      	ldr	r3, [pc, #96]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bde:	2317      	movs	r3, #23
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d105      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006be8:	4b14      	ldr	r3, [pc, #80]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006bee:	4918      	ldr	r1, [pc, #96]	; (8006c50 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8006bf0:	400a      	ands	r2, r1
 8006bf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	2203      	movs	r2, #3
 8006c04:	4393      	bics	r3, r2
 8006c06:	0019      	movs	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2220      	movs	r2, #32
 8006c18:	4013      	ands	r3, r2
 8006c1a:	d009      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c1c:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	2210      	movs	r2, #16
 8006c22:	4393      	bics	r3, r2
 8006c24:	0019      	movs	r1, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b006      	add	sp, #24
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	40007000 	.word	0x40007000
 8006c44:	fffffcff 	.word	0xfffffcff
 8006c48:	fffeffff 	.word	0xfffeffff
 8006c4c:	00001388 	.word	0x00001388
 8006c50:	efffffff 	.word	0xefffffff

08006c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e042      	b.n	8006cec <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	223d      	movs	r2, #61	; 0x3d
 8006c6a:	5c9b      	ldrb	r3, [r3, r2]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d107      	bne.n	8006c82 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	223c      	movs	r2, #60	; 0x3c
 8006c76:	2100      	movs	r1, #0
 8006c78:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7fd fc97 	bl	80045b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	223d      	movs	r2, #61	; 0x3d
 8006c86:	2102      	movs	r1, #2
 8006c88:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3304      	adds	r3, #4
 8006c92:	0019      	movs	r1, r3
 8006c94:	0010      	movs	r0, r2
 8006c96:	f000 f9dd 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2246      	movs	r2, #70	; 0x46
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	223e      	movs	r2, #62	; 0x3e
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	5499      	strb	r1, [r3, r2]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	223f      	movs	r2, #63	; 0x3f
 8006cae:	2101      	movs	r1, #1
 8006cb0:	5499      	strb	r1, [r3, r2]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	5499      	strb	r1, [r3, r2]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2241      	movs	r2, #65	; 0x41
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2242      	movs	r2, #66	; 0x42
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	5499      	strb	r1, [r3, r2]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2243      	movs	r2, #67	; 0x43
 8006cce:	2101      	movs	r1, #1
 8006cd0:	5499      	strb	r1, [r3, r2]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2244      	movs	r2, #68	; 0x44
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	5499      	strb	r1, [r3, r2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2245      	movs	r2, #69	; 0x45
 8006cde:	2101      	movs	r1, #1
 8006ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	223d      	movs	r2, #61	; 0x3d
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b002      	add	sp, #8
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	223d      	movs	r2, #61	; 0x3d
 8006d00:	5c9b      	ldrb	r3, [r3, r2]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d001      	beq.n	8006d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e035      	b.n	8006d78 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	223d      	movs	r2, #61	; 0x3d
 8006d10:	2102      	movs	r1, #2
 8006d12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2101      	movs	r1, #1
 8006d20:	430a      	orrs	r2, r1
 8006d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <HAL_TIM_Base_Start_IT+0x8c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0x4e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <HAL_TIM_Base_Start_IT+0x90>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_TIM_Base_Start_IT+0x4e>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <HAL_TIM_Base_Start_IT+0x94>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d111      	bne.n	8006d66 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b06      	cmp	r3, #6
 8006d52:	d010      	beq.n	8006d76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2101      	movs	r1, #1
 8006d60:	430a      	orrs	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d64:	e007      	b.n	8006d76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2101      	movs	r1, #1
 8006d72:	430a      	orrs	r2, r1
 8006d74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b004      	add	sp, #16
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40014000 	.word	0x40014000

08006d8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2101      	movs	r1, #1
 8006da0:	438a      	bics	r2, r1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	4a0d      	ldr	r2, [pc, #52]	; (8006de0 <HAL_TIM_Base_Stop_IT+0x54>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	d10d      	bne.n	8006dcc <HAL_TIM_Base_Stop_IT+0x40>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	4a0b      	ldr	r2, [pc, #44]	; (8006de4 <HAL_TIM_Base_Stop_IT+0x58>)
 8006db8:	4013      	ands	r3, r2
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_Base_Stop_IT+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2101      	movs	r1, #1
 8006dc8:	438a      	bics	r2, r1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	223d      	movs	r2, #61	; 0x3d
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	00001111 	.word	0x00001111
 8006de4:	00000444 	.word	0x00000444

08006de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2202      	movs	r2, #2
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d124      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2202      	movs	r2, #2
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d11d      	bne.n	8006e48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2203      	movs	r2, #3
 8006e12:	4252      	negs	r2, r2
 8006e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	2203      	movs	r2, #3
 8006e24:	4013      	ands	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	0018      	movs	r0, r3
 8006e2c:	f000 f8fa 	bl	8007024 <HAL_TIM_IC_CaptureCallback>
 8006e30:	e007      	b.n	8006e42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 f8ed 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 f8f9 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2204      	movs	r2, #4
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d125      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	2204      	movs	r2, #4
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d11e      	bne.n	8006ea2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2205      	movs	r2, #5
 8006e6a:	4252      	negs	r2, r2
 8006e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	23c0      	movs	r3, #192	; 0xc0
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4013      	ands	r3, r2
 8006e80:	d004      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f8cd 	bl	8007024 <HAL_TIM_IC_CaptureCallback>
 8006e8a:	e007      	b.n	8006e9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0018      	movs	r0, r3
 8006e90:	f000 f8c0 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	0018      	movs	r0, r3
 8006e98:	f000 f8cc 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2208      	movs	r2, #8
 8006eaa:	4013      	ands	r3, r2
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d124      	bne.n	8006efa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	2208      	movs	r2, #8
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b08      	cmp	r3, #8
 8006ebc:	d11d      	bne.n	8006efa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2209      	movs	r2, #9
 8006ec4:	4252      	negs	r2, r2
 8006ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2204      	movs	r2, #4
 8006ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	2203      	movs	r2, #3
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	d004      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 f8a1 	bl	8007024 <HAL_TIM_IC_CaptureCallback>
 8006ee2:	e007      	b.n	8006ef4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f000 f894 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f000 f8a0 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2210      	movs	r2, #16
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d125      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	2210      	movs	r2, #16
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b10      	cmp	r3, #16
 8006f14:	d11e      	bne.n	8006f54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2211      	movs	r2, #17
 8006f1c:	4252      	negs	r2, r2
 8006f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2208      	movs	r2, #8
 8006f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	69da      	ldr	r2, [r3, #28]
 8006f2c:	23c0      	movs	r3, #192	; 0xc0
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4013      	ands	r3, r2
 8006f32:	d004      	beq.n	8006f3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f000 f874 	bl	8007024 <HAL_TIM_IC_CaptureCallback>
 8006f3c:	e007      	b.n	8006f4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	0018      	movs	r0, r3
 8006f42:	f000 f867 	bl	8007014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 f873 	bl	8007034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d10f      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d108      	bne.n	8006f82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2202      	movs	r2, #2
 8006f76:	4252      	negs	r2, r2
 8006f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f7fd f961 	bl	8004244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2280      	movs	r2, #128	; 0x80
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b80      	cmp	r3, #128	; 0x80
 8006f8e:	d10f      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	2280      	movs	r2, #128	; 0x80
 8006f98:	4013      	ands	r3, r2
 8006f9a:	2b80      	cmp	r3, #128	; 0x80
 8006f9c:	d108      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2281      	movs	r2, #129	; 0x81
 8006fa4:	4252      	negs	r2, r2
 8006fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f000 f8d0 	bl	8007150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2240      	movs	r2, #64	; 0x40
 8006fb8:	4013      	ands	r3, r2
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d10f      	bne.n	8006fde <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2240      	movs	r2, #64	; 0x40
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d108      	bne.n	8006fde <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2241      	movs	r2, #65	; 0x41
 8006fd2:	4252      	negs	r2, r2
 8006fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f833 	bl	8007044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	691b      	ldr	r3, [r3, #16]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d10f      	bne.n	800700c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d108      	bne.n	800700c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2221      	movs	r2, #33	; 0x21
 8007000:	4252      	negs	r2, r2
 8007002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	0018      	movs	r0, r3
 8007008:	f000 f89a 	bl	8007140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	46bd      	mov	sp, r7
 8007010:	b002      	add	sp, #8
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	46bd      	mov	sp, r7
 8007020:	b002      	add	sp, #8
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	46bd      	mov	sp, r7
 8007030:	b002      	add	sp, #8
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800703c:	46c0      	nop			; (mov r8, r8)
 800703e:	46bd      	mov	sp, r7
 8007040:	b002      	add	sp, #8
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}

08007054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a2f      	ldr	r2, [pc, #188]	; (8007124 <TIM_Base_SetConfig+0xd0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_Base_SetConfig+0x20>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a2e      	ldr	r2, [pc, #184]	; (8007128 <TIM_Base_SetConfig+0xd4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d108      	bne.n	8007086 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2270      	movs	r2, #112	; 0x70
 8007078:	4393      	bics	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a26      	ldr	r2, [pc, #152]	; (8007124 <TIM_Base_SetConfig+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a25      	ldr	r2, [pc, #148]	; (8007128 <TIM_Base_SetConfig+0xd4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <TIM_Base_SetConfig+0xd8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a23      	ldr	r2, [pc, #140]	; (8007130 <TIM_Base_SetConfig+0xdc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a22      	ldr	r2, [pc, #136]	; (8007134 <TIM_Base_SetConfig+0xe0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0x62>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <TIM_Base_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a20      	ldr	r2, [pc, #128]	; (800713c <TIM_Base_SetConfig+0xe8>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	4393      	bics	r3, r2
 80070ce:	001a      	movs	r2, r3
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a0c      	ldr	r2, [pc, #48]	; (8007124 <TIM_Base_SetConfig+0xd0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_Base_SetConfig+0xba>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a0d      	ldr	r2, [pc, #52]	; (8007130 <TIM_Base_SetConfig+0xdc>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_Base_SetConfig+0xba>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <TIM_Base_SetConfig+0xe0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_Base_SetConfig+0xba>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <TIM_Base_SetConfig+0xe4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d103      	bne.n	8007116 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	691a      	ldr	r2, [r3, #16]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	615a      	str	r2, [r3, #20]
}
 800711c:	46c0      	nop			; (mov r8, r8)
 800711e:	46bd      	mov	sp, r7
 8007120:	b004      	add	sp, #16
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40012c00 	.word	0x40012c00
 8007128:	40000400 	.word	0x40000400
 800712c:	40002000 	.word	0x40002000
 8007130:	40014000 	.word	0x40014000
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800
 800713c:	fffffcff 	.word	0xfffffcff

08007140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	46bd      	mov	sp, r7
 800714c:	b002      	add	sp, #8
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	46bd      	mov	sp, r7
 800715c:	b002      	add	sp, #8
 800715e:	bd80      	pop	{r7, pc}

08007160 <gcvt>:
 8007160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007162:	001c      	movs	r4, r3
 8007164:	0015      	movs	r5, r2
 8007166:	2300      	movs	r3, #0
 8007168:	2200      	movs	r2, #0
 800716a:	b085      	sub	sp, #20
 800716c:	0006      	movs	r6, r0
 800716e:	000f      	movs	r7, r1
 8007170:	f7f9 f96a 	bl	8000448 <__aeabi_dcmplt>
 8007174:	0023      	movs	r3, r4
 8007176:	2800      	cmp	r0, #0
 8007178:	d003      	beq.n	8007182 <gcvt+0x22>
 800717a:	232d      	movs	r3, #45	; 0x2d
 800717c:	3d01      	subs	r5, #1
 800717e:	7023      	strb	r3, [r4, #0]
 8007180:	1c63      	adds	r3, r4, #1
 8007182:	2200      	movs	r2, #0
 8007184:	4908      	ldr	r1, [pc, #32]	; (80071a8 <gcvt+0x48>)
 8007186:	9203      	str	r2, [sp, #12]
 8007188:	3267      	adds	r2, #103	; 0x67
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	9500      	str	r5, [sp, #0]
 8007190:	003b      	movs	r3, r7
 8007192:	0032      	movs	r2, r6
 8007194:	6808      	ldr	r0, [r1, #0]
 8007196:	f000 f8dd 	bl	8007354 <_gcvt>
 800719a:	1e43      	subs	r3, r0, #1
 800719c:	4198      	sbcs	r0, r3
 800719e:	4240      	negs	r0, r0
 80071a0:	4004      	ands	r4, r0
 80071a2:	0020      	movs	r0, r4
 80071a4:	b005      	add	sp, #20
 80071a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a8:	20000010 	.word	0x20000010

080071ac <__errno>:
 80071ac:	4b01      	ldr	r3, [pc, #4]	; (80071b4 <__errno+0x8>)
 80071ae:	6818      	ldr	r0, [r3, #0]
 80071b0:	4770      	bx	lr
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000010 	.word	0x20000010

080071b8 <__libc_init_array>:
 80071b8:	b570      	push	{r4, r5, r6, lr}
 80071ba:	2600      	movs	r6, #0
 80071bc:	4d0c      	ldr	r5, [pc, #48]	; (80071f0 <__libc_init_array+0x38>)
 80071be:	4c0d      	ldr	r4, [pc, #52]	; (80071f4 <__libc_init_array+0x3c>)
 80071c0:	1b64      	subs	r4, r4, r5
 80071c2:	10a4      	asrs	r4, r4, #2
 80071c4:	42a6      	cmp	r6, r4
 80071c6:	d109      	bne.n	80071dc <__libc_init_array+0x24>
 80071c8:	2600      	movs	r6, #0
 80071ca:	f002 fdc1 	bl	8009d50 <_init>
 80071ce:	4d0a      	ldr	r5, [pc, #40]	; (80071f8 <__libc_init_array+0x40>)
 80071d0:	4c0a      	ldr	r4, [pc, #40]	; (80071fc <__libc_init_array+0x44>)
 80071d2:	1b64      	subs	r4, r4, r5
 80071d4:	10a4      	asrs	r4, r4, #2
 80071d6:	42a6      	cmp	r6, r4
 80071d8:	d105      	bne.n	80071e6 <__libc_init_array+0x2e>
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	00b3      	lsls	r3, r6, #2
 80071de:	58eb      	ldr	r3, [r5, r3]
 80071e0:	4798      	blx	r3
 80071e2:	3601      	adds	r6, #1
 80071e4:	e7ee      	b.n	80071c4 <__libc_init_array+0xc>
 80071e6:	00b3      	lsls	r3, r6, #2
 80071e8:	58eb      	ldr	r3, [r5, r3]
 80071ea:	4798      	blx	r3
 80071ec:	3601      	adds	r6, #1
 80071ee:	e7f2      	b.n	80071d6 <__libc_init_array+0x1e>
 80071f0:	0800a184 	.word	0x0800a184
 80071f4:	0800a184 	.word	0x0800a184
 80071f8:	0800a184 	.word	0x0800a184
 80071fc:	0800a188 	.word	0x0800a188

08007200 <memset>:
 8007200:	0003      	movs	r3, r0
 8007202:	1882      	adds	r2, r0, r2
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <memset+0xa>
 8007208:	4770      	bx	lr
 800720a:	7019      	strb	r1, [r3, #0]
 800720c:	3301      	adds	r3, #1
 800720e:	e7f9      	b.n	8007204 <memset+0x4>

08007210 <siprintf>:
 8007210:	b40e      	push	{r1, r2, r3}
 8007212:	b500      	push	{lr}
 8007214:	490b      	ldr	r1, [pc, #44]	; (8007244 <siprintf+0x34>)
 8007216:	b09c      	sub	sp, #112	; 0x70
 8007218:	ab1d      	add	r3, sp, #116	; 0x74
 800721a:	9002      	str	r0, [sp, #8]
 800721c:	9006      	str	r0, [sp, #24]
 800721e:	9107      	str	r1, [sp, #28]
 8007220:	9104      	str	r1, [sp, #16]
 8007222:	4809      	ldr	r0, [pc, #36]	; (8007248 <siprintf+0x38>)
 8007224:	4909      	ldr	r1, [pc, #36]	; (800724c <siprintf+0x3c>)
 8007226:	cb04      	ldmia	r3!, {r2}
 8007228:	9105      	str	r1, [sp, #20]
 800722a:	6800      	ldr	r0, [r0, #0]
 800722c:	a902      	add	r1, sp, #8
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	f000 fe08 	bl	8007e44 <_svfiprintf_r>
 8007234:	2300      	movs	r3, #0
 8007236:	9a02      	ldr	r2, [sp, #8]
 8007238:	7013      	strb	r3, [r2, #0]
 800723a:	b01c      	add	sp, #112	; 0x70
 800723c:	bc08      	pop	{r3}
 800723e:	b003      	add	sp, #12
 8007240:	4718      	bx	r3
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	7fffffff 	.word	0x7fffffff
 8007248:	20000010 	.word	0x20000010
 800724c:	ffff0208 	.word	0xffff0208

08007250 <print_e>:
 8007250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007252:	b08b      	sub	sp, #44	; 0x2c
 8007254:	000f      	movs	r7, r1
 8007256:	a910      	add	r1, sp, #64	; 0x40
 8007258:	c920      	ldmia	r1!, {r5}
 800725a:	780e      	ldrb	r6, [r1, #0]
 800725c:	a908      	add	r1, sp, #32
 800725e:	9104      	str	r1, [sp, #16]
 8007260:	a907      	add	r1, sp, #28
 8007262:	9103      	str	r1, [sp, #12]
 8007264:	a909      	add	r1, sp, #36	; 0x24
 8007266:	9102      	str	r1, [sp, #8]
 8007268:	1c69      	adds	r1, r5, #1
 800726a:	9101      	str	r1, [sp, #4]
 800726c:	2102      	movs	r1, #2
 800726e:	9100      	str	r1, [sp, #0]
 8007270:	f001 f92e 	bl	80084d0 <_dtoa_r>
 8007274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007276:	4b36      	ldr	r3, [pc, #216]	; (8007350 <print_e+0x100>)
 8007278:	0001      	movs	r1, r0
 800727a:	429a      	cmp	r2, r3
 800727c:	d104      	bne.n	8007288 <print_e+0x38>
 800727e:	0038      	movs	r0, r7
 8007280:	f001 f874 	bl	800836c <strcpy>
 8007284:	b00b      	add	sp, #44	; 0x2c
 8007286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007288:	7801      	ldrb	r1, [r0, #0]
 800728a:	1c43      	adds	r3, r0, #1
 800728c:	1c7c      	adds	r4, r7, #1
 800728e:	7039      	strb	r1, [r7, #0]
 8007290:	2d00      	cmp	r5, #0
 8007292:	dd01      	ble.n	8007298 <print_e+0x48>
 8007294:	2101      	movs	r1, #1
 8007296:	9112      	str	r1, [sp, #72]	; 0x48
 8007298:	212e      	movs	r1, #46	; 0x2e
 800729a:	7818      	ldrb	r0, [r3, #0]
 800729c:	2800      	cmp	r0, #0
 800729e:	d001      	beq.n	80072a4 <print_e+0x54>
 80072a0:	2d00      	cmp	r5, #0
 80072a2:	dc35      	bgt.n	8007310 <print_e+0xc0>
 80072a4:	2e67      	cmp	r6, #103	; 0x67
 80072a6:	d04b      	beq.n	8007340 <print_e+0xf0>
 80072a8:	2e47      	cmp	r6, #71	; 0x47
 80072aa:	d04b      	beq.n	8007344 <print_e+0xf4>
 80072ac:	232e      	movs	r3, #46	; 0x2e
 80072ae:	2130      	movs	r1, #48	; 0x30
 80072b0:	2d00      	cmp	r5, #0
 80072b2:	dc3a      	bgt.n	800732a <print_e+0xda>
 80072b4:	1e53      	subs	r3, r2, #1
 80072b6:	7026      	strb	r6, [r4, #0]
 80072b8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ba:	1ca5      	adds	r5, r4, #2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da43      	bge.n	8007348 <print_e+0xf8>
 80072c0:	232d      	movs	r3, #45	; 0x2d
 80072c2:	7063      	strb	r3, [r4, #1]
 80072c4:	3b2c      	subs	r3, #44	; 0x2c
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80072cc:	2e63      	cmp	r6, #99	; 0x63
 80072ce:	dd0d      	ble.n	80072ec <print_e+0x9c>
 80072d0:	2164      	movs	r1, #100	; 0x64
 80072d2:	0030      	movs	r0, r6
 80072d4:	f7f8 ffb6 	bl	8000244 <__divsi3>
 80072d8:	0003      	movs	r3, r0
 80072da:	0002      	movs	r2, r0
 80072dc:	2064      	movs	r0, #100	; 0x64
 80072de:	4240      	negs	r0, r0
 80072e0:	4358      	muls	r0, r3
 80072e2:	3230      	adds	r2, #48	; 0x30
 80072e4:	1980      	adds	r0, r0, r6
 80072e6:	1ce5      	adds	r5, r4, #3
 80072e8:	70a2      	strb	r2, [r4, #2]
 80072ea:	9009      	str	r0, [sp, #36]	; 0x24
 80072ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80072ee:	210a      	movs	r1, #10
 80072f0:	0020      	movs	r0, r4
 80072f2:	f7f8 ffa7 	bl	8000244 <__divsi3>
 80072f6:	0003      	movs	r3, r0
 80072f8:	0002      	movs	r2, r0
 80072fa:	200a      	movs	r0, #10
 80072fc:	4240      	negs	r0, r0
 80072fe:	4358      	muls	r0, r3
 8007300:	2300      	movs	r3, #0
 8007302:	1900      	adds	r0, r0, r4
 8007304:	3230      	adds	r2, #48	; 0x30
 8007306:	3030      	adds	r0, #48	; 0x30
 8007308:	702a      	strb	r2, [r5, #0]
 800730a:	7068      	strb	r0, [r5, #1]
 800730c:	70ab      	strb	r3, [r5, #2]
 800730e:	e7b9      	b.n	8007284 <print_e+0x34>
 8007310:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007312:	2800      	cmp	r0, #0
 8007314:	d001      	beq.n	800731a <print_e+0xca>
 8007316:	7021      	strb	r1, [r4, #0]
 8007318:	3401      	adds	r4, #1
 800731a:	7818      	ldrb	r0, [r3, #0]
 800731c:	3d01      	subs	r5, #1
 800731e:	7020      	strb	r0, [r4, #0]
 8007320:	2000      	movs	r0, #0
 8007322:	3301      	adds	r3, #1
 8007324:	3401      	adds	r4, #1
 8007326:	9012      	str	r0, [sp, #72]	; 0x48
 8007328:	e7b7      	b.n	800729a <print_e+0x4a>
 800732a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800732c:	2800      	cmp	r0, #0
 800732e:	d001      	beq.n	8007334 <print_e+0xe4>
 8007330:	7023      	strb	r3, [r4, #0]
 8007332:	3401      	adds	r4, #1
 8007334:	2000      	movs	r0, #0
 8007336:	7021      	strb	r1, [r4, #0]
 8007338:	3d01      	subs	r5, #1
 800733a:	3401      	adds	r4, #1
 800733c:	9012      	str	r0, [sp, #72]	; 0x48
 800733e:	e7b7      	b.n	80072b0 <print_e+0x60>
 8007340:	2665      	movs	r6, #101	; 0x65
 8007342:	e7b7      	b.n	80072b4 <print_e+0x64>
 8007344:	2645      	movs	r6, #69	; 0x45
 8007346:	e7b5      	b.n	80072b4 <print_e+0x64>
 8007348:	232b      	movs	r3, #43	; 0x2b
 800734a:	7063      	strb	r3, [r4, #1]
 800734c:	e7bd      	b.n	80072ca <print_e+0x7a>
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	0000270f 	.word	0x0000270f

08007354 <_gcvt>:
 8007354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007356:	0016      	movs	r6, r2
 8007358:	001d      	movs	r5, r3
 800735a:	b08d      	sub	sp, #52	; 0x34
 800735c:	ab14      	add	r3, sp, #80	; 0x50
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	0007      	movs	r7, r0
 8007362:	9307      	str	r3, [sp, #28]
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	0030      	movs	r0, r6
 800736a:	0029      	movs	r1, r5
 800736c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800736e:	f7f9 f86b 	bl	8000448 <__aeabi_dcmplt>
 8007372:	2800      	cmp	r0, #0
 8007374:	d002      	beq.n	800737c <_gcvt+0x28>
 8007376:	2380      	movs	r3, #128	; 0x80
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	18ed      	adds	r5, r5, r3
 800737c:	2200      	movs	r2, #0
 800737e:	2300      	movs	r3, #0
 8007380:	0030      	movs	r0, r6
 8007382:	0029      	movs	r1, r5
 8007384:	f7f9 f85a 	bl	800043c <__aeabi_dcmpeq>
 8007388:	2800      	cmp	r0, #0
 800738a:	d006      	beq.n	800739a <_gcvt+0x46>
 800738c:	2330      	movs	r3, #48	; 0x30
 800738e:	7023      	strb	r3, [r4, #0]
 8007390:	2300      	movs	r3, #0
 8007392:	7063      	strb	r3, [r4, #1]
 8007394:	0020      	movs	r0, r4
 8007396:	b00d      	add	sp, #52	; 0x34
 8007398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739a:	0030      	movs	r0, r6
 800739c:	0029      	movs	r1, r5
 800739e:	4a50      	ldr	r2, [pc, #320]	; (80074e0 <_gcvt+0x18c>)
 80073a0:	4b50      	ldr	r3, [pc, #320]	; (80074e4 <_gcvt+0x190>)
 80073a2:	f7f9 f85b 	bl	800045c <__aeabi_dcmple>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d00d      	beq.n	80073c6 <_gcvt+0x72>
 80073aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ac:	0032      	movs	r2, r6
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	9b07      	ldr	r3, [sp, #28]
 80073b2:	0021      	movs	r1, r4
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073b8:	0038      	movs	r0, r7
 80073ba:	3b01      	subs	r3, #1
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	002b      	movs	r3, r5
 80073c0:	f7ff ff46 	bl	8007250 <print_e>
 80073c4:	e7e6      	b.n	8007394 <_gcvt+0x40>
 80073c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80073c8:	f000 fc2e 	bl	8007c28 <_mprec_log10>
 80073cc:	0032      	movs	r2, r6
 80073ce:	002b      	movs	r3, r5
 80073d0:	f7f9 f844 	bl	800045c <__aeabi_dcmple>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	d1e8      	bne.n	80073aa <_gcvt+0x56>
 80073d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	ab0a      	add	r3, sp, #40	; 0x28
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	ab09      	add	r3, sp, #36	; 0x24
 80073e2:	9302      	str	r3, [sp, #8]
 80073e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073e6:	0032      	movs	r2, r6
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	2302      	movs	r3, #2
 80073ec:	0038      	movs	r0, r7
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	002b      	movs	r3, r5
 80073f2:	f001 f86d 	bl	80084d0 <_dtoa_r>
 80073f6:	4b3c      	ldr	r3, [pc, #240]	; (80074e8 <_gcvt+0x194>)
 80073f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073fa:	0001      	movs	r1, r0
 80073fc:	0020      	movs	r0, r4
 80073fe:	429a      	cmp	r2, r3
 8007400:	d00d      	beq.n	800741e <_gcvt+0xca>
 8007402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007404:	18e2      	adds	r2, r4, r3
 8007406:	780e      	ldrb	r6, [r1, #0]
 8007408:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800740a:	1a13      	subs	r3, r2, r0
 800740c:	2e00      	cmp	r6, #0
 800740e:	d002      	beq.n	8007416 <_gcvt+0xc2>
 8007410:	2d00      	cmp	r5, #0
 8007412:	dc07      	bgt.n	8007424 <_gcvt+0xd0>
 8007414:	2600      	movs	r6, #0
 8007416:	2201      	movs	r2, #1
 8007418:	2730      	movs	r7, #48	; 0x30
 800741a:	4694      	mov	ip, r2
 800741c:	e00f      	b.n	800743e <_gcvt+0xea>
 800741e:	f000 ffa5 	bl	800836c <strcpy>
 8007422:	e7b7      	b.n	8007394 <_gcvt+0x40>
 8007424:	3d01      	subs	r5, #1
 8007426:	7006      	strb	r6, [r0, #0]
 8007428:	3101      	adds	r1, #1
 800742a:	9509      	str	r5, [sp, #36]	; 0x24
 800742c:	3001      	adds	r0, #1
 800742e:	e7ea      	b.n	8007406 <_gcvt+0xb2>
 8007430:	2b00      	cmp	r3, #0
 8007432:	dd07      	ble.n	8007444 <_gcvt+0xf0>
 8007434:	4666      	mov	r6, ip
 8007436:	7007      	strb	r7, [r0, #0]
 8007438:	3d01      	subs	r5, #1
 800743a:	3b01      	subs	r3, #1
 800743c:	3001      	adds	r0, #1
 800743e:	0002      	movs	r2, r0
 8007440:	2d00      	cmp	r5, #0
 8007442:	dcf5      	bgt.n	8007430 <_gcvt+0xdc>
 8007444:	2e00      	cmp	r6, #0
 8007446:	d000      	beq.n	800744a <_gcvt+0xf6>
 8007448:	9509      	str	r5, [sp, #36]	; 0x24
 800744a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800744c:	2d00      	cmp	r5, #0
 800744e:	d102      	bne.n	8007456 <_gcvt+0x102>
 8007450:	780d      	ldrb	r5, [r1, #0]
 8007452:	2d00      	cmp	r5, #0
 8007454:	d029      	beq.n	80074aa <_gcvt+0x156>
 8007456:	4284      	cmp	r4, r0
 8007458:	d102      	bne.n	8007460 <_gcvt+0x10c>
 800745a:	2230      	movs	r2, #48	; 0x30
 800745c:	7022      	strb	r2, [r4, #0]
 800745e:	1c62      	adds	r2, r4, #1
 8007460:	202e      	movs	r0, #46	; 0x2e
 8007462:	7010      	strb	r0, [r2, #0]
 8007464:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007466:	0015      	movs	r5, r2
 8007468:	1a87      	subs	r7, r0, r2
 800746a:	9707      	str	r7, [sp, #28]
 800746c:	2701      	movs	r7, #1
 800746e:	2600      	movs	r6, #0
 8007470:	46bc      	mov	ip, r7
 8007472:	9f07      	ldr	r7, [sp, #28]
 8007474:	42ef      	cmn	r7, r5
 8007476:	d41b      	bmi.n	80074b0 <_gcvt+0x15c>
 8007478:	2500      	movs	r5, #0
 800747a:	4247      	negs	r7, r0
 800747c:	42a8      	cmp	r0, r5
 800747e:	dc00      	bgt.n	8007482 <_gcvt+0x12e>
 8007480:	003d      	movs	r5, r7
 8007482:	3501      	adds	r5, #1
 8007484:	1952      	adds	r2, r2, r5
 8007486:	2500      	movs	r5, #0
 8007488:	42a8      	cmp	r0, r5
 800748a:	dc00      	bgt.n	800748e <_gcvt+0x13a>
 800748c:	003d      	movs	r5, r7
 800748e:	1945      	adds	r5, r0, r5
 8007490:	2e00      	cmp	r6, #0
 8007492:	d000      	beq.n	8007496 <_gcvt+0x142>
 8007494:	9509      	str	r5, [sp, #36]	; 0x24
 8007496:	0010      	movs	r0, r2
 8007498:	780d      	ldrb	r5, [r1, #0]
 800749a:	0002      	movs	r2, r0
 800749c:	2d00      	cmp	r5, #0
 800749e:	d001      	beq.n	80074a4 <_gcvt+0x150>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc0a      	bgt.n	80074ba <_gcvt+0x166>
 80074a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d116      	bne.n	80074d8 <_gcvt+0x184>
 80074aa:	2300      	movs	r3, #0
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	e771      	b.n	8007394 <_gcvt+0x40>
 80074b0:	2630      	movs	r6, #48	; 0x30
 80074b2:	3501      	adds	r5, #1
 80074b4:	702e      	strb	r6, [r5, #0]
 80074b6:	4666      	mov	r6, ip
 80074b8:	e7db      	b.n	8007472 <_gcvt+0x11e>
 80074ba:	7005      	strb	r5, [r0, #0]
 80074bc:	3101      	adds	r1, #1
 80074be:	3b01      	subs	r3, #1
 80074c0:	3001      	adds	r0, #1
 80074c2:	e7e9      	b.n	8007498 <_gcvt+0x144>
 80074c4:	7016      	strb	r6, [r2, #0]
 80074c6:	3201      	adds	r2, #1
 80074c8:	1aa9      	subs	r1, r5, r2
 80074ca:	2900      	cmp	r1, #0
 80074cc:	dcfa      	bgt.n	80074c4 <_gcvt+0x170>
 80074ce:	43da      	mvns	r2, r3
 80074d0:	17d2      	asrs	r2, r2, #31
 80074d2:	401a      	ands	r2, r3
 80074d4:	1882      	adds	r2, r0, r2
 80074d6:	e7e8      	b.n	80074aa <_gcvt+0x156>
 80074d8:	0002      	movs	r2, r0
 80074da:	2630      	movs	r6, #48	; 0x30
 80074dc:	181d      	adds	r5, r3, r0
 80074de:	e7f3      	b.n	80074c8 <_gcvt+0x174>
 80074e0:	eb1c432d 	.word	0xeb1c432d
 80074e4:	3f1a36e2 	.word	0x3f1a36e2
 80074e8:	0000270f 	.word	0x0000270f

080074ec <_Balloc>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074f0:	0006      	movs	r6, r0
 80074f2:	000c      	movs	r4, r1
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	d10e      	bne.n	8007516 <_Balloc+0x2a>
 80074f8:	2010      	movs	r0, #16
 80074fa:	f001 fe17 	bl	800912c <malloc>
 80074fe:	1e02      	subs	r2, r0, #0
 8007500:	6270      	str	r0, [r6, #36]	; 0x24
 8007502:	d104      	bne.n	800750e <_Balloc+0x22>
 8007504:	2166      	movs	r1, #102	; 0x66
 8007506:	4b19      	ldr	r3, [pc, #100]	; (800756c <_Balloc+0x80>)
 8007508:	4819      	ldr	r0, [pc, #100]	; (8007570 <_Balloc+0x84>)
 800750a:	f000 ff37 	bl	800837c <__assert_func>
 800750e:	6045      	str	r5, [r0, #4]
 8007510:	6085      	str	r5, [r0, #8]
 8007512:	6005      	str	r5, [r0, #0]
 8007514:	60c5      	str	r5, [r0, #12]
 8007516:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007518:	68eb      	ldr	r3, [r5, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d013      	beq.n	8007546 <_Balloc+0x5a>
 800751e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007520:	00a2      	lsls	r2, r4, #2
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	189b      	adds	r3, r3, r2
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	2800      	cmp	r0, #0
 800752a:	d118      	bne.n	800755e <_Balloc+0x72>
 800752c:	2101      	movs	r1, #1
 800752e:	000d      	movs	r5, r1
 8007530:	40a5      	lsls	r5, r4
 8007532:	1d6a      	adds	r2, r5, #5
 8007534:	0030      	movs	r0, r6
 8007536:	0092      	lsls	r2, r2, #2
 8007538:	f000 fb90 	bl	8007c5c <_calloc_r>
 800753c:	2800      	cmp	r0, #0
 800753e:	d00c      	beq.n	800755a <_Balloc+0x6e>
 8007540:	6044      	str	r4, [r0, #4]
 8007542:	6085      	str	r5, [r0, #8]
 8007544:	e00d      	b.n	8007562 <_Balloc+0x76>
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	2104      	movs	r1, #4
 800754a:	0030      	movs	r0, r6
 800754c:	f000 fb86 	bl	8007c5c <_calloc_r>
 8007550:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007552:	60e8      	str	r0, [r5, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e1      	bne.n	800751e <_Balloc+0x32>
 800755a:	2000      	movs	r0, #0
 800755c:	bd70      	pop	{r4, r5, r6, pc}
 800755e:	6802      	ldr	r2, [r0, #0]
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	6103      	str	r3, [r0, #16]
 8007566:	60c3      	str	r3, [r0, #12]
 8007568:	e7f8      	b.n	800755c <_Balloc+0x70>
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	08009eb4 	.word	0x08009eb4
 8007570:	08009ecb 	.word	0x08009ecb

08007574 <_Bfree>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007578:	0005      	movs	r5, r0
 800757a:	000c      	movs	r4, r1
 800757c:	2e00      	cmp	r6, #0
 800757e:	d10e      	bne.n	800759e <_Bfree+0x2a>
 8007580:	2010      	movs	r0, #16
 8007582:	f001 fdd3 	bl	800912c <malloc>
 8007586:	1e02      	subs	r2, r0, #0
 8007588:	6268      	str	r0, [r5, #36]	; 0x24
 800758a:	d104      	bne.n	8007596 <_Bfree+0x22>
 800758c:	218a      	movs	r1, #138	; 0x8a
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <_Bfree+0x40>)
 8007590:	4809      	ldr	r0, [pc, #36]	; (80075b8 <_Bfree+0x44>)
 8007592:	f000 fef3 	bl	800837c <__assert_func>
 8007596:	6046      	str	r6, [r0, #4]
 8007598:	6086      	str	r6, [r0, #8]
 800759a:	6006      	str	r6, [r0, #0]
 800759c:	60c6      	str	r6, [r0, #12]
 800759e:	2c00      	cmp	r4, #0
 80075a0:	d007      	beq.n	80075b2 <_Bfree+0x3e>
 80075a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075a4:	6862      	ldr	r2, [r4, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	0092      	lsls	r2, r2, #2
 80075aa:	189b      	adds	r3, r3, r2
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	6022      	str	r2, [r4, #0]
 80075b0:	601c      	str	r4, [r3, #0]
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	08009eb4 	.word	0x08009eb4
 80075b8:	08009ecb 	.word	0x08009ecb

080075bc <__multadd>:
 80075bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075be:	000e      	movs	r6, r1
 80075c0:	9001      	str	r0, [sp, #4]
 80075c2:	000c      	movs	r4, r1
 80075c4:	001d      	movs	r5, r3
 80075c6:	2000      	movs	r0, #0
 80075c8:	690f      	ldr	r7, [r1, #16]
 80075ca:	3614      	adds	r6, #20
 80075cc:	6833      	ldr	r3, [r6, #0]
 80075ce:	3001      	adds	r0, #1
 80075d0:	b299      	uxth	r1, r3
 80075d2:	4351      	muls	r1, r2
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	4353      	muls	r3, r2
 80075d8:	1949      	adds	r1, r1, r5
 80075da:	0c0d      	lsrs	r5, r1, #16
 80075dc:	195b      	adds	r3, r3, r5
 80075de:	0c1d      	lsrs	r5, r3, #16
 80075e0:	b289      	uxth	r1, r1
 80075e2:	041b      	lsls	r3, r3, #16
 80075e4:	185b      	adds	r3, r3, r1
 80075e6:	c608      	stmia	r6!, {r3}
 80075e8:	4287      	cmp	r7, r0
 80075ea:	dcef      	bgt.n	80075cc <__multadd+0x10>
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	d022      	beq.n	8007636 <__multadd+0x7a>
 80075f0:	68a3      	ldr	r3, [r4, #8]
 80075f2:	42bb      	cmp	r3, r7
 80075f4:	dc19      	bgt.n	800762a <__multadd+0x6e>
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	9801      	ldr	r0, [sp, #4]
 80075fa:	1c59      	adds	r1, r3, #1
 80075fc:	f7ff ff76 	bl	80074ec <_Balloc>
 8007600:	1e06      	subs	r6, r0, #0
 8007602:	d105      	bne.n	8007610 <__multadd+0x54>
 8007604:	0002      	movs	r2, r0
 8007606:	21b5      	movs	r1, #181	; 0xb5
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <__multadd+0x80>)
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <__multadd+0x84>)
 800760c:	f000 feb6 	bl	800837c <__assert_func>
 8007610:	0021      	movs	r1, r4
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	310c      	adds	r1, #12
 8007616:	1c9a      	adds	r2, r3, #2
 8007618:	0092      	lsls	r2, r2, #2
 800761a:	300c      	adds	r0, #12
 800761c:	f001 fd9b 	bl	8009156 <memcpy>
 8007620:	0021      	movs	r1, r4
 8007622:	9801      	ldr	r0, [sp, #4]
 8007624:	f7ff ffa6 	bl	8007574 <_Bfree>
 8007628:	0034      	movs	r4, r6
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	18e3      	adds	r3, r4, r3
 8007630:	605d      	str	r5, [r3, #4]
 8007632:	1c7b      	adds	r3, r7, #1
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	0020      	movs	r0, r4
 8007638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	08009f2b 	.word	0x08009f2b
 8007640:	08009ecb 	.word	0x08009ecb

08007644 <__hi0bits>:
 8007644:	0003      	movs	r3, r0
 8007646:	0c02      	lsrs	r2, r0, #16
 8007648:	2000      	movs	r0, #0
 800764a:	4282      	cmp	r2, r0
 800764c:	d101      	bne.n	8007652 <__hi0bits+0xe>
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	3010      	adds	r0, #16
 8007652:	0e1a      	lsrs	r2, r3, #24
 8007654:	d101      	bne.n	800765a <__hi0bits+0x16>
 8007656:	3008      	adds	r0, #8
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	0f1a      	lsrs	r2, r3, #28
 800765c:	d101      	bne.n	8007662 <__hi0bits+0x1e>
 800765e:	3004      	adds	r0, #4
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	0f9a      	lsrs	r2, r3, #30
 8007664:	d101      	bne.n	800766a <__hi0bits+0x26>
 8007666:	3002      	adds	r0, #2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	db03      	blt.n	8007676 <__hi0bits+0x32>
 800766e:	3001      	adds	r0, #1
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	d400      	bmi.n	8007676 <__hi0bits+0x32>
 8007674:	2020      	movs	r0, #32
 8007676:	4770      	bx	lr

08007678 <__lo0bits>:
 8007678:	6803      	ldr	r3, [r0, #0]
 800767a:	0002      	movs	r2, r0
 800767c:	2107      	movs	r1, #7
 800767e:	0018      	movs	r0, r3
 8007680:	4008      	ands	r0, r1
 8007682:	420b      	tst	r3, r1
 8007684:	d00d      	beq.n	80076a2 <__lo0bits+0x2a>
 8007686:	3906      	subs	r1, #6
 8007688:	2000      	movs	r0, #0
 800768a:	420b      	tst	r3, r1
 800768c:	d105      	bne.n	800769a <__lo0bits+0x22>
 800768e:	3002      	adds	r0, #2
 8007690:	4203      	tst	r3, r0
 8007692:	d003      	beq.n	800769c <__lo0bits+0x24>
 8007694:	40cb      	lsrs	r3, r1
 8007696:	0008      	movs	r0, r1
 8007698:	6013      	str	r3, [r2, #0]
 800769a:	4770      	bx	lr
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	e7fb      	b.n	800769a <__lo0bits+0x22>
 80076a2:	b299      	uxth	r1, r3
 80076a4:	2900      	cmp	r1, #0
 80076a6:	d101      	bne.n	80076ac <__lo0bits+0x34>
 80076a8:	2010      	movs	r0, #16
 80076aa:	0c1b      	lsrs	r3, r3, #16
 80076ac:	b2d9      	uxtb	r1, r3
 80076ae:	2900      	cmp	r1, #0
 80076b0:	d101      	bne.n	80076b6 <__lo0bits+0x3e>
 80076b2:	3008      	adds	r0, #8
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	0719      	lsls	r1, r3, #28
 80076b8:	d101      	bne.n	80076be <__lo0bits+0x46>
 80076ba:	3004      	adds	r0, #4
 80076bc:	091b      	lsrs	r3, r3, #4
 80076be:	0799      	lsls	r1, r3, #30
 80076c0:	d101      	bne.n	80076c6 <__lo0bits+0x4e>
 80076c2:	3002      	adds	r0, #2
 80076c4:	089b      	lsrs	r3, r3, #2
 80076c6:	07d9      	lsls	r1, r3, #31
 80076c8:	d4e9      	bmi.n	800769e <__lo0bits+0x26>
 80076ca:	3001      	adds	r0, #1
 80076cc:	085b      	lsrs	r3, r3, #1
 80076ce:	d1e6      	bne.n	800769e <__lo0bits+0x26>
 80076d0:	2020      	movs	r0, #32
 80076d2:	e7e2      	b.n	800769a <__lo0bits+0x22>

080076d4 <__i2b>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	000c      	movs	r4, r1
 80076d8:	2101      	movs	r1, #1
 80076da:	f7ff ff07 	bl	80074ec <_Balloc>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d106      	bne.n	80076f0 <__i2b+0x1c>
 80076e2:	21a0      	movs	r1, #160	; 0xa0
 80076e4:	0002      	movs	r2, r0
 80076e6:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <__i2b+0x24>)
 80076e8:	4804      	ldr	r0, [pc, #16]	; (80076fc <__i2b+0x28>)
 80076ea:	0049      	lsls	r1, r1, #1
 80076ec:	f000 fe46 	bl	800837c <__assert_func>
 80076f0:	2301      	movs	r3, #1
 80076f2:	6144      	str	r4, [r0, #20]
 80076f4:	6103      	str	r3, [r0, #16]
 80076f6:	bd10      	pop	{r4, pc}
 80076f8:	08009f2b 	.word	0x08009f2b
 80076fc:	08009ecb 	.word	0x08009ecb

08007700 <__multiply>:
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	0014      	movs	r4, r2
 8007706:	6912      	ldr	r2, [r2, #16]
 8007708:	000d      	movs	r5, r1
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	4293      	cmp	r3, r2
 800770e:	da01      	bge.n	8007714 <__multiply+0x14>
 8007710:	0025      	movs	r5, r4
 8007712:	000c      	movs	r4, r1
 8007714:	692f      	ldr	r7, [r5, #16]
 8007716:	6926      	ldr	r6, [r4, #16]
 8007718:	6869      	ldr	r1, [r5, #4]
 800771a:	19bb      	adds	r3, r7, r6
 800771c:	9302      	str	r3, [sp, #8]
 800771e:	68ab      	ldr	r3, [r5, #8]
 8007720:	19ba      	adds	r2, r7, r6
 8007722:	4293      	cmp	r3, r2
 8007724:	da00      	bge.n	8007728 <__multiply+0x28>
 8007726:	3101      	adds	r1, #1
 8007728:	f7ff fee0 	bl	80074ec <_Balloc>
 800772c:	9001      	str	r0, [sp, #4]
 800772e:	2800      	cmp	r0, #0
 8007730:	d106      	bne.n	8007740 <__multiply+0x40>
 8007732:	215e      	movs	r1, #94	; 0x5e
 8007734:	0002      	movs	r2, r0
 8007736:	4b48      	ldr	r3, [pc, #288]	; (8007858 <__multiply+0x158>)
 8007738:	4848      	ldr	r0, [pc, #288]	; (800785c <__multiply+0x15c>)
 800773a:	31ff      	adds	r1, #255	; 0xff
 800773c:	f000 fe1e 	bl	800837c <__assert_func>
 8007740:	9b01      	ldr	r3, [sp, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	3314      	adds	r3, #20
 8007746:	469c      	mov	ip, r3
 8007748:	19bb      	adds	r3, r7, r6
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4463      	add	r3, ip
 800774e:	9303      	str	r3, [sp, #12]
 8007750:	4663      	mov	r3, ip
 8007752:	9903      	ldr	r1, [sp, #12]
 8007754:	428b      	cmp	r3, r1
 8007756:	d32c      	bcc.n	80077b2 <__multiply+0xb2>
 8007758:	002b      	movs	r3, r5
 800775a:	0022      	movs	r2, r4
 800775c:	3314      	adds	r3, #20
 800775e:	00bf      	lsls	r7, r7, #2
 8007760:	3214      	adds	r2, #20
 8007762:	9306      	str	r3, [sp, #24]
 8007764:	00b6      	lsls	r6, r6, #2
 8007766:	19db      	adds	r3, r3, r7
 8007768:	9304      	str	r3, [sp, #16]
 800776a:	1993      	adds	r3, r2, r6
 800776c:	9307      	str	r3, [sp, #28]
 800776e:	2304      	movs	r3, #4
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	002b      	movs	r3, r5
 8007774:	9904      	ldr	r1, [sp, #16]
 8007776:	3315      	adds	r3, #21
 8007778:	9200      	str	r2, [sp, #0]
 800777a:	4299      	cmp	r1, r3
 800777c:	d305      	bcc.n	800778a <__multiply+0x8a>
 800777e:	1b4b      	subs	r3, r1, r5
 8007780:	3b15      	subs	r3, #21
 8007782:	089b      	lsrs	r3, r3, #2
 8007784:	3301      	adds	r3, #1
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	9305      	str	r3, [sp, #20]
 800778a:	9b07      	ldr	r3, [sp, #28]
 800778c:	9a00      	ldr	r2, [sp, #0]
 800778e:	429a      	cmp	r2, r3
 8007790:	d311      	bcc.n	80077b6 <__multiply+0xb6>
 8007792:	9b02      	ldr	r3, [sp, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	dd06      	ble.n	80077a6 <__multiply+0xa6>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	3b04      	subs	r3, #4
 800779c:	9303      	str	r3, [sp, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d054      	beq.n	8007850 <__multiply+0x150>
 80077a6:	9b01      	ldr	r3, [sp, #4]
 80077a8:	9a02      	ldr	r2, [sp, #8]
 80077aa:	0018      	movs	r0, r3
 80077ac:	611a      	str	r2, [r3, #16]
 80077ae:	b009      	add	sp, #36	; 0x24
 80077b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077b2:	c304      	stmia	r3!, {r2}
 80077b4:	e7cd      	b.n	8007752 <__multiply+0x52>
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	b298      	uxth	r0, r3
 80077bc:	2800      	cmp	r0, #0
 80077be:	d01c      	beq.n	80077fa <__multiply+0xfa>
 80077c0:	4667      	mov	r7, ip
 80077c2:	2400      	movs	r4, #0
 80077c4:	9e06      	ldr	r6, [sp, #24]
 80077c6:	ce02      	ldmia	r6!, {r1}
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	b28b      	uxth	r3, r1
 80077cc:	4343      	muls	r3, r0
 80077ce:	0c09      	lsrs	r1, r1, #16
 80077d0:	4341      	muls	r1, r0
 80077d2:	b292      	uxth	r2, r2
 80077d4:	189b      	adds	r3, r3, r2
 80077d6:	191b      	adds	r3, r3, r4
 80077d8:	000c      	movs	r4, r1
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	0c11      	lsrs	r1, r2, #16
 80077de:	1861      	adds	r1, r4, r1
 80077e0:	0c1c      	lsrs	r4, r3, #16
 80077e2:	1909      	adds	r1, r1, r4
 80077e4:	0c0c      	lsrs	r4, r1, #16
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	0409      	lsls	r1, r1, #16
 80077ea:	430b      	orrs	r3, r1
 80077ec:	c708      	stmia	r7!, {r3}
 80077ee:	9b04      	ldr	r3, [sp, #16]
 80077f0:	42b3      	cmp	r3, r6
 80077f2:	d8e8      	bhi.n	80077c6 <__multiply+0xc6>
 80077f4:	4663      	mov	r3, ip
 80077f6:	9a05      	ldr	r2, [sp, #20]
 80077f8:	509c      	str	r4, [r3, r2]
 80077fa:	9b00      	ldr	r3, [sp, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	0c1e      	lsrs	r6, r3, #16
 8007800:	d020      	beq.n	8007844 <__multiply+0x144>
 8007802:	4663      	mov	r3, ip
 8007804:	002c      	movs	r4, r5
 8007806:	4660      	mov	r0, ip
 8007808:	2700      	movs	r7, #0
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3414      	adds	r4, #20
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	b291      	uxth	r1, r2
 8007814:	4371      	muls	r1, r6
 8007816:	6802      	ldr	r2, [r0, #0]
 8007818:	0c12      	lsrs	r2, r2, #16
 800781a:	1889      	adds	r1, r1, r2
 800781c:	19cf      	adds	r7, r1, r7
 800781e:	0439      	lsls	r1, r7, #16
 8007820:	430b      	orrs	r3, r1
 8007822:	6003      	str	r3, [r0, #0]
 8007824:	cc02      	ldmia	r4!, {r1}
 8007826:	6843      	ldr	r3, [r0, #4]
 8007828:	0c09      	lsrs	r1, r1, #16
 800782a:	4371      	muls	r1, r6
 800782c:	b29b      	uxth	r3, r3
 800782e:	0c3f      	lsrs	r7, r7, #16
 8007830:	18cb      	adds	r3, r1, r3
 8007832:	9a04      	ldr	r2, [sp, #16]
 8007834:	19db      	adds	r3, r3, r7
 8007836:	0c1f      	lsrs	r7, r3, #16
 8007838:	3004      	adds	r0, #4
 800783a:	42a2      	cmp	r2, r4
 800783c:	d8e7      	bhi.n	800780e <__multiply+0x10e>
 800783e:	4662      	mov	r2, ip
 8007840:	9905      	ldr	r1, [sp, #20]
 8007842:	5053      	str	r3, [r2, r1]
 8007844:	9b00      	ldr	r3, [sp, #0]
 8007846:	3304      	adds	r3, #4
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	2304      	movs	r3, #4
 800784c:	449c      	add	ip, r3
 800784e:	e79c      	b.n	800778a <__multiply+0x8a>
 8007850:	9b02      	ldr	r3, [sp, #8]
 8007852:	3b01      	subs	r3, #1
 8007854:	9302      	str	r3, [sp, #8]
 8007856:	e79c      	b.n	8007792 <__multiply+0x92>
 8007858:	08009f2b 	.word	0x08009f2b
 800785c:	08009ecb 	.word	0x08009ecb

08007860 <__pow5mult>:
 8007860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007862:	2303      	movs	r3, #3
 8007864:	0015      	movs	r5, r2
 8007866:	0007      	movs	r7, r0
 8007868:	000e      	movs	r6, r1
 800786a:	401a      	ands	r2, r3
 800786c:	421d      	tst	r5, r3
 800786e:	d008      	beq.n	8007882 <__pow5mult+0x22>
 8007870:	4925      	ldr	r1, [pc, #148]	; (8007908 <__pow5mult+0xa8>)
 8007872:	3a01      	subs	r2, #1
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	5852      	ldr	r2, [r2, r1]
 8007878:	2300      	movs	r3, #0
 800787a:	0031      	movs	r1, r6
 800787c:	f7ff fe9e 	bl	80075bc <__multadd>
 8007880:	0006      	movs	r6, r0
 8007882:	10ad      	asrs	r5, r5, #2
 8007884:	d03d      	beq.n	8007902 <__pow5mult+0xa2>
 8007886:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007888:	2c00      	cmp	r4, #0
 800788a:	d10f      	bne.n	80078ac <__pow5mult+0x4c>
 800788c:	2010      	movs	r0, #16
 800788e:	f001 fc4d 	bl	800912c <malloc>
 8007892:	1e02      	subs	r2, r0, #0
 8007894:	6278      	str	r0, [r7, #36]	; 0x24
 8007896:	d105      	bne.n	80078a4 <__pow5mult+0x44>
 8007898:	21d7      	movs	r1, #215	; 0xd7
 800789a:	4b1c      	ldr	r3, [pc, #112]	; (800790c <__pow5mult+0xac>)
 800789c:	481c      	ldr	r0, [pc, #112]	; (8007910 <__pow5mult+0xb0>)
 800789e:	0049      	lsls	r1, r1, #1
 80078a0:	f000 fd6c 	bl	800837c <__assert_func>
 80078a4:	6044      	str	r4, [r0, #4]
 80078a6:	6084      	str	r4, [r0, #8]
 80078a8:	6004      	str	r4, [r0, #0]
 80078aa:	60c4      	str	r4, [r0, #12]
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	689c      	ldr	r4, [r3, #8]
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d108      	bne.n	80078c8 <__pow5mult+0x68>
 80078b6:	0038      	movs	r0, r7
 80078b8:	4916      	ldr	r1, [pc, #88]	; (8007914 <__pow5mult+0xb4>)
 80078ba:	f7ff ff0b 	bl	80076d4 <__i2b>
 80078be:	9b01      	ldr	r3, [sp, #4]
 80078c0:	0004      	movs	r4, r0
 80078c2:	6098      	str	r0, [r3, #8]
 80078c4:	2300      	movs	r3, #0
 80078c6:	6003      	str	r3, [r0, #0]
 80078c8:	2301      	movs	r3, #1
 80078ca:	421d      	tst	r5, r3
 80078cc:	d00a      	beq.n	80078e4 <__pow5mult+0x84>
 80078ce:	0031      	movs	r1, r6
 80078d0:	0022      	movs	r2, r4
 80078d2:	0038      	movs	r0, r7
 80078d4:	f7ff ff14 	bl	8007700 <__multiply>
 80078d8:	0031      	movs	r1, r6
 80078da:	9001      	str	r0, [sp, #4]
 80078dc:	0038      	movs	r0, r7
 80078de:	f7ff fe49 	bl	8007574 <_Bfree>
 80078e2:	9e01      	ldr	r6, [sp, #4]
 80078e4:	106d      	asrs	r5, r5, #1
 80078e6:	d00c      	beq.n	8007902 <__pow5mult+0xa2>
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d107      	bne.n	80078fe <__pow5mult+0x9e>
 80078ee:	0022      	movs	r2, r4
 80078f0:	0021      	movs	r1, r4
 80078f2:	0038      	movs	r0, r7
 80078f4:	f7ff ff04 	bl	8007700 <__multiply>
 80078f8:	2300      	movs	r3, #0
 80078fa:	6020      	str	r0, [r4, #0]
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	0004      	movs	r4, r0
 8007900:	e7e2      	b.n	80078c8 <__pow5mult+0x68>
 8007902:	0030      	movs	r0, r6
 8007904:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	0800a030 	.word	0x0800a030
 800790c:	08009eb4 	.word	0x08009eb4
 8007910:	08009ecb 	.word	0x08009ecb
 8007914:	00000271 	.word	0x00000271

08007918 <__lshift>:
 8007918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800791a:	000c      	movs	r4, r1
 800791c:	0017      	movs	r7, r2
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	1155      	asrs	r5, r2, #5
 8007922:	b087      	sub	sp, #28
 8007924:	18eb      	adds	r3, r5, r3
 8007926:	9302      	str	r3, [sp, #8]
 8007928:	3301      	adds	r3, #1
 800792a:	9301      	str	r3, [sp, #4]
 800792c:	6849      	ldr	r1, [r1, #4]
 800792e:	68a3      	ldr	r3, [r4, #8]
 8007930:	9004      	str	r0, [sp, #16]
 8007932:	9a01      	ldr	r2, [sp, #4]
 8007934:	4293      	cmp	r3, r2
 8007936:	db11      	blt.n	800795c <__lshift+0x44>
 8007938:	9804      	ldr	r0, [sp, #16]
 800793a:	f7ff fdd7 	bl	80074ec <_Balloc>
 800793e:	0002      	movs	r2, r0
 8007940:	2300      	movs	r3, #0
 8007942:	3214      	adds	r2, #20
 8007944:	0006      	movs	r6, r0
 8007946:	0011      	movs	r1, r2
 8007948:	9203      	str	r2, [sp, #12]
 800794a:	4298      	cmp	r0, r3
 800794c:	d10d      	bne.n	800796a <__lshift+0x52>
 800794e:	21da      	movs	r1, #218	; 0xda
 8007950:	0002      	movs	r2, r0
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <__lshift+0xd8>)
 8007954:	4827      	ldr	r0, [pc, #156]	; (80079f4 <__lshift+0xdc>)
 8007956:	31ff      	adds	r1, #255	; 0xff
 8007958:	f000 fd10 	bl	800837c <__assert_func>
 800795c:	3101      	adds	r1, #1
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	e7e7      	b.n	8007932 <__lshift+0x1a>
 8007962:	2200      	movs	r2, #0
 8007964:	0098      	lsls	r0, r3, #2
 8007966:	500a      	str	r2, [r1, r0]
 8007968:	3301      	adds	r3, #1
 800796a:	42ab      	cmp	r3, r5
 800796c:	dbf9      	blt.n	8007962 <__lshift+0x4a>
 800796e:	43eb      	mvns	r3, r5
 8007970:	17db      	asrs	r3, r3, #31
 8007972:	401d      	ands	r5, r3
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	00ad      	lsls	r5, r5, #2
 8007978:	211f      	movs	r1, #31
 800797a:	0038      	movs	r0, r7
 800797c:	195d      	adds	r5, r3, r5
 800797e:	0023      	movs	r3, r4
 8007980:	6922      	ldr	r2, [r4, #16]
 8007982:	3314      	adds	r3, #20
 8007984:	0092      	lsls	r2, r2, #2
 8007986:	4008      	ands	r0, r1
 8007988:	4684      	mov	ip, r0
 800798a:	189a      	adds	r2, r3, r2
 800798c:	420f      	tst	r7, r1
 800798e:	d02a      	beq.n	80079e6 <__lshift+0xce>
 8007990:	3101      	adds	r1, #1
 8007992:	1a09      	subs	r1, r1, r0
 8007994:	9105      	str	r1, [sp, #20]
 8007996:	2100      	movs	r1, #0
 8007998:	9503      	str	r5, [sp, #12]
 800799a:	4667      	mov	r7, ip
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	40b8      	lsls	r0, r7
 80079a0:	4301      	orrs	r1, r0
 80079a2:	9803      	ldr	r0, [sp, #12]
 80079a4:	c002      	stmia	r0!, {r1}
 80079a6:	cb02      	ldmia	r3!, {r1}
 80079a8:	9003      	str	r0, [sp, #12]
 80079aa:	9805      	ldr	r0, [sp, #20]
 80079ac:	40c1      	lsrs	r1, r0
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d8f3      	bhi.n	800799a <__lshift+0x82>
 80079b2:	0020      	movs	r0, r4
 80079b4:	3015      	adds	r0, #21
 80079b6:	2304      	movs	r3, #4
 80079b8:	4282      	cmp	r2, r0
 80079ba:	d304      	bcc.n	80079c6 <__lshift+0xae>
 80079bc:	1b13      	subs	r3, r2, r4
 80079be:	3b15      	subs	r3, #21
 80079c0:	089b      	lsrs	r3, r3, #2
 80079c2:	3301      	adds	r3, #1
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	50e9      	str	r1, [r5, r3]
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d002      	beq.n	80079d2 <__lshift+0xba>
 80079cc:	9b02      	ldr	r3, [sp, #8]
 80079ce:	3302      	adds	r3, #2
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	9804      	ldr	r0, [sp, #16]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	0021      	movs	r1, r4
 80079da:	6133      	str	r3, [r6, #16]
 80079dc:	f7ff fdca 	bl	8007574 <_Bfree>
 80079e0:	0030      	movs	r0, r6
 80079e2:	b007      	add	sp, #28
 80079e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079e6:	cb02      	ldmia	r3!, {r1}
 80079e8:	c502      	stmia	r5!, {r1}
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d8fb      	bhi.n	80079e6 <__lshift+0xce>
 80079ee:	e7f0      	b.n	80079d2 <__lshift+0xba>
 80079f0:	08009f2b 	.word	0x08009f2b
 80079f4:	08009ecb 	.word	0x08009ecb

080079f8 <__mcmp>:
 80079f8:	6902      	ldr	r2, [r0, #16]
 80079fa:	690b      	ldr	r3, [r1, #16]
 80079fc:	b530      	push	{r4, r5, lr}
 80079fe:	0004      	movs	r4, r0
 8007a00:	1ad0      	subs	r0, r2, r3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d10d      	bne.n	8007a22 <__mcmp+0x2a>
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	3414      	adds	r4, #20
 8007a0a:	3114      	adds	r1, #20
 8007a0c:	18e2      	adds	r2, r4, r3
 8007a0e:	18c9      	adds	r1, r1, r3
 8007a10:	3a04      	subs	r2, #4
 8007a12:	3904      	subs	r1, #4
 8007a14:	6815      	ldr	r5, [r2, #0]
 8007a16:	680b      	ldr	r3, [r1, #0]
 8007a18:	429d      	cmp	r5, r3
 8007a1a:	d003      	beq.n	8007a24 <__mcmp+0x2c>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	d303      	bcc.n	8007a2a <__mcmp+0x32>
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	4294      	cmp	r4, r2
 8007a26:	d3f3      	bcc.n	8007a10 <__mcmp+0x18>
 8007a28:	e7fb      	b.n	8007a22 <__mcmp+0x2a>
 8007a2a:	4240      	negs	r0, r0
 8007a2c:	e7f9      	b.n	8007a22 <__mcmp+0x2a>
	...

08007a30 <__mdiff>:
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	000e      	movs	r6, r1
 8007a34:	0007      	movs	r7, r0
 8007a36:	0011      	movs	r1, r2
 8007a38:	0030      	movs	r0, r6
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	0014      	movs	r4, r2
 8007a3e:	f7ff ffdb 	bl	80079f8 <__mcmp>
 8007a42:	1e05      	subs	r5, r0, #0
 8007a44:	d110      	bne.n	8007a68 <__mdiff+0x38>
 8007a46:	0001      	movs	r1, r0
 8007a48:	0038      	movs	r0, r7
 8007a4a:	f7ff fd4f 	bl	80074ec <_Balloc>
 8007a4e:	1e02      	subs	r2, r0, #0
 8007a50:	d104      	bne.n	8007a5c <__mdiff+0x2c>
 8007a52:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <__mdiff+0x124>)
 8007a54:	4940      	ldr	r1, [pc, #256]	; (8007b58 <__mdiff+0x128>)
 8007a56:	4841      	ldr	r0, [pc, #260]	; (8007b5c <__mdiff+0x12c>)
 8007a58:	f000 fc90 	bl	800837c <__assert_func>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	6145      	str	r5, [r0, #20]
 8007a60:	6103      	str	r3, [r0, #16]
 8007a62:	0010      	movs	r0, r2
 8007a64:	b007      	add	sp, #28
 8007a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a68:	2301      	movs	r3, #1
 8007a6a:	9301      	str	r3, [sp, #4]
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	db04      	blt.n	8007a7a <__mdiff+0x4a>
 8007a70:	0023      	movs	r3, r4
 8007a72:	0034      	movs	r4, r6
 8007a74:	001e      	movs	r6, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	9301      	str	r3, [sp, #4]
 8007a7a:	0038      	movs	r0, r7
 8007a7c:	6861      	ldr	r1, [r4, #4]
 8007a7e:	f7ff fd35 	bl	80074ec <_Balloc>
 8007a82:	1e02      	subs	r2, r0, #0
 8007a84:	d103      	bne.n	8007a8e <__mdiff+0x5e>
 8007a86:	2190      	movs	r1, #144	; 0x90
 8007a88:	4b32      	ldr	r3, [pc, #200]	; (8007b54 <__mdiff+0x124>)
 8007a8a:	0089      	lsls	r1, r1, #2
 8007a8c:	e7e3      	b.n	8007a56 <__mdiff+0x26>
 8007a8e:	9b01      	ldr	r3, [sp, #4]
 8007a90:	2700      	movs	r7, #0
 8007a92:	60c3      	str	r3, [r0, #12]
 8007a94:	6920      	ldr	r0, [r4, #16]
 8007a96:	3414      	adds	r4, #20
 8007a98:	9401      	str	r4, [sp, #4]
 8007a9a:	9b01      	ldr	r3, [sp, #4]
 8007a9c:	0084      	lsls	r4, r0, #2
 8007a9e:	191b      	adds	r3, r3, r4
 8007aa0:	0034      	movs	r4, r6
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	6933      	ldr	r3, [r6, #16]
 8007aa6:	3414      	adds	r4, #20
 8007aa8:	0099      	lsls	r1, r3, #2
 8007aaa:	1863      	adds	r3, r4, r1
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	0013      	movs	r3, r2
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	469c      	mov	ip, r3
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	9b01      	ldr	r3, [sp, #4]
 8007ab8:	9304      	str	r3, [sp, #16]
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	cc02      	ldmia	r4!, {r1}
 8007abe:	cb20      	ldmia	r3!, {r5}
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	b2ab      	uxth	r3, r5
 8007ac4:	19df      	adds	r7, r3, r7
 8007ac6:	b28b      	uxth	r3, r1
 8007ac8:	1afb      	subs	r3, r7, r3
 8007aca:	0c2d      	lsrs	r5, r5, #16
 8007acc:	0c09      	lsrs	r1, r1, #16
 8007ace:	1a69      	subs	r1, r5, r1
 8007ad0:	141d      	asrs	r5, r3, #16
 8007ad2:	1949      	adds	r1, r1, r5
 8007ad4:	140f      	asrs	r7, r1, #16
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	0409      	lsls	r1, r1, #16
 8007ada:	430b      	orrs	r3, r1
 8007adc:	4661      	mov	r1, ip
 8007ade:	c108      	stmia	r1!, {r3}
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	468c      	mov	ip, r1
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d8e8      	bhi.n	8007aba <__mdiff+0x8a>
 8007ae8:	0031      	movs	r1, r6
 8007aea:	9c03      	ldr	r4, [sp, #12]
 8007aec:	3115      	adds	r1, #21
 8007aee:	2304      	movs	r3, #4
 8007af0:	428c      	cmp	r4, r1
 8007af2:	d304      	bcc.n	8007afe <__mdiff+0xce>
 8007af4:	1ba3      	subs	r3, r4, r6
 8007af6:	3b15      	subs	r3, #21
 8007af8:	089b      	lsrs	r3, r3, #2
 8007afa:	3301      	adds	r3, #1
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	9901      	ldr	r1, [sp, #4]
 8007b00:	18cc      	adds	r4, r1, r3
 8007b02:	9905      	ldr	r1, [sp, #20]
 8007b04:	0026      	movs	r6, r4
 8007b06:	18cb      	adds	r3, r1, r3
 8007b08:	469c      	mov	ip, r3
 8007b0a:	9902      	ldr	r1, [sp, #8]
 8007b0c:	428e      	cmp	r6, r1
 8007b0e:	d310      	bcc.n	8007b32 <__mdiff+0x102>
 8007b10:	9e02      	ldr	r6, [sp, #8]
 8007b12:	1ee5      	subs	r5, r4, #3
 8007b14:	2100      	movs	r1, #0
 8007b16:	42ae      	cmp	r6, r5
 8007b18:	d304      	bcc.n	8007b24 <__mdiff+0xf4>
 8007b1a:	0031      	movs	r1, r6
 8007b1c:	3103      	adds	r1, #3
 8007b1e:	1b09      	subs	r1, r1, r4
 8007b20:	0889      	lsrs	r1, r1, #2
 8007b22:	0089      	lsls	r1, r1, #2
 8007b24:	185b      	adds	r3, r3, r1
 8007b26:	3b04      	subs	r3, #4
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	d00f      	beq.n	8007b4e <__mdiff+0x11e>
 8007b2e:	6110      	str	r0, [r2, #16]
 8007b30:	e797      	b.n	8007a62 <__mdiff+0x32>
 8007b32:	ce02      	ldmia	r6!, {r1}
 8007b34:	b28d      	uxth	r5, r1
 8007b36:	19ed      	adds	r5, r5, r7
 8007b38:	0c0f      	lsrs	r7, r1, #16
 8007b3a:	1429      	asrs	r1, r5, #16
 8007b3c:	1879      	adds	r1, r7, r1
 8007b3e:	140f      	asrs	r7, r1, #16
 8007b40:	b2ad      	uxth	r5, r5
 8007b42:	0409      	lsls	r1, r1, #16
 8007b44:	430d      	orrs	r5, r1
 8007b46:	4661      	mov	r1, ip
 8007b48:	c120      	stmia	r1!, {r5}
 8007b4a:	468c      	mov	ip, r1
 8007b4c:	e7dd      	b.n	8007b0a <__mdiff+0xda>
 8007b4e:	3801      	subs	r0, #1
 8007b50:	e7e9      	b.n	8007b26 <__mdiff+0xf6>
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	08009f2b 	.word	0x08009f2b
 8007b58:	00000232 	.word	0x00000232
 8007b5c:	08009ecb 	.word	0x08009ecb

08007b60 <__d2b>:
 8007b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b62:	2101      	movs	r1, #1
 8007b64:	0014      	movs	r4, r2
 8007b66:	001e      	movs	r6, r3
 8007b68:	9f08      	ldr	r7, [sp, #32]
 8007b6a:	f7ff fcbf 	bl	80074ec <_Balloc>
 8007b6e:	1e05      	subs	r5, r0, #0
 8007b70:	d105      	bne.n	8007b7e <__d2b+0x1e>
 8007b72:	0002      	movs	r2, r0
 8007b74:	4b26      	ldr	r3, [pc, #152]	; (8007c10 <__d2b+0xb0>)
 8007b76:	4927      	ldr	r1, [pc, #156]	; (8007c14 <__d2b+0xb4>)
 8007b78:	4827      	ldr	r0, [pc, #156]	; (8007c18 <__d2b+0xb8>)
 8007b7a:	f000 fbff 	bl	800837c <__assert_func>
 8007b7e:	0333      	lsls	r3, r6, #12
 8007b80:	0076      	lsls	r6, r6, #1
 8007b82:	0b1b      	lsrs	r3, r3, #12
 8007b84:	0d76      	lsrs	r6, r6, #21
 8007b86:	d124      	bne.n	8007bd2 <__d2b+0x72>
 8007b88:	9301      	str	r3, [sp, #4]
 8007b8a:	2c00      	cmp	r4, #0
 8007b8c:	d027      	beq.n	8007bde <__d2b+0x7e>
 8007b8e:	4668      	mov	r0, sp
 8007b90:	9400      	str	r4, [sp, #0]
 8007b92:	f7ff fd71 	bl	8007678 <__lo0bits>
 8007b96:	9c00      	ldr	r4, [sp, #0]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d01e      	beq.n	8007bda <__d2b+0x7a>
 8007b9c:	9b01      	ldr	r3, [sp, #4]
 8007b9e:	2120      	movs	r1, #32
 8007ba0:	001a      	movs	r2, r3
 8007ba2:	1a09      	subs	r1, r1, r0
 8007ba4:	408a      	lsls	r2, r1
 8007ba6:	40c3      	lsrs	r3, r0
 8007ba8:	4322      	orrs	r2, r4
 8007baa:	616a      	str	r2, [r5, #20]
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	9c01      	ldr	r4, [sp, #4]
 8007bb0:	61ac      	str	r4, [r5, #24]
 8007bb2:	1e63      	subs	r3, r4, #1
 8007bb4:	419c      	sbcs	r4, r3
 8007bb6:	3401      	adds	r4, #1
 8007bb8:	612c      	str	r4, [r5, #16]
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d018      	beq.n	8007bf0 <__d2b+0x90>
 8007bbe:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <__d2b+0xbc>)
 8007bc0:	18f6      	adds	r6, r6, r3
 8007bc2:	2335      	movs	r3, #53	; 0x35
 8007bc4:	1836      	adds	r6, r6, r0
 8007bc6:	1a18      	subs	r0, r3, r0
 8007bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bca:	603e      	str	r6, [r7, #0]
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	0028      	movs	r0, r5
 8007bd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bd2:	2280      	movs	r2, #128	; 0x80
 8007bd4:	0352      	lsls	r2, r2, #13
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	e7d6      	b.n	8007b88 <__d2b+0x28>
 8007bda:	616c      	str	r4, [r5, #20]
 8007bdc:	e7e7      	b.n	8007bae <__d2b+0x4e>
 8007bde:	a801      	add	r0, sp, #4
 8007be0:	f7ff fd4a 	bl	8007678 <__lo0bits>
 8007be4:	2401      	movs	r4, #1
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	612c      	str	r4, [r5, #16]
 8007bea:	616b      	str	r3, [r5, #20]
 8007bec:	3020      	adds	r0, #32
 8007bee:	e7e4      	b.n	8007bba <__d2b+0x5a>
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <__d2b+0xc0>)
 8007bf2:	18c0      	adds	r0, r0, r3
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <__d2b+0xc4>)
 8007bf6:	6038      	str	r0, [r7, #0]
 8007bf8:	18e3      	adds	r3, r4, r3
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	18eb      	adds	r3, r5, r3
 8007bfe:	6958      	ldr	r0, [r3, #20]
 8007c00:	f7ff fd20 	bl	8007644 <__hi0bits>
 8007c04:	0164      	lsls	r4, r4, #5
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	1a24      	subs	r4, r4, r0
 8007c0a:	601c      	str	r4, [r3, #0]
 8007c0c:	e7df      	b.n	8007bce <__d2b+0x6e>
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	08009f2b 	.word	0x08009f2b
 8007c14:	0000030a 	.word	0x0000030a
 8007c18:	08009ecb 	.word	0x08009ecb
 8007c1c:	fffffbcd 	.word	0xfffffbcd
 8007c20:	fffffbce 	.word	0xfffffbce
 8007c24:	3fffffff 	.word	0x3fffffff

08007c28 <_mprec_log10>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	0004      	movs	r4, r0
 8007c2c:	2817      	cmp	r0, #23
 8007c2e:	dc05      	bgt.n	8007c3c <_mprec_log10+0x14>
 8007c30:	4b07      	ldr	r3, [pc, #28]	; (8007c50 <_mprec_log10+0x28>)
 8007c32:	00c4      	lsls	r4, r0, #3
 8007c34:	191c      	adds	r4, r3, r4
 8007c36:	6820      	ldr	r0, [r4, #0]
 8007c38:	6861      	ldr	r1, [r4, #4]
 8007c3a:	bd10      	pop	{r4, pc}
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4905      	ldr	r1, [pc, #20]	; (8007c54 <_mprec_log10+0x2c>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <_mprec_log10+0x30>)
 8007c44:	3c01      	subs	r4, #1
 8007c46:	f7fa f887 	bl	8001d58 <__aeabi_dmul>
 8007c4a:	2c00      	cmp	r4, #0
 8007c4c:	d1f8      	bne.n	8007c40 <_mprec_log10+0x18>
 8007c4e:	e7f4      	b.n	8007c3a <_mprec_log10+0x12>
 8007c50:	08009f68 	.word	0x08009f68
 8007c54:	3ff00000 	.word	0x3ff00000
 8007c58:	40240000 	.word	0x40240000

08007c5c <_calloc_r>:
 8007c5c:	434a      	muls	r2, r1
 8007c5e:	b570      	push	{r4, r5, r6, lr}
 8007c60:	0011      	movs	r1, r2
 8007c62:	0015      	movs	r5, r2
 8007c64:	f000 f808 	bl	8007c78 <_malloc_r>
 8007c68:	1e04      	subs	r4, r0, #0
 8007c6a:	d003      	beq.n	8007c74 <_calloc_r+0x18>
 8007c6c:	002a      	movs	r2, r5
 8007c6e:	2100      	movs	r1, #0
 8007c70:	f7ff fac6 	bl	8007200 <memset>
 8007c74:	0020      	movs	r0, r4
 8007c76:	bd70      	pop	{r4, r5, r6, pc}

08007c78 <_malloc_r>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	1ccd      	adds	r5, r1, #3
 8007c7e:	439d      	bics	r5, r3
 8007c80:	3508      	adds	r5, #8
 8007c82:	0006      	movs	r6, r0
 8007c84:	2d0c      	cmp	r5, #12
 8007c86:	d21f      	bcs.n	8007cc8 <_malloc_r+0x50>
 8007c88:	250c      	movs	r5, #12
 8007c8a:	42a9      	cmp	r1, r5
 8007c8c:	d81e      	bhi.n	8007ccc <_malloc_r+0x54>
 8007c8e:	0030      	movs	r0, r6
 8007c90:	f001 fa7e 	bl	8009190 <__malloc_lock>
 8007c94:	4925      	ldr	r1, [pc, #148]	; (8007d2c <_malloc_r+0xb4>)
 8007c96:	680a      	ldr	r2, [r1, #0]
 8007c98:	0014      	movs	r4, r2
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d11a      	bne.n	8007cd4 <_malloc_r+0x5c>
 8007c9e:	4f24      	ldr	r7, [pc, #144]	; (8007d30 <_malloc_r+0xb8>)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <_malloc_r+0x38>
 8007ca6:	0021      	movs	r1, r4
 8007ca8:	0030      	movs	r0, r6
 8007caa:	f000 fb4d 	bl	8008348 <_sbrk_r>
 8007cae:	6038      	str	r0, [r7, #0]
 8007cb0:	0029      	movs	r1, r5
 8007cb2:	0030      	movs	r0, r6
 8007cb4:	f000 fb48 	bl	8008348 <_sbrk_r>
 8007cb8:	1c43      	adds	r3, r0, #1
 8007cba:	d12b      	bne.n	8007d14 <_malloc_r+0x9c>
 8007cbc:	230c      	movs	r3, #12
 8007cbe:	0030      	movs	r0, r6
 8007cc0:	6033      	str	r3, [r6, #0]
 8007cc2:	f001 fa6d 	bl	80091a0 <__malloc_unlock>
 8007cc6:	e003      	b.n	8007cd0 <_malloc_r+0x58>
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	dade      	bge.n	8007c8a <_malloc_r+0x12>
 8007ccc:	230c      	movs	r3, #12
 8007cce:	6033      	str	r3, [r6, #0]
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	1b5b      	subs	r3, r3, r5
 8007cd8:	d419      	bmi.n	8007d0e <_malloc_r+0x96>
 8007cda:	2b0b      	cmp	r3, #11
 8007cdc:	d903      	bls.n	8007ce6 <_malloc_r+0x6e>
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	18e4      	adds	r4, r4, r3
 8007ce2:	6025      	str	r5, [r4, #0]
 8007ce4:	e003      	b.n	8007cee <_malloc_r+0x76>
 8007ce6:	6863      	ldr	r3, [r4, #4]
 8007ce8:	42a2      	cmp	r2, r4
 8007cea:	d10e      	bne.n	8007d0a <_malloc_r+0x92>
 8007cec:	600b      	str	r3, [r1, #0]
 8007cee:	0030      	movs	r0, r6
 8007cf0:	f001 fa56 	bl	80091a0 <__malloc_unlock>
 8007cf4:	0020      	movs	r0, r4
 8007cf6:	2207      	movs	r2, #7
 8007cf8:	300b      	adds	r0, #11
 8007cfa:	1d23      	adds	r3, r4, #4
 8007cfc:	4390      	bics	r0, r2
 8007cfe:	1ac2      	subs	r2, r0, r3
 8007d00:	4298      	cmp	r0, r3
 8007d02:	d0e6      	beq.n	8007cd2 <_malloc_r+0x5a>
 8007d04:	1a1b      	subs	r3, r3, r0
 8007d06:	50a3      	str	r3, [r4, r2]
 8007d08:	e7e3      	b.n	8007cd2 <_malloc_r+0x5a>
 8007d0a:	6053      	str	r3, [r2, #4]
 8007d0c:	e7ef      	b.n	8007cee <_malloc_r+0x76>
 8007d0e:	0022      	movs	r2, r4
 8007d10:	6864      	ldr	r4, [r4, #4]
 8007d12:	e7c2      	b.n	8007c9a <_malloc_r+0x22>
 8007d14:	2303      	movs	r3, #3
 8007d16:	1cc4      	adds	r4, r0, #3
 8007d18:	439c      	bics	r4, r3
 8007d1a:	42a0      	cmp	r0, r4
 8007d1c:	d0e1      	beq.n	8007ce2 <_malloc_r+0x6a>
 8007d1e:	1a21      	subs	r1, r4, r0
 8007d20:	0030      	movs	r0, r6
 8007d22:	f000 fb11 	bl	8008348 <_sbrk_r>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d1db      	bne.n	8007ce2 <_malloc_r+0x6a>
 8007d2a:	e7c7      	b.n	8007cbc <_malloc_r+0x44>
 8007d2c:	20000094 	.word	0x20000094
 8007d30:	20000098 	.word	0x20000098

08007d34 <_realloc_r>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	0007      	movs	r7, r0
 8007d38:	000d      	movs	r5, r1
 8007d3a:	0016      	movs	r6, r2
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d105      	bne.n	8007d4c <_realloc_r+0x18>
 8007d40:	0011      	movs	r1, r2
 8007d42:	f7ff ff99 	bl	8007c78 <_malloc_r>
 8007d46:	0004      	movs	r4, r0
 8007d48:	0020      	movs	r0, r4
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	d103      	bne.n	8007d58 <_realloc_r+0x24>
 8007d50:	f001 fa2e 	bl	80091b0 <_free_r>
 8007d54:	0034      	movs	r4, r6
 8007d56:	e7f7      	b.n	8007d48 <_realloc_r+0x14>
 8007d58:	f001 fa74 	bl	8009244 <_malloc_usable_size_r>
 8007d5c:	002c      	movs	r4, r5
 8007d5e:	42b0      	cmp	r0, r6
 8007d60:	d2f2      	bcs.n	8007d48 <_realloc_r+0x14>
 8007d62:	0031      	movs	r1, r6
 8007d64:	0038      	movs	r0, r7
 8007d66:	f7ff ff87 	bl	8007c78 <_malloc_r>
 8007d6a:	1e04      	subs	r4, r0, #0
 8007d6c:	d0ec      	beq.n	8007d48 <_realloc_r+0x14>
 8007d6e:	0029      	movs	r1, r5
 8007d70:	0032      	movs	r2, r6
 8007d72:	f001 f9f0 	bl	8009156 <memcpy>
 8007d76:	0029      	movs	r1, r5
 8007d78:	0038      	movs	r0, r7
 8007d7a:	f001 fa19 	bl	80091b0 <_free_r>
 8007d7e:	e7e3      	b.n	8007d48 <_realloc_r+0x14>

08007d80 <__ssputs_r>:
 8007d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d82:	688e      	ldr	r6, [r1, #8]
 8007d84:	b085      	sub	sp, #20
 8007d86:	0007      	movs	r7, r0
 8007d88:	000c      	movs	r4, r1
 8007d8a:	9203      	str	r2, [sp, #12]
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	429e      	cmp	r6, r3
 8007d90:	d83c      	bhi.n	8007e0c <__ssputs_r+0x8c>
 8007d92:	2390      	movs	r3, #144	; 0x90
 8007d94:	898a      	ldrh	r2, [r1, #12]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	421a      	tst	r2, r3
 8007d9a:	d034      	beq.n	8007e06 <__ssputs_r+0x86>
 8007d9c:	2503      	movs	r5, #3
 8007d9e:	6909      	ldr	r1, [r1, #16]
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	1a5b      	subs	r3, r3, r1
 8007da4:	9302      	str	r3, [sp, #8]
 8007da6:	6963      	ldr	r3, [r4, #20]
 8007da8:	9802      	ldr	r0, [sp, #8]
 8007daa:	435d      	muls	r5, r3
 8007dac:	0feb      	lsrs	r3, r5, #31
 8007dae:	195d      	adds	r5, r3, r5
 8007db0:	9b01      	ldr	r3, [sp, #4]
 8007db2:	106d      	asrs	r5, r5, #1
 8007db4:	3301      	adds	r3, #1
 8007db6:	181b      	adds	r3, r3, r0
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	d900      	bls.n	8007dbe <__ssputs_r+0x3e>
 8007dbc:	001d      	movs	r5, r3
 8007dbe:	0553      	lsls	r3, r2, #21
 8007dc0:	d532      	bpl.n	8007e28 <__ssputs_r+0xa8>
 8007dc2:	0029      	movs	r1, r5
 8007dc4:	0038      	movs	r0, r7
 8007dc6:	f7ff ff57 	bl	8007c78 <_malloc_r>
 8007dca:	1e06      	subs	r6, r0, #0
 8007dcc:	d109      	bne.n	8007de2 <__ssputs_r+0x62>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	603b      	str	r3, [r7, #0]
 8007dd2:	2340      	movs	r3, #64	; 0x40
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	89a2      	ldrh	r2, [r4, #12]
 8007dd8:	4240      	negs	r0, r0
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	b005      	add	sp, #20
 8007de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de2:	9a02      	ldr	r2, [sp, #8]
 8007de4:	6921      	ldr	r1, [r4, #16]
 8007de6:	f001 f9b6 	bl	8009156 <memcpy>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <__ssputs_r+0xc0>)
 8007dee:	401a      	ands	r2, r3
 8007df0:	2380      	movs	r3, #128	; 0x80
 8007df2:	4313      	orrs	r3, r2
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	6126      	str	r6, [r4, #16]
 8007dfa:	18f6      	adds	r6, r6, r3
 8007dfc:	6026      	str	r6, [r4, #0]
 8007dfe:	6165      	str	r5, [r4, #20]
 8007e00:	9e01      	ldr	r6, [sp, #4]
 8007e02:	1aed      	subs	r5, r5, r3
 8007e04:	60a5      	str	r5, [r4, #8]
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	429e      	cmp	r6, r3
 8007e0a:	d900      	bls.n	8007e0e <__ssputs_r+0x8e>
 8007e0c:	9e01      	ldr	r6, [sp, #4]
 8007e0e:	0032      	movs	r2, r6
 8007e10:	9903      	ldr	r1, [sp, #12]
 8007e12:	6820      	ldr	r0, [r4, #0]
 8007e14:	f001 f9a8 	bl	8009168 <memmove>
 8007e18:	68a3      	ldr	r3, [r4, #8]
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	1b9b      	subs	r3, r3, r6
 8007e1e:	60a3      	str	r3, [r4, #8]
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	199e      	adds	r6, r3, r6
 8007e24:	6026      	str	r6, [r4, #0]
 8007e26:	e7da      	b.n	8007dde <__ssputs_r+0x5e>
 8007e28:	002a      	movs	r2, r5
 8007e2a:	0038      	movs	r0, r7
 8007e2c:	f7ff ff82 	bl	8007d34 <_realloc_r>
 8007e30:	1e06      	subs	r6, r0, #0
 8007e32:	d1e0      	bne.n	8007df6 <__ssputs_r+0x76>
 8007e34:	0038      	movs	r0, r7
 8007e36:	6921      	ldr	r1, [r4, #16]
 8007e38:	f001 f9ba 	bl	80091b0 <_free_r>
 8007e3c:	e7c7      	b.n	8007dce <__ssputs_r+0x4e>
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	fffffb7f 	.word	0xfffffb7f

08007e44 <_svfiprintf_r>:
 8007e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e46:	b0a1      	sub	sp, #132	; 0x84
 8007e48:	9003      	str	r0, [sp, #12]
 8007e4a:	001d      	movs	r5, r3
 8007e4c:	898b      	ldrh	r3, [r1, #12]
 8007e4e:	000f      	movs	r7, r1
 8007e50:	0016      	movs	r6, r2
 8007e52:	061b      	lsls	r3, r3, #24
 8007e54:	d511      	bpl.n	8007e7a <_svfiprintf_r+0x36>
 8007e56:	690b      	ldr	r3, [r1, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10e      	bne.n	8007e7a <_svfiprintf_r+0x36>
 8007e5c:	2140      	movs	r1, #64	; 0x40
 8007e5e:	f7ff ff0b 	bl	8007c78 <_malloc_r>
 8007e62:	6038      	str	r0, [r7, #0]
 8007e64:	6138      	str	r0, [r7, #16]
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d105      	bne.n	8007e76 <_svfiprintf_r+0x32>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	9a03      	ldr	r2, [sp, #12]
 8007e6e:	3801      	subs	r0, #1
 8007e70:	6013      	str	r3, [r2, #0]
 8007e72:	b021      	add	sp, #132	; 0x84
 8007e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e76:	2340      	movs	r3, #64	; 0x40
 8007e78:	617b      	str	r3, [r7, #20]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	ac08      	add	r4, sp, #32
 8007e7e:	6163      	str	r3, [r4, #20]
 8007e80:	3320      	adds	r3, #32
 8007e82:	7663      	strb	r3, [r4, #25]
 8007e84:	3310      	adds	r3, #16
 8007e86:	76a3      	strb	r3, [r4, #26]
 8007e88:	9507      	str	r5, [sp, #28]
 8007e8a:	0035      	movs	r5, r6
 8007e8c:	782b      	ldrb	r3, [r5, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <_svfiprintf_r+0x52>
 8007e92:	2b25      	cmp	r3, #37	; 0x25
 8007e94:	d147      	bne.n	8007f26 <_svfiprintf_r+0xe2>
 8007e96:	1bab      	subs	r3, r5, r6
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	42b5      	cmp	r5, r6
 8007e9c:	d00c      	beq.n	8007eb8 <_svfiprintf_r+0x74>
 8007e9e:	0032      	movs	r2, r6
 8007ea0:	0039      	movs	r1, r7
 8007ea2:	9803      	ldr	r0, [sp, #12]
 8007ea4:	f7ff ff6c 	bl	8007d80 <__ssputs_r>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d100      	bne.n	8007eae <_svfiprintf_r+0x6a>
 8007eac:	e0ae      	b.n	800800c <_svfiprintf_r+0x1c8>
 8007eae:	6962      	ldr	r2, [r4, #20]
 8007eb0:	9b05      	ldr	r3, [sp, #20]
 8007eb2:	4694      	mov	ip, r2
 8007eb4:	4463      	add	r3, ip
 8007eb6:	6163      	str	r3, [r4, #20]
 8007eb8:	782b      	ldrb	r3, [r5, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d100      	bne.n	8007ec0 <_svfiprintf_r+0x7c>
 8007ebe:	e0a5      	b.n	800800c <_svfiprintf_r+0x1c8>
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4252      	negs	r2, r2
 8007ec6:	6062      	str	r2, [r4, #4]
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	3254      	adds	r2, #84	; 0x54
 8007ecc:	1852      	adds	r2, r2, r1
 8007ece:	1c6e      	adds	r6, r5, #1
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	60e3      	str	r3, [r4, #12]
 8007ed4:	60a3      	str	r3, [r4, #8]
 8007ed6:	7013      	strb	r3, [r2, #0]
 8007ed8:	65a3      	str	r3, [r4, #88]	; 0x58
 8007eda:	2205      	movs	r2, #5
 8007edc:	7831      	ldrb	r1, [r6, #0]
 8007ede:	4854      	ldr	r0, [pc, #336]	; (8008030 <_svfiprintf_r+0x1ec>)
 8007ee0:	f001 f92e 	bl	8009140 <memchr>
 8007ee4:	1c75      	adds	r5, r6, #1
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d11f      	bne.n	8007f2a <_svfiprintf_r+0xe6>
 8007eea:	6822      	ldr	r2, [r4, #0]
 8007eec:	06d3      	lsls	r3, r2, #27
 8007eee:	d504      	bpl.n	8007efa <_svfiprintf_r+0xb6>
 8007ef0:	2353      	movs	r3, #83	; 0x53
 8007ef2:	a904      	add	r1, sp, #16
 8007ef4:	185b      	adds	r3, r3, r1
 8007ef6:	2120      	movs	r1, #32
 8007ef8:	7019      	strb	r1, [r3, #0]
 8007efa:	0713      	lsls	r3, r2, #28
 8007efc:	d504      	bpl.n	8007f08 <_svfiprintf_r+0xc4>
 8007efe:	2353      	movs	r3, #83	; 0x53
 8007f00:	a904      	add	r1, sp, #16
 8007f02:	185b      	adds	r3, r3, r1
 8007f04:	212b      	movs	r1, #43	; 0x2b
 8007f06:	7019      	strb	r1, [r3, #0]
 8007f08:	7833      	ldrb	r3, [r6, #0]
 8007f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f0c:	d016      	beq.n	8007f3c <_svfiprintf_r+0xf8>
 8007f0e:	0035      	movs	r5, r6
 8007f10:	2100      	movs	r1, #0
 8007f12:	200a      	movs	r0, #10
 8007f14:	68e3      	ldr	r3, [r4, #12]
 8007f16:	782a      	ldrb	r2, [r5, #0]
 8007f18:	1c6e      	adds	r6, r5, #1
 8007f1a:	3a30      	subs	r2, #48	; 0x30
 8007f1c:	2a09      	cmp	r2, #9
 8007f1e:	d94e      	bls.n	8007fbe <_svfiprintf_r+0x17a>
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d111      	bne.n	8007f48 <_svfiprintf_r+0x104>
 8007f24:	e017      	b.n	8007f56 <_svfiprintf_r+0x112>
 8007f26:	3501      	adds	r5, #1
 8007f28:	e7b0      	b.n	8007e8c <_svfiprintf_r+0x48>
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <_svfiprintf_r+0x1ec>)
 8007f2c:	6822      	ldr	r2, [r4, #0]
 8007f2e:	1ac0      	subs	r0, r0, r3
 8007f30:	2301      	movs	r3, #1
 8007f32:	4083      	lsls	r3, r0
 8007f34:	4313      	orrs	r3, r2
 8007f36:	002e      	movs	r6, r5
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	e7ce      	b.n	8007eda <_svfiprintf_r+0x96>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
 8007f3e:	1d19      	adds	r1, r3, #4
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	9107      	str	r1, [sp, #28]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	db01      	blt.n	8007f4c <_svfiprintf_r+0x108>
 8007f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f4a:	e004      	b.n	8007f56 <_svfiprintf_r+0x112>
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	60e3      	str	r3, [r4, #12]
 8007f50:	2302      	movs	r3, #2
 8007f52:	4313      	orrs	r3, r2
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	782b      	ldrb	r3, [r5, #0]
 8007f58:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5a:	d10a      	bne.n	8007f72 <_svfiprintf_r+0x12e>
 8007f5c:	786b      	ldrb	r3, [r5, #1]
 8007f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f60:	d135      	bne.n	8007fce <_svfiprintf_r+0x18a>
 8007f62:	9b07      	ldr	r3, [sp, #28]
 8007f64:	3502      	adds	r5, #2
 8007f66:	1d1a      	adds	r2, r3, #4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	9207      	str	r2, [sp, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	db2b      	blt.n	8007fc8 <_svfiprintf_r+0x184>
 8007f70:	9309      	str	r3, [sp, #36]	; 0x24
 8007f72:	4e30      	ldr	r6, [pc, #192]	; (8008034 <_svfiprintf_r+0x1f0>)
 8007f74:	2203      	movs	r2, #3
 8007f76:	0030      	movs	r0, r6
 8007f78:	7829      	ldrb	r1, [r5, #0]
 8007f7a:	f001 f8e1 	bl	8009140 <memchr>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d006      	beq.n	8007f90 <_svfiprintf_r+0x14c>
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	1b80      	subs	r0, r0, r6
 8007f86:	4083      	lsls	r3, r0
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	3501      	adds	r5, #1
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	7829      	ldrb	r1, [r5, #0]
 8007f92:	2206      	movs	r2, #6
 8007f94:	4828      	ldr	r0, [pc, #160]	; (8008038 <_svfiprintf_r+0x1f4>)
 8007f96:	1c6e      	adds	r6, r5, #1
 8007f98:	7621      	strb	r1, [r4, #24]
 8007f9a:	f001 f8d1 	bl	8009140 <memchr>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d03c      	beq.n	800801c <_svfiprintf_r+0x1d8>
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <_svfiprintf_r+0x1f8>)
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d125      	bne.n	8007ff4 <_svfiprintf_r+0x1b0>
 8007fa8:	2207      	movs	r2, #7
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	3307      	adds	r3, #7
 8007fae:	4393      	bics	r3, r2
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9307      	str	r3, [sp, #28]
 8007fb4:	6963      	ldr	r3, [r4, #20]
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	189b      	adds	r3, r3, r2
 8007fba:	6163      	str	r3, [r4, #20]
 8007fbc:	e765      	b.n	8007e8a <_svfiprintf_r+0x46>
 8007fbe:	4343      	muls	r3, r0
 8007fc0:	0035      	movs	r5, r6
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	e7a6      	b.n	8007f16 <_svfiprintf_r+0xd2>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	425b      	negs	r3, r3
 8007fcc:	e7d0      	b.n	8007f70 <_svfiprintf_r+0x12c>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	200a      	movs	r0, #10
 8007fd2:	001a      	movs	r2, r3
 8007fd4:	3501      	adds	r5, #1
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	7829      	ldrb	r1, [r5, #0]
 8007fda:	1c6e      	adds	r6, r5, #1
 8007fdc:	3930      	subs	r1, #48	; 0x30
 8007fde:	2909      	cmp	r1, #9
 8007fe0:	d903      	bls.n	8007fea <_svfiprintf_r+0x1a6>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0c5      	beq.n	8007f72 <_svfiprintf_r+0x12e>
 8007fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8007fe8:	e7c3      	b.n	8007f72 <_svfiprintf_r+0x12e>
 8007fea:	4342      	muls	r2, r0
 8007fec:	0035      	movs	r5, r6
 8007fee:	2301      	movs	r3, #1
 8007ff0:	1852      	adds	r2, r2, r1
 8007ff2:	e7f1      	b.n	8007fd8 <_svfiprintf_r+0x194>
 8007ff4:	ab07      	add	r3, sp, #28
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	003a      	movs	r2, r7
 8007ffa:	0021      	movs	r1, r4
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <_svfiprintf_r+0x1fc>)
 8007ffe:	9803      	ldr	r0, [sp, #12]
 8008000:	e000      	b.n	8008004 <_svfiprintf_r+0x1c0>
 8008002:	bf00      	nop
 8008004:	9004      	str	r0, [sp, #16]
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	3301      	adds	r3, #1
 800800a:	d1d3      	bne.n	8007fb4 <_svfiprintf_r+0x170>
 800800c:	89bb      	ldrh	r3, [r7, #12]
 800800e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008010:	065b      	lsls	r3, r3, #25
 8008012:	d400      	bmi.n	8008016 <_svfiprintf_r+0x1d2>
 8008014:	e72d      	b.n	8007e72 <_svfiprintf_r+0x2e>
 8008016:	2001      	movs	r0, #1
 8008018:	4240      	negs	r0, r0
 800801a:	e72a      	b.n	8007e72 <_svfiprintf_r+0x2e>
 800801c:	ab07      	add	r3, sp, #28
 800801e:	9300      	str	r3, [sp, #0]
 8008020:	003a      	movs	r2, r7
 8008022:	0021      	movs	r1, r4
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <_svfiprintf_r+0x1fc>)
 8008026:	9803      	ldr	r0, [sp, #12]
 8008028:	f000 f87c 	bl	8008124 <_printf_i>
 800802c:	e7ea      	b.n	8008004 <_svfiprintf_r+0x1c0>
 800802e:	46c0      	nop			; (mov r8, r8)
 8008030:	0800a03c 	.word	0x0800a03c
 8008034:	0800a042 	.word	0x0800a042
 8008038:	0800a046 	.word	0x0800a046
 800803c:	00000000 	.word	0x00000000
 8008040:	08007d81 	.word	0x08007d81

08008044 <_printf_common>:
 8008044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008046:	0015      	movs	r5, r2
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	688a      	ldr	r2, [r1, #8]
 800804c:	690b      	ldr	r3, [r1, #16]
 800804e:	000c      	movs	r4, r1
 8008050:	9000      	str	r0, [sp, #0]
 8008052:	4293      	cmp	r3, r2
 8008054:	da00      	bge.n	8008058 <_printf_common+0x14>
 8008056:	0013      	movs	r3, r2
 8008058:	0022      	movs	r2, r4
 800805a:	602b      	str	r3, [r5, #0]
 800805c:	3243      	adds	r2, #67	; 0x43
 800805e:	7812      	ldrb	r2, [r2, #0]
 8008060:	2a00      	cmp	r2, #0
 8008062:	d001      	beq.n	8008068 <_printf_common+0x24>
 8008064:	3301      	adds	r3, #1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	069b      	lsls	r3, r3, #26
 800806c:	d502      	bpl.n	8008074 <_printf_common+0x30>
 800806e:	682b      	ldr	r3, [r5, #0]
 8008070:	3302      	adds	r3, #2
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	6822      	ldr	r2, [r4, #0]
 8008076:	2306      	movs	r3, #6
 8008078:	0017      	movs	r7, r2
 800807a:	401f      	ands	r7, r3
 800807c:	421a      	tst	r2, r3
 800807e:	d027      	beq.n	80080d0 <_printf_common+0x8c>
 8008080:	0023      	movs	r3, r4
 8008082:	3343      	adds	r3, #67	; 0x43
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	1e5a      	subs	r2, r3, #1
 8008088:	4193      	sbcs	r3, r2
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d430      	bmi.n	80080f2 <_printf_common+0xae>
 8008090:	0022      	movs	r2, r4
 8008092:	9901      	ldr	r1, [sp, #4]
 8008094:	9800      	ldr	r0, [sp, #0]
 8008096:	9e08      	ldr	r6, [sp, #32]
 8008098:	3243      	adds	r2, #67	; 0x43
 800809a:	47b0      	blx	r6
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d025      	beq.n	80080ec <_printf_common+0xa8>
 80080a0:	2306      	movs	r3, #6
 80080a2:	6820      	ldr	r0, [r4, #0]
 80080a4:	682a      	ldr	r2, [r5, #0]
 80080a6:	68e1      	ldr	r1, [r4, #12]
 80080a8:	2500      	movs	r5, #0
 80080aa:	4003      	ands	r3, r0
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d103      	bne.n	80080b8 <_printf_common+0x74>
 80080b0:	1a8d      	subs	r5, r1, r2
 80080b2:	43eb      	mvns	r3, r5
 80080b4:	17db      	asrs	r3, r3, #31
 80080b6:	401d      	ands	r5, r3
 80080b8:	68a3      	ldr	r3, [r4, #8]
 80080ba:	6922      	ldr	r2, [r4, #16]
 80080bc:	4293      	cmp	r3, r2
 80080be:	dd01      	ble.n	80080c4 <_printf_common+0x80>
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	18ed      	adds	r5, r5, r3
 80080c4:	2700      	movs	r7, #0
 80080c6:	42bd      	cmp	r5, r7
 80080c8:	d120      	bne.n	800810c <_printf_common+0xc8>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e010      	b.n	80080f0 <_printf_common+0xac>
 80080ce:	3701      	adds	r7, #1
 80080d0:	68e3      	ldr	r3, [r4, #12]
 80080d2:	682a      	ldr	r2, [r5, #0]
 80080d4:	1a9b      	subs	r3, r3, r2
 80080d6:	42bb      	cmp	r3, r7
 80080d8:	ddd2      	ble.n	8008080 <_printf_common+0x3c>
 80080da:	0022      	movs	r2, r4
 80080dc:	2301      	movs	r3, #1
 80080de:	9901      	ldr	r1, [sp, #4]
 80080e0:	9800      	ldr	r0, [sp, #0]
 80080e2:	9e08      	ldr	r6, [sp, #32]
 80080e4:	3219      	adds	r2, #25
 80080e6:	47b0      	blx	r6
 80080e8:	1c43      	adds	r3, r0, #1
 80080ea:	d1f0      	bne.n	80080ce <_printf_common+0x8a>
 80080ec:	2001      	movs	r0, #1
 80080ee:	4240      	negs	r0, r0
 80080f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80080f2:	2030      	movs	r0, #48	; 0x30
 80080f4:	18e1      	adds	r1, r4, r3
 80080f6:	3143      	adds	r1, #67	; 0x43
 80080f8:	7008      	strb	r0, [r1, #0]
 80080fa:	0021      	movs	r1, r4
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	3145      	adds	r1, #69	; 0x45
 8008100:	7809      	ldrb	r1, [r1, #0]
 8008102:	18a2      	adds	r2, r4, r2
 8008104:	3243      	adds	r2, #67	; 0x43
 8008106:	3302      	adds	r3, #2
 8008108:	7011      	strb	r1, [r2, #0]
 800810a:	e7c1      	b.n	8008090 <_printf_common+0x4c>
 800810c:	0022      	movs	r2, r4
 800810e:	2301      	movs	r3, #1
 8008110:	9901      	ldr	r1, [sp, #4]
 8008112:	9800      	ldr	r0, [sp, #0]
 8008114:	9e08      	ldr	r6, [sp, #32]
 8008116:	321a      	adds	r2, #26
 8008118:	47b0      	blx	r6
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d0e6      	beq.n	80080ec <_printf_common+0xa8>
 800811e:	3701      	adds	r7, #1
 8008120:	e7d1      	b.n	80080c6 <_printf_common+0x82>
	...

08008124 <_printf_i>:
 8008124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008126:	b08b      	sub	sp, #44	; 0x2c
 8008128:	9206      	str	r2, [sp, #24]
 800812a:	000a      	movs	r2, r1
 800812c:	3243      	adds	r2, #67	; 0x43
 800812e:	9307      	str	r3, [sp, #28]
 8008130:	9005      	str	r0, [sp, #20]
 8008132:	9204      	str	r2, [sp, #16]
 8008134:	7e0a      	ldrb	r2, [r1, #24]
 8008136:	000c      	movs	r4, r1
 8008138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800813a:	2a78      	cmp	r2, #120	; 0x78
 800813c:	d806      	bhi.n	800814c <_printf_i+0x28>
 800813e:	2a62      	cmp	r2, #98	; 0x62
 8008140:	d808      	bhi.n	8008154 <_printf_i+0x30>
 8008142:	2a00      	cmp	r2, #0
 8008144:	d100      	bne.n	8008148 <_printf_i+0x24>
 8008146:	e0c0      	b.n	80082ca <_printf_i+0x1a6>
 8008148:	2a58      	cmp	r2, #88	; 0x58
 800814a:	d052      	beq.n	80081f2 <_printf_i+0xce>
 800814c:	0026      	movs	r6, r4
 800814e:	3642      	adds	r6, #66	; 0x42
 8008150:	7032      	strb	r2, [r6, #0]
 8008152:	e022      	b.n	800819a <_printf_i+0x76>
 8008154:	0010      	movs	r0, r2
 8008156:	3863      	subs	r0, #99	; 0x63
 8008158:	2815      	cmp	r0, #21
 800815a:	d8f7      	bhi.n	800814c <_printf_i+0x28>
 800815c:	f7f7 ffde 	bl	800011c <__gnu_thumb1_case_shi>
 8008160:	001f0016 	.word	0x001f0016
 8008164:	fff6fff6 	.word	0xfff6fff6
 8008168:	fff6fff6 	.word	0xfff6fff6
 800816c:	fff6001f 	.word	0xfff6001f
 8008170:	fff6fff6 	.word	0xfff6fff6
 8008174:	00a8fff6 	.word	0x00a8fff6
 8008178:	009a0036 	.word	0x009a0036
 800817c:	fff6fff6 	.word	0xfff6fff6
 8008180:	fff600b9 	.word	0xfff600b9
 8008184:	fff60036 	.word	0xfff60036
 8008188:	009efff6 	.word	0x009efff6
 800818c:	0026      	movs	r6, r4
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	3642      	adds	r6, #66	; 0x42
 8008192:	1d11      	adds	r1, r2, #4
 8008194:	6019      	str	r1, [r3, #0]
 8008196:	6813      	ldr	r3, [r2, #0]
 8008198:	7033      	strb	r3, [r6, #0]
 800819a:	2301      	movs	r3, #1
 800819c:	e0a7      	b.n	80082ee <_printf_i+0x1ca>
 800819e:	6808      	ldr	r0, [r1, #0]
 80081a0:	6819      	ldr	r1, [r3, #0]
 80081a2:	1d0a      	adds	r2, r1, #4
 80081a4:	0605      	lsls	r5, r0, #24
 80081a6:	d50b      	bpl.n	80081c0 <_printf_i+0x9c>
 80081a8:	680d      	ldr	r5, [r1, #0]
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	da03      	bge.n	80081b8 <_printf_i+0x94>
 80081b0:	232d      	movs	r3, #45	; 0x2d
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	426d      	negs	r5, r5
 80081b6:	7013      	strb	r3, [r2, #0]
 80081b8:	4b61      	ldr	r3, [pc, #388]	; (8008340 <_printf_i+0x21c>)
 80081ba:	270a      	movs	r7, #10
 80081bc:	9303      	str	r3, [sp, #12]
 80081be:	e032      	b.n	8008226 <_printf_i+0x102>
 80081c0:	680d      	ldr	r5, [r1, #0]
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	0641      	lsls	r1, r0, #25
 80081c6:	d5f1      	bpl.n	80081ac <_printf_i+0x88>
 80081c8:	b22d      	sxth	r5, r5
 80081ca:	e7ef      	b.n	80081ac <_printf_i+0x88>
 80081cc:	680d      	ldr	r5, [r1, #0]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	1d08      	adds	r0, r1, #4
 80081d2:	6018      	str	r0, [r3, #0]
 80081d4:	062e      	lsls	r6, r5, #24
 80081d6:	d501      	bpl.n	80081dc <_printf_i+0xb8>
 80081d8:	680d      	ldr	r5, [r1, #0]
 80081da:	e003      	b.n	80081e4 <_printf_i+0xc0>
 80081dc:	066d      	lsls	r5, r5, #25
 80081de:	d5fb      	bpl.n	80081d8 <_printf_i+0xb4>
 80081e0:	680d      	ldr	r5, [r1, #0]
 80081e2:	b2ad      	uxth	r5, r5
 80081e4:	4b56      	ldr	r3, [pc, #344]	; (8008340 <_printf_i+0x21c>)
 80081e6:	270a      	movs	r7, #10
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	2a6f      	cmp	r2, #111	; 0x6f
 80081ec:	d117      	bne.n	800821e <_printf_i+0xfa>
 80081ee:	2708      	movs	r7, #8
 80081f0:	e015      	b.n	800821e <_printf_i+0xfa>
 80081f2:	3145      	adds	r1, #69	; 0x45
 80081f4:	700a      	strb	r2, [r1, #0]
 80081f6:	4a52      	ldr	r2, [pc, #328]	; (8008340 <_printf_i+0x21c>)
 80081f8:	9203      	str	r2, [sp, #12]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	6821      	ldr	r1, [r4, #0]
 80081fe:	ca20      	ldmia	r2!, {r5}
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	0608      	lsls	r0, r1, #24
 8008204:	d550      	bpl.n	80082a8 <_printf_i+0x184>
 8008206:	07cb      	lsls	r3, r1, #31
 8008208:	d502      	bpl.n	8008210 <_printf_i+0xec>
 800820a:	2320      	movs	r3, #32
 800820c:	4319      	orrs	r1, r3
 800820e:	6021      	str	r1, [r4, #0]
 8008210:	2710      	movs	r7, #16
 8008212:	2d00      	cmp	r5, #0
 8008214:	d103      	bne.n	800821e <_printf_i+0xfa>
 8008216:	2320      	movs	r3, #32
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	439a      	bics	r2, r3
 800821c:	6022      	str	r2, [r4, #0]
 800821e:	0023      	movs	r3, r4
 8008220:	2200      	movs	r2, #0
 8008222:	3343      	adds	r3, #67	; 0x43
 8008224:	701a      	strb	r2, [r3, #0]
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	60a3      	str	r3, [r4, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	db03      	blt.n	8008236 <_printf_i+0x112>
 800822e:	2204      	movs	r2, #4
 8008230:	6821      	ldr	r1, [r4, #0]
 8008232:	4391      	bics	r1, r2
 8008234:	6021      	str	r1, [r4, #0]
 8008236:	2d00      	cmp	r5, #0
 8008238:	d102      	bne.n	8008240 <_printf_i+0x11c>
 800823a:	9e04      	ldr	r6, [sp, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00c      	beq.n	800825a <_printf_i+0x136>
 8008240:	9e04      	ldr	r6, [sp, #16]
 8008242:	0028      	movs	r0, r5
 8008244:	0039      	movs	r1, r7
 8008246:	f7f7 fff9 	bl	800023c <__aeabi_uidivmod>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	3e01      	subs	r6, #1
 800824e:	5c5b      	ldrb	r3, [r3, r1]
 8008250:	7033      	strb	r3, [r6, #0]
 8008252:	002b      	movs	r3, r5
 8008254:	0005      	movs	r5, r0
 8008256:	429f      	cmp	r7, r3
 8008258:	d9f3      	bls.n	8008242 <_printf_i+0x11e>
 800825a:	2f08      	cmp	r7, #8
 800825c:	d109      	bne.n	8008272 <_printf_i+0x14e>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	07db      	lsls	r3, r3, #31
 8008262:	d506      	bpl.n	8008272 <_printf_i+0x14e>
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	6922      	ldr	r2, [r4, #16]
 8008268:	4293      	cmp	r3, r2
 800826a:	dc02      	bgt.n	8008272 <_printf_i+0x14e>
 800826c:	2330      	movs	r3, #48	; 0x30
 800826e:	3e01      	subs	r6, #1
 8008270:	7033      	strb	r3, [r6, #0]
 8008272:	9b04      	ldr	r3, [sp, #16]
 8008274:	1b9b      	subs	r3, r3, r6
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	9b07      	ldr	r3, [sp, #28]
 800827a:	0021      	movs	r1, r4
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	9805      	ldr	r0, [sp, #20]
 8008280:	9b06      	ldr	r3, [sp, #24]
 8008282:	aa09      	add	r2, sp, #36	; 0x24
 8008284:	f7ff fede 	bl	8008044 <_printf_common>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d135      	bne.n	80082f8 <_printf_i+0x1d4>
 800828c:	2001      	movs	r0, #1
 800828e:	4240      	negs	r0, r0
 8008290:	b00b      	add	sp, #44	; 0x2c
 8008292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008294:	2220      	movs	r2, #32
 8008296:	6809      	ldr	r1, [r1, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	6022      	str	r2, [r4, #0]
 800829c:	0022      	movs	r2, r4
 800829e:	2178      	movs	r1, #120	; 0x78
 80082a0:	3245      	adds	r2, #69	; 0x45
 80082a2:	7011      	strb	r1, [r2, #0]
 80082a4:	4a27      	ldr	r2, [pc, #156]	; (8008344 <_printf_i+0x220>)
 80082a6:	e7a7      	b.n	80081f8 <_printf_i+0xd4>
 80082a8:	0648      	lsls	r0, r1, #25
 80082aa:	d5ac      	bpl.n	8008206 <_printf_i+0xe2>
 80082ac:	b2ad      	uxth	r5, r5
 80082ae:	e7aa      	b.n	8008206 <_printf_i+0xe2>
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	680d      	ldr	r5, [r1, #0]
 80082b4:	1d10      	adds	r0, r2, #4
 80082b6:	6949      	ldr	r1, [r1, #20]
 80082b8:	6018      	str	r0, [r3, #0]
 80082ba:	6813      	ldr	r3, [r2, #0]
 80082bc:	062e      	lsls	r6, r5, #24
 80082be:	d501      	bpl.n	80082c4 <_printf_i+0x1a0>
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	e002      	b.n	80082ca <_printf_i+0x1a6>
 80082c4:	066d      	lsls	r5, r5, #25
 80082c6:	d5fb      	bpl.n	80082c0 <_printf_i+0x19c>
 80082c8:	8019      	strh	r1, [r3, #0]
 80082ca:	2300      	movs	r3, #0
 80082cc:	9e04      	ldr	r6, [sp, #16]
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	e7d2      	b.n	8008278 <_printf_i+0x154>
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	1d11      	adds	r1, r2, #4
 80082d6:	6019      	str	r1, [r3, #0]
 80082d8:	6816      	ldr	r6, [r2, #0]
 80082da:	2100      	movs	r1, #0
 80082dc:	0030      	movs	r0, r6
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	f000 ff2e 	bl	8009140 <memchr>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d001      	beq.n	80082ec <_printf_i+0x1c8>
 80082e8:	1b80      	subs	r0, r0, r6
 80082ea:	6060      	str	r0, [r4, #4]
 80082ec:	6863      	ldr	r3, [r4, #4]
 80082ee:	6123      	str	r3, [r4, #16]
 80082f0:	2300      	movs	r3, #0
 80082f2:	9a04      	ldr	r2, [sp, #16]
 80082f4:	7013      	strb	r3, [r2, #0]
 80082f6:	e7bf      	b.n	8008278 <_printf_i+0x154>
 80082f8:	6923      	ldr	r3, [r4, #16]
 80082fa:	0032      	movs	r2, r6
 80082fc:	9906      	ldr	r1, [sp, #24]
 80082fe:	9805      	ldr	r0, [sp, #20]
 8008300:	9d07      	ldr	r5, [sp, #28]
 8008302:	47a8      	blx	r5
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d0c1      	beq.n	800828c <_printf_i+0x168>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	079b      	lsls	r3, r3, #30
 800830c:	d415      	bmi.n	800833a <_printf_i+0x216>
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	68e0      	ldr	r0, [r4, #12]
 8008312:	4298      	cmp	r0, r3
 8008314:	dabc      	bge.n	8008290 <_printf_i+0x16c>
 8008316:	0018      	movs	r0, r3
 8008318:	e7ba      	b.n	8008290 <_printf_i+0x16c>
 800831a:	0022      	movs	r2, r4
 800831c:	2301      	movs	r3, #1
 800831e:	9906      	ldr	r1, [sp, #24]
 8008320:	9805      	ldr	r0, [sp, #20]
 8008322:	9e07      	ldr	r6, [sp, #28]
 8008324:	3219      	adds	r2, #25
 8008326:	47b0      	blx	r6
 8008328:	1c43      	adds	r3, r0, #1
 800832a:	d0af      	beq.n	800828c <_printf_i+0x168>
 800832c:	3501      	adds	r5, #1
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008332:	1a9b      	subs	r3, r3, r2
 8008334:	42ab      	cmp	r3, r5
 8008336:	dcf0      	bgt.n	800831a <_printf_i+0x1f6>
 8008338:	e7e9      	b.n	800830e <_printf_i+0x1ea>
 800833a:	2500      	movs	r5, #0
 800833c:	e7f7      	b.n	800832e <_printf_i+0x20a>
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	0800a04d 	.word	0x0800a04d
 8008344:	0800a05e 	.word	0x0800a05e

08008348 <_sbrk_r>:
 8008348:	2300      	movs	r3, #0
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	4d06      	ldr	r5, [pc, #24]	; (8008368 <_sbrk_r+0x20>)
 800834e:	0004      	movs	r4, r0
 8008350:	0008      	movs	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7fc f89c 	bl	8004490 <_sbrk>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d103      	bne.n	8008364 <_sbrk_r+0x1c>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d000      	beq.n	8008364 <_sbrk_r+0x1c>
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	46c0      	nop			; (mov r8, r8)
 8008368:	20000284 	.word	0x20000284

0800836c <strcpy>:
 800836c:	0003      	movs	r3, r0
 800836e:	780a      	ldrb	r2, [r1, #0]
 8008370:	3101      	adds	r1, #1
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	2a00      	cmp	r2, #0
 8008378:	d1f9      	bne.n	800836e <strcpy+0x2>
 800837a:	4770      	bx	lr

0800837c <__assert_func>:
 800837c:	b530      	push	{r4, r5, lr}
 800837e:	0014      	movs	r4, r2
 8008380:	001a      	movs	r2, r3
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <__assert_func+0x2c>)
 8008384:	0005      	movs	r5, r0
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	b085      	sub	sp, #20
 800838a:	68d8      	ldr	r0, [r3, #12]
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <__assert_func+0x30>)
 800838e:	2c00      	cmp	r4, #0
 8008390:	d101      	bne.n	8008396 <__assert_func+0x1a>
 8008392:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <__assert_func+0x34>)
 8008394:	001c      	movs	r4, r3
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	9100      	str	r1, [sp, #0]
 800839a:	002b      	movs	r3, r5
 800839c:	4905      	ldr	r1, [pc, #20]	; (80083b4 <__assert_func+0x38>)
 800839e:	9402      	str	r4, [sp, #8]
 80083a0:	f000 feb4 	bl	800910c <fiprintf>
 80083a4:	f001 f986 	bl	80096b4 <abort>
 80083a8:	20000010 	.word	0x20000010
 80083ac:	0800a06f 	.word	0x0800a06f
 80083b0:	0800a0aa 	.word	0x0800a0aa
 80083b4:	0800a07c 	.word	0x0800a07c

080083b8 <quorem>:
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	0006      	movs	r6, r0
 80083bc:	690d      	ldr	r5, [r1, #16]
 80083be:	6933      	ldr	r3, [r6, #16]
 80083c0:	b087      	sub	sp, #28
 80083c2:	2000      	movs	r0, #0
 80083c4:	9102      	str	r1, [sp, #8]
 80083c6:	42ab      	cmp	r3, r5
 80083c8:	db6b      	blt.n	80084a2 <quorem+0xea>
 80083ca:	000b      	movs	r3, r1
 80083cc:	3d01      	subs	r5, #1
 80083ce:	00ac      	lsls	r4, r5, #2
 80083d0:	3314      	adds	r3, #20
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	191b      	adds	r3, r3, r4
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	0033      	movs	r3, r6
 80083da:	3314      	adds	r3, #20
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	191c      	adds	r4, r3, r4
 80083e0:	9b03      	ldr	r3, [sp, #12]
 80083e2:	6827      	ldr	r7, [r4, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	0038      	movs	r0, r7
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	3301      	adds	r3, #1
 80083ec:	0019      	movs	r1, r3
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	f7f7 fe9e 	bl	8000130 <__udivsi3>
 80083f4:	9b04      	ldr	r3, [sp, #16]
 80083f6:	9000      	str	r0, [sp, #0]
 80083f8:	429f      	cmp	r7, r3
 80083fa:	d329      	bcc.n	8008450 <quorem+0x98>
 80083fc:	2300      	movs	r3, #0
 80083fe:	469c      	mov	ip, r3
 8008400:	9801      	ldr	r0, [sp, #4]
 8008402:	9f05      	ldr	r7, [sp, #20]
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	cf08      	ldmia	r7!, {r3}
 8008408:	9a00      	ldr	r2, [sp, #0]
 800840a:	b299      	uxth	r1, r3
 800840c:	4351      	muls	r1, r2
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	4353      	muls	r3, r2
 8008412:	4461      	add	r1, ip
 8008414:	0c0a      	lsrs	r2, r1, #16
 8008416:	189b      	adds	r3, r3, r2
 8008418:	0c1a      	lsrs	r2, r3, #16
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	6803      	ldr	r3, [r0, #0]
 800841e:	4694      	mov	ip, r2
 8008420:	b29a      	uxth	r2, r3
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	b289      	uxth	r1, r1
 8008426:	18d2      	adds	r2, r2, r3
 8008428:	6803      	ldr	r3, [r0, #0]
 800842a:	1a52      	subs	r2, r2, r1
 800842c:	0c19      	lsrs	r1, r3, #16
 800842e:	466b      	mov	r3, sp
 8008430:	8a9b      	ldrh	r3, [r3, #20]
 8008432:	1acb      	subs	r3, r1, r3
 8008434:	1411      	asrs	r1, r2, #16
 8008436:	185b      	adds	r3, r3, r1
 8008438:	1419      	asrs	r1, r3, #16
 800843a:	b292      	uxth	r2, r2
 800843c:	041b      	lsls	r3, r3, #16
 800843e:	431a      	orrs	r2, r3
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	9104      	str	r1, [sp, #16]
 8008444:	c004      	stmia	r0!, {r2}
 8008446:	42bb      	cmp	r3, r7
 8008448:	d2dd      	bcs.n	8008406 <quorem+0x4e>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d02e      	beq.n	80084ae <quorem+0xf6>
 8008450:	0030      	movs	r0, r6
 8008452:	9902      	ldr	r1, [sp, #8]
 8008454:	f7ff fad0 	bl	80079f8 <__mcmp>
 8008458:	2800      	cmp	r0, #0
 800845a:	db21      	blt.n	80084a0 <quorem+0xe8>
 800845c:	0030      	movs	r0, r6
 800845e:	2400      	movs	r4, #0
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	9902      	ldr	r1, [sp, #8]
 8008464:	3301      	adds	r3, #1
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	3014      	adds	r0, #20
 800846a:	3114      	adds	r1, #20
 800846c:	6802      	ldr	r2, [r0, #0]
 800846e:	c908      	ldmia	r1!, {r3}
 8008470:	b292      	uxth	r2, r2
 8008472:	1914      	adds	r4, r2, r4
 8008474:	b29a      	uxth	r2, r3
 8008476:	1aa2      	subs	r2, r4, r2
 8008478:	6804      	ldr	r4, [r0, #0]
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	0c24      	lsrs	r4, r4, #16
 800847e:	1ae3      	subs	r3, r4, r3
 8008480:	1414      	asrs	r4, r2, #16
 8008482:	191b      	adds	r3, r3, r4
 8008484:	141c      	asrs	r4, r3, #16
 8008486:	b292      	uxth	r2, r2
 8008488:	041b      	lsls	r3, r3, #16
 800848a:	4313      	orrs	r3, r2
 800848c:	c008      	stmia	r0!, {r3}
 800848e:	9b03      	ldr	r3, [sp, #12]
 8008490:	428b      	cmp	r3, r1
 8008492:	d2eb      	bcs.n	800846c <quorem+0xb4>
 8008494:	9a01      	ldr	r2, [sp, #4]
 8008496:	00ab      	lsls	r3, r5, #2
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	2a00      	cmp	r2, #0
 800849e:	d010      	beq.n	80084c2 <quorem+0x10a>
 80084a0:	9800      	ldr	r0, [sp, #0]
 80084a2:	b007      	add	sp, #28
 80084a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <quorem+0xfe>
 80084ac:	3d01      	subs	r5, #1
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	3c04      	subs	r4, #4
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	d3f7      	bcc.n	80084a6 <quorem+0xee>
 80084b6:	6135      	str	r5, [r6, #16]
 80084b8:	e7ca      	b.n	8008450 <quorem+0x98>
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	2a00      	cmp	r2, #0
 80084be:	d104      	bne.n	80084ca <quorem+0x112>
 80084c0:	3d01      	subs	r5, #1
 80084c2:	9a01      	ldr	r2, [sp, #4]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d3f7      	bcc.n	80084ba <quorem+0x102>
 80084ca:	6135      	str	r5, [r6, #16]
 80084cc:	e7e8      	b.n	80084a0 <quorem+0xe8>
	...

080084d0 <_dtoa_r>:
 80084d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084d2:	b09d      	sub	sp, #116	; 0x74
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	9303      	str	r3, [sp, #12]
 80084d8:	9b02      	ldr	r3, [sp, #8]
 80084da:	9c03      	ldr	r4, [sp, #12]
 80084dc:	930a      	str	r3, [sp, #40]	; 0x28
 80084de:	940b      	str	r4, [sp, #44]	; 0x2c
 80084e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80084e2:	0007      	movs	r7, r0
 80084e4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80084e6:	2c00      	cmp	r4, #0
 80084e8:	d10e      	bne.n	8008508 <_dtoa_r+0x38>
 80084ea:	2010      	movs	r0, #16
 80084ec:	f000 fe1e 	bl	800912c <malloc>
 80084f0:	1e02      	subs	r2, r0, #0
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24
 80084f4:	d104      	bne.n	8008500 <_dtoa_r+0x30>
 80084f6:	21ea      	movs	r1, #234	; 0xea
 80084f8:	4bc0      	ldr	r3, [pc, #768]	; (80087fc <_dtoa_r+0x32c>)
 80084fa:	48c1      	ldr	r0, [pc, #772]	; (8008800 <_dtoa_r+0x330>)
 80084fc:	f7ff ff3e 	bl	800837c <__assert_func>
 8008500:	6044      	str	r4, [r0, #4]
 8008502:	6084      	str	r4, [r0, #8]
 8008504:	6004      	str	r4, [r0, #0]
 8008506:	60c4      	str	r4, [r0, #12]
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	6819      	ldr	r1, [r3, #0]
 800850c:	2900      	cmp	r1, #0
 800850e:	d00a      	beq.n	8008526 <_dtoa_r+0x56>
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	2301      	movs	r3, #1
 8008514:	4093      	lsls	r3, r2
 8008516:	604a      	str	r2, [r1, #4]
 8008518:	608b      	str	r3, [r1, #8]
 800851a:	0038      	movs	r0, r7
 800851c:	f7ff f82a 	bl	8007574 <_Bfree>
 8008520:	2200      	movs	r2, #0
 8008522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	da21      	bge.n	8008570 <_dtoa_r+0xa0>
 800852c:	2301      	movs	r3, #1
 800852e:	602b      	str	r3, [r5, #0]
 8008530:	9b03      	ldr	r3, [sp, #12]
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	085b      	lsrs	r3, r3, #1
 8008536:	930b      	str	r3, [sp, #44]	; 0x2c
 8008538:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800853a:	4bb2      	ldr	r3, [pc, #712]	; (8008804 <_dtoa_r+0x334>)
 800853c:	002a      	movs	r2, r5
 800853e:	9318      	str	r3, [sp, #96]	; 0x60
 8008540:	401a      	ands	r2, r3
 8008542:	429a      	cmp	r2, r3
 8008544:	d117      	bne.n	8008576 <_dtoa_r+0xa6>
 8008546:	4bb0      	ldr	r3, [pc, #704]	; (8008808 <_dtoa_r+0x338>)
 8008548:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800854a:	0328      	lsls	r0, r5, #12
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	0b00      	lsrs	r0, r0, #12
 8008552:	4318      	orrs	r0, r3
 8008554:	d101      	bne.n	800855a <_dtoa_r+0x8a>
 8008556:	f000 fdc3 	bl	80090e0 <_dtoa_r+0xc10>
 800855a:	48ac      	ldr	r0, [pc, #688]	; (800880c <_dtoa_r+0x33c>)
 800855c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800855e:	9005      	str	r0, [sp, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <_dtoa_r+0x9a>
 8008564:	4baa      	ldr	r3, [pc, #680]	; (8008810 <_dtoa_r+0x340>)
 8008566:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	b01d      	add	sp, #116	; 0x74
 800856e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008570:	2300      	movs	r3, #0
 8008572:	602b      	str	r3, [r5, #0]
 8008574:	e7e0      	b.n	8008538 <_dtoa_r+0x68>
 8008576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008578:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800857a:	9312      	str	r3, [sp, #72]	; 0x48
 800857c:	9413      	str	r4, [sp, #76]	; 0x4c
 800857e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008580:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	f7f7 ff59 	bl	800043c <__aeabi_dcmpeq>
 800858a:	1e04      	subs	r4, r0, #0
 800858c:	d00b      	beq.n	80085a6 <_dtoa_r+0xd6>
 800858e:	2301      	movs	r3, #1
 8008590:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	4b9f      	ldr	r3, [pc, #636]	; (8008814 <_dtoa_r+0x344>)
 8008596:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	2a00      	cmp	r2, #0
 800859c:	d0e5      	beq.n	800856a <_dtoa_r+0x9a>
 800859e:	4a9e      	ldr	r2, [pc, #632]	; (8008818 <_dtoa_r+0x348>)
 80085a0:	9926      	ldr	r1, [sp, #152]	; 0x98
 80085a2:	600a      	str	r2, [r1, #0]
 80085a4:	e7e1      	b.n	800856a <_dtoa_r+0x9a>
 80085a6:	ab1a      	add	r3, sp, #104	; 0x68
 80085a8:	9301      	str	r3, [sp, #4]
 80085aa:	ab1b      	add	r3, sp, #108	; 0x6c
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	0038      	movs	r0, r7
 80085b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085b4:	f7ff fad4 	bl	8007b60 <__d2b>
 80085b8:	006e      	lsls	r6, r5, #1
 80085ba:	9004      	str	r0, [sp, #16]
 80085bc:	0d76      	lsrs	r6, r6, #21
 80085be:	d100      	bne.n	80085c2 <_dtoa_r+0xf2>
 80085c0:	e07c      	b.n	80086bc <_dtoa_r+0x1ec>
 80085c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085c8:	4a94      	ldr	r2, [pc, #592]	; (800881c <_dtoa_r+0x34c>)
 80085ca:	031b      	lsls	r3, r3, #12
 80085cc:	0b1b      	lsrs	r3, r3, #12
 80085ce:	431a      	orrs	r2, r3
 80085d0:	0011      	movs	r1, r2
 80085d2:	4b93      	ldr	r3, [pc, #588]	; (8008820 <_dtoa_r+0x350>)
 80085d4:	9416      	str	r4, [sp, #88]	; 0x58
 80085d6:	18f6      	adds	r6, r6, r3
 80085d8:	2200      	movs	r2, #0
 80085da:	4b92      	ldr	r3, [pc, #584]	; (8008824 <_dtoa_r+0x354>)
 80085dc:	f7f9 fe28 	bl	8002230 <__aeabi_dsub>
 80085e0:	4a91      	ldr	r2, [pc, #580]	; (8008828 <_dtoa_r+0x358>)
 80085e2:	4b92      	ldr	r3, [pc, #584]	; (800882c <_dtoa_r+0x35c>)
 80085e4:	f7f9 fbb8 	bl	8001d58 <__aeabi_dmul>
 80085e8:	4a91      	ldr	r2, [pc, #580]	; (8008830 <_dtoa_r+0x360>)
 80085ea:	4b92      	ldr	r3, [pc, #584]	; (8008834 <_dtoa_r+0x364>)
 80085ec:	f7f8 fc44 	bl	8000e78 <__aeabi_dadd>
 80085f0:	0004      	movs	r4, r0
 80085f2:	0030      	movs	r0, r6
 80085f4:	000d      	movs	r5, r1
 80085f6:	f7fa f9e3 	bl	80029c0 <__aeabi_i2d>
 80085fa:	4a8f      	ldr	r2, [pc, #572]	; (8008838 <_dtoa_r+0x368>)
 80085fc:	4b8f      	ldr	r3, [pc, #572]	; (800883c <_dtoa_r+0x36c>)
 80085fe:	f7f9 fbab 	bl	8001d58 <__aeabi_dmul>
 8008602:	0002      	movs	r2, r0
 8008604:	000b      	movs	r3, r1
 8008606:	0020      	movs	r0, r4
 8008608:	0029      	movs	r1, r5
 800860a:	f7f8 fc35 	bl	8000e78 <__aeabi_dadd>
 800860e:	0004      	movs	r4, r0
 8008610:	000d      	movs	r5, r1
 8008612:	f7fa f99f 	bl	8002954 <__aeabi_d2iz>
 8008616:	2200      	movs	r2, #0
 8008618:	9002      	str	r0, [sp, #8]
 800861a:	2300      	movs	r3, #0
 800861c:	0020      	movs	r0, r4
 800861e:	0029      	movs	r1, r5
 8008620:	f7f7 ff12 	bl	8000448 <__aeabi_dcmplt>
 8008624:	2800      	cmp	r0, #0
 8008626:	d00b      	beq.n	8008640 <_dtoa_r+0x170>
 8008628:	9802      	ldr	r0, [sp, #8]
 800862a:	f7fa f9c9 	bl	80029c0 <__aeabi_i2d>
 800862e:	002b      	movs	r3, r5
 8008630:	0022      	movs	r2, r4
 8008632:	f7f7 ff03 	bl	800043c <__aeabi_dcmpeq>
 8008636:	4243      	negs	r3, r0
 8008638:	4158      	adcs	r0, r3
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	1a1b      	subs	r3, r3, r0
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	2301      	movs	r3, #1
 8008642:	9315      	str	r3, [sp, #84]	; 0x54
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	2b16      	cmp	r3, #22
 8008648:	d80f      	bhi.n	800866a <_dtoa_r+0x19a>
 800864a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800864c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800864e:	00da      	lsls	r2, r3, #3
 8008650:	4b7b      	ldr	r3, [pc, #492]	; (8008840 <_dtoa_r+0x370>)
 8008652:	189b      	adds	r3, r3, r2
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	f7f7 fef6 	bl	8000448 <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	d049      	beq.n	80086f4 <_dtoa_r+0x224>
 8008660:	9b02      	ldr	r3, [sp, #8]
 8008662:	3b01      	subs	r3, #1
 8008664:	9302      	str	r3, [sp, #8]
 8008666:	2300      	movs	r3, #0
 8008668:	9315      	str	r3, [sp, #84]	; 0x54
 800866a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800866c:	1b9e      	subs	r6, r3, r6
 800866e:	2300      	movs	r3, #0
 8008670:	9308      	str	r3, [sp, #32]
 8008672:	0033      	movs	r3, r6
 8008674:	3b01      	subs	r3, #1
 8008676:	930d      	str	r3, [sp, #52]	; 0x34
 8008678:	d504      	bpl.n	8008684 <_dtoa_r+0x1b4>
 800867a:	2301      	movs	r3, #1
 800867c:	1b9b      	subs	r3, r3, r6
 800867e:	9308      	str	r3, [sp, #32]
 8008680:	2300      	movs	r3, #0
 8008682:	930d      	str	r3, [sp, #52]	; 0x34
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	db36      	blt.n	80086f8 <_dtoa_r+0x228>
 800868a:	9a02      	ldr	r2, [sp, #8]
 800868c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800868e:	4694      	mov	ip, r2
 8008690:	4463      	add	r3, ip
 8008692:	930d      	str	r3, [sp, #52]	; 0x34
 8008694:	2300      	movs	r3, #0
 8008696:	9214      	str	r2, [sp, #80]	; 0x50
 8008698:	930e      	str	r3, [sp, #56]	; 0x38
 800869a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800869c:	2401      	movs	r4, #1
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d862      	bhi.n	8008768 <_dtoa_r+0x298>
 80086a2:	2b05      	cmp	r3, #5
 80086a4:	dd02      	ble.n	80086ac <_dtoa_r+0x1dc>
 80086a6:	2400      	movs	r4, #0
 80086a8:	3b04      	subs	r3, #4
 80086aa:	9322      	str	r3, [sp, #136]	; 0x88
 80086ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ae:	1e98      	subs	r0, r3, #2
 80086b0:	2803      	cmp	r0, #3
 80086b2:	d862      	bhi.n	800877a <_dtoa_r+0x2aa>
 80086b4:	f7f7 fd28 	bl	8000108 <__gnu_thumb1_case_uqi>
 80086b8:	56343629 	.word	0x56343629
 80086bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80086be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80086c0:	189e      	adds	r6, r3, r2
 80086c2:	4b60      	ldr	r3, [pc, #384]	; (8008844 <_dtoa_r+0x374>)
 80086c4:	18f2      	adds	r2, r6, r3
 80086c6:	2a20      	cmp	r2, #32
 80086c8:	dd0f      	ble.n	80086ea <_dtoa_r+0x21a>
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	409d      	lsls	r5, r3
 80086d0:	4b5d      	ldr	r3, [pc, #372]	; (8008848 <_dtoa_r+0x378>)
 80086d2:	9802      	ldr	r0, [sp, #8]
 80086d4:	18f3      	adds	r3, r6, r3
 80086d6:	40d8      	lsrs	r0, r3
 80086d8:	4328      	orrs	r0, r5
 80086da:	f7fa f9a1 	bl	8002a20 <__aeabi_ui2d>
 80086de:	2301      	movs	r3, #1
 80086e0:	4c5a      	ldr	r4, [pc, #360]	; (800884c <_dtoa_r+0x37c>)
 80086e2:	3e01      	subs	r6, #1
 80086e4:	1909      	adds	r1, r1, r4
 80086e6:	9316      	str	r3, [sp, #88]	; 0x58
 80086e8:	e776      	b.n	80085d8 <_dtoa_r+0x108>
 80086ea:	2320      	movs	r3, #32
 80086ec:	9802      	ldr	r0, [sp, #8]
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	4098      	lsls	r0, r3
 80086f2:	e7f2      	b.n	80086da <_dtoa_r+0x20a>
 80086f4:	9015      	str	r0, [sp, #84]	; 0x54
 80086f6:	e7b8      	b.n	800866a <_dtoa_r+0x19a>
 80086f8:	9b08      	ldr	r3, [sp, #32]
 80086fa:	9a02      	ldr	r2, [sp, #8]
 80086fc:	1a9b      	subs	r3, r3, r2
 80086fe:	9308      	str	r3, [sp, #32]
 8008700:	4253      	negs	r3, r2
 8008702:	930e      	str	r3, [sp, #56]	; 0x38
 8008704:	2300      	movs	r3, #0
 8008706:	9314      	str	r3, [sp, #80]	; 0x50
 8008708:	e7c7      	b.n	800869a <_dtoa_r+0x1ca>
 800870a:	2300      	movs	r3, #0
 800870c:	930f      	str	r3, [sp, #60]	; 0x3c
 800870e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008710:	2b00      	cmp	r3, #0
 8008712:	dc36      	bgt.n	8008782 <_dtoa_r+0x2b2>
 8008714:	2301      	movs	r3, #1
 8008716:	001a      	movs	r2, r3
 8008718:	930c      	str	r3, [sp, #48]	; 0x30
 800871a:	9306      	str	r3, [sp, #24]
 800871c:	9223      	str	r2, [sp, #140]	; 0x8c
 800871e:	e00d      	b.n	800873c <_dtoa_r+0x26c>
 8008720:	2301      	movs	r3, #1
 8008722:	e7f3      	b.n	800870c <_dtoa_r+0x23c>
 8008724:	2300      	movs	r3, #0
 8008726:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008728:	930f      	str	r3, [sp, #60]	; 0x3c
 800872a:	4694      	mov	ip, r2
 800872c:	9b02      	ldr	r3, [sp, #8]
 800872e:	4463      	add	r3, ip
 8008730:	930c      	str	r3, [sp, #48]	; 0x30
 8008732:	3301      	adds	r3, #1
 8008734:	9306      	str	r3, [sp, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	dc00      	bgt.n	800873c <_dtoa_r+0x26c>
 800873a:	2301      	movs	r3, #1
 800873c:	2200      	movs	r2, #0
 800873e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008740:	6042      	str	r2, [r0, #4]
 8008742:	3204      	adds	r2, #4
 8008744:	0015      	movs	r5, r2
 8008746:	3514      	adds	r5, #20
 8008748:	6841      	ldr	r1, [r0, #4]
 800874a:	429d      	cmp	r5, r3
 800874c:	d91d      	bls.n	800878a <_dtoa_r+0x2ba>
 800874e:	0038      	movs	r0, r7
 8008750:	f7fe fecc 	bl	80074ec <_Balloc>
 8008754:	9005      	str	r0, [sp, #20]
 8008756:	2800      	cmp	r0, #0
 8008758:	d11b      	bne.n	8008792 <_dtoa_r+0x2c2>
 800875a:	21d5      	movs	r1, #213	; 0xd5
 800875c:	0002      	movs	r2, r0
 800875e:	4b3c      	ldr	r3, [pc, #240]	; (8008850 <_dtoa_r+0x380>)
 8008760:	0049      	lsls	r1, r1, #1
 8008762:	e6ca      	b.n	80084fa <_dtoa_r+0x2a>
 8008764:	2301      	movs	r3, #1
 8008766:	e7de      	b.n	8008726 <_dtoa_r+0x256>
 8008768:	2300      	movs	r3, #0
 800876a:	940f      	str	r4, [sp, #60]	; 0x3c
 800876c:	9322      	str	r3, [sp, #136]	; 0x88
 800876e:	3b01      	subs	r3, #1
 8008770:	930c      	str	r3, [sp, #48]	; 0x30
 8008772:	9306      	str	r3, [sp, #24]
 8008774:	2200      	movs	r2, #0
 8008776:	3313      	adds	r3, #19
 8008778:	e7d0      	b.n	800871c <_dtoa_r+0x24c>
 800877a:	2301      	movs	r3, #1
 800877c:	930f      	str	r3, [sp, #60]	; 0x3c
 800877e:	3b02      	subs	r3, #2
 8008780:	e7f6      	b.n	8008770 <_dtoa_r+0x2a0>
 8008782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008784:	930c      	str	r3, [sp, #48]	; 0x30
 8008786:	9306      	str	r3, [sp, #24]
 8008788:	e7d8      	b.n	800873c <_dtoa_r+0x26c>
 800878a:	3101      	adds	r1, #1
 800878c:	6041      	str	r1, [r0, #4]
 800878e:	0052      	lsls	r2, r2, #1
 8008790:	e7d8      	b.n	8008744 <_dtoa_r+0x274>
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	9a05      	ldr	r2, [sp, #20]
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	9b06      	ldr	r3, [sp, #24]
 800879a:	2b0e      	cmp	r3, #14
 800879c:	d900      	bls.n	80087a0 <_dtoa_r+0x2d0>
 800879e:	e0eb      	b.n	8008978 <_dtoa_r+0x4a8>
 80087a0:	2c00      	cmp	r4, #0
 80087a2:	d100      	bne.n	80087a6 <_dtoa_r+0x2d6>
 80087a4:	e0e8      	b.n	8008978 <_dtoa_r+0x4a8>
 80087a6:	9b02      	ldr	r3, [sp, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dd68      	ble.n	800887e <_dtoa_r+0x3ae>
 80087ac:	001a      	movs	r2, r3
 80087ae:	210f      	movs	r1, #15
 80087b0:	4b23      	ldr	r3, [pc, #140]	; (8008840 <_dtoa_r+0x370>)
 80087b2:	400a      	ands	r2, r1
 80087b4:	00d2      	lsls	r2, r2, #3
 80087b6:	189b      	adds	r3, r3, r2
 80087b8:	681d      	ldr	r5, [r3, #0]
 80087ba:	685e      	ldr	r6, [r3, #4]
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	111c      	asrs	r4, r3, #4
 80087c0:	2302      	movs	r3, #2
 80087c2:	9310      	str	r3, [sp, #64]	; 0x40
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	05db      	lsls	r3, r3, #23
 80087c8:	d50b      	bpl.n	80087e2 <_dtoa_r+0x312>
 80087ca:	4b22      	ldr	r3, [pc, #136]	; (8008854 <_dtoa_r+0x384>)
 80087cc:	400c      	ands	r4, r1
 80087ce:	6a1a      	ldr	r2, [r3, #32]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80087d4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087d6:	f7f8 feb9 	bl	800154c <__aeabi_ddiv>
 80087da:	2303      	movs	r3, #3
 80087dc:	900a      	str	r0, [sp, #40]	; 0x28
 80087de:	910b      	str	r1, [sp, #44]	; 0x2c
 80087e0:	9310      	str	r3, [sp, #64]	; 0x40
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <_dtoa_r+0x384>)
 80087e4:	9307      	str	r3, [sp, #28]
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d136      	bne.n	8008858 <_dtoa_r+0x388>
 80087ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087ee:	002a      	movs	r2, r5
 80087f0:	0033      	movs	r3, r6
 80087f2:	f7f8 feab 	bl	800154c <__aeabi_ddiv>
 80087f6:	900a      	str	r0, [sp, #40]	; 0x28
 80087f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80087fa:	e05c      	b.n	80088b6 <_dtoa_r+0x3e6>
 80087fc:	08009eb4 	.word	0x08009eb4
 8008800:	0800a0ba 	.word	0x0800a0ba
 8008804:	7ff00000 	.word	0x7ff00000
 8008808:	0000270f 	.word	0x0000270f
 800880c:	0800a0b4 	.word	0x0800a0b4
 8008810:	0800a0b7 	.word	0x0800a0b7
 8008814:	0800a0b8 	.word	0x0800a0b8
 8008818:	0800a0b9 	.word	0x0800a0b9
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	fffffc01 	.word	0xfffffc01
 8008824:	3ff80000 	.word	0x3ff80000
 8008828:	636f4361 	.word	0x636f4361
 800882c:	3fd287a7 	.word	0x3fd287a7
 8008830:	8b60c8b3 	.word	0x8b60c8b3
 8008834:	3fc68a28 	.word	0x3fc68a28
 8008838:	509f79fb 	.word	0x509f79fb
 800883c:	3fd34413 	.word	0x3fd34413
 8008840:	08009f68 	.word	0x08009f68
 8008844:	00000432 	.word	0x00000432
 8008848:	00000412 	.word	0x00000412
 800884c:	fe100000 	.word	0xfe100000
 8008850:	08009f2b 	.word	0x08009f2b
 8008854:	08009f40 	.word	0x08009f40
 8008858:	2301      	movs	r3, #1
 800885a:	421c      	tst	r4, r3
 800885c:	d00b      	beq.n	8008876 <_dtoa_r+0x3a6>
 800885e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008860:	0028      	movs	r0, r5
 8008862:	3301      	adds	r3, #1
 8008864:	9310      	str	r3, [sp, #64]	; 0x40
 8008866:	9b07      	ldr	r3, [sp, #28]
 8008868:	0031      	movs	r1, r6
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	f7f9 fa73 	bl	8001d58 <__aeabi_dmul>
 8008872:	0005      	movs	r5, r0
 8008874:	000e      	movs	r6, r1
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	1064      	asrs	r4, r4, #1
 800887a:	3308      	adds	r3, #8
 800887c:	e7b2      	b.n	80087e4 <_dtoa_r+0x314>
 800887e:	2302      	movs	r3, #2
 8008880:	9310      	str	r3, [sp, #64]	; 0x40
 8008882:	9b02      	ldr	r3, [sp, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d016      	beq.n	80088b6 <_dtoa_r+0x3e6>
 8008888:	9812      	ldr	r0, [sp, #72]	; 0x48
 800888a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800888c:	425c      	negs	r4, r3
 800888e:	230f      	movs	r3, #15
 8008890:	4ab5      	ldr	r2, [pc, #724]	; (8008b68 <_dtoa_r+0x698>)
 8008892:	4023      	ands	r3, r4
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	18d3      	adds	r3, r2, r3
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f7f9 fa5c 	bl	8001d58 <__aeabi_dmul>
 80088a0:	2601      	movs	r6, #1
 80088a2:	2300      	movs	r3, #0
 80088a4:	900a      	str	r0, [sp, #40]	; 0x28
 80088a6:	910b      	str	r1, [sp, #44]	; 0x2c
 80088a8:	4db0      	ldr	r5, [pc, #704]	; (8008b6c <_dtoa_r+0x69c>)
 80088aa:	1124      	asrs	r4, r4, #4
 80088ac:	2c00      	cmp	r4, #0
 80088ae:	d000      	beq.n	80088b2 <_dtoa_r+0x3e2>
 80088b0:	e094      	b.n	80089dc <_dtoa_r+0x50c>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d19f      	bne.n	80087f6 <_dtoa_r+0x326>
 80088b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d100      	bne.n	80088be <_dtoa_r+0x3ee>
 80088bc:	e09b      	b.n	80089f6 <_dtoa_r+0x526>
 80088be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80088c2:	2200      	movs	r2, #0
 80088c4:	0020      	movs	r0, r4
 80088c6:	0029      	movs	r1, r5
 80088c8:	4ba9      	ldr	r3, [pc, #676]	; (8008b70 <_dtoa_r+0x6a0>)
 80088ca:	f7f7 fdbd 	bl	8000448 <__aeabi_dcmplt>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	d100      	bne.n	80088d4 <_dtoa_r+0x404>
 80088d2:	e090      	b.n	80089f6 <_dtoa_r+0x526>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d100      	bne.n	80088dc <_dtoa_r+0x40c>
 80088da:	e08c      	b.n	80089f6 <_dtoa_r+0x526>
 80088dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dd46      	ble.n	8008970 <_dtoa_r+0x4a0>
 80088e2:	9b02      	ldr	r3, [sp, #8]
 80088e4:	2200      	movs	r2, #0
 80088e6:	0020      	movs	r0, r4
 80088e8:	0029      	movs	r1, r5
 80088ea:	1e5e      	subs	r6, r3, #1
 80088ec:	4ba1      	ldr	r3, [pc, #644]	; (8008b74 <_dtoa_r+0x6a4>)
 80088ee:	f7f9 fa33 	bl	8001d58 <__aeabi_dmul>
 80088f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088f4:	900a      	str	r0, [sp, #40]	; 0x28
 80088f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80088f8:	3301      	adds	r3, #1
 80088fa:	9310      	str	r3, [sp, #64]	; 0x40
 80088fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088fe:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008900:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008902:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008904:	9307      	str	r3, [sp, #28]
 8008906:	f7fa f85b 	bl	80029c0 <__aeabi_i2d>
 800890a:	0022      	movs	r2, r4
 800890c:	002b      	movs	r3, r5
 800890e:	f7f9 fa23 	bl	8001d58 <__aeabi_dmul>
 8008912:	2200      	movs	r2, #0
 8008914:	4b98      	ldr	r3, [pc, #608]	; (8008b78 <_dtoa_r+0x6a8>)
 8008916:	f7f8 faaf 	bl	8000e78 <__aeabi_dadd>
 800891a:	9010      	str	r0, [sp, #64]	; 0x40
 800891c:	9111      	str	r1, [sp, #68]	; 0x44
 800891e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	920a      	str	r2, [sp, #40]	; 0x28
 8008924:	930b      	str	r3, [sp, #44]	; 0x2c
 8008926:	4a95      	ldr	r2, [pc, #596]	; (8008b7c <_dtoa_r+0x6ac>)
 8008928:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800892a:	4694      	mov	ip, r2
 800892c:	4463      	add	r3, ip
 800892e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008930:	930b      	str	r3, [sp, #44]	; 0x2c
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d161      	bne.n	80089fc <_dtoa_r+0x52c>
 8008938:	2200      	movs	r2, #0
 800893a:	0020      	movs	r0, r4
 800893c:	0029      	movs	r1, r5
 800893e:	4b90      	ldr	r3, [pc, #576]	; (8008b80 <_dtoa_r+0x6b0>)
 8008940:	f7f9 fc76 	bl	8002230 <__aeabi_dsub>
 8008944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008948:	0004      	movs	r4, r0
 800894a:	000d      	movs	r5, r1
 800894c:	f7f7 fd90 	bl	8000470 <__aeabi_dcmpgt>
 8008950:	2800      	cmp	r0, #0
 8008952:	d000      	beq.n	8008956 <_dtoa_r+0x486>
 8008954:	e2b5      	b.n	8008ec2 <_dtoa_r+0x9f2>
 8008956:	488b      	ldr	r0, [pc, #556]	; (8008b84 <_dtoa_r+0x6b4>)
 8008958:	9911      	ldr	r1, [sp, #68]	; 0x44
 800895a:	4684      	mov	ip, r0
 800895c:	4461      	add	r1, ip
 800895e:	000b      	movs	r3, r1
 8008960:	0020      	movs	r0, r4
 8008962:	0029      	movs	r1, r5
 8008964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008966:	f7f7 fd6f 	bl	8000448 <__aeabi_dcmplt>
 800896a:	2800      	cmp	r0, #0
 800896c:	d000      	beq.n	8008970 <_dtoa_r+0x4a0>
 800896e:	e2a5      	b.n	8008ebc <_dtoa_r+0x9ec>
 8008970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008972:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008974:	930a      	str	r3, [sp, #40]	; 0x28
 8008976:	940b      	str	r4, [sp, #44]	; 0x2c
 8008978:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800897a:	2b00      	cmp	r3, #0
 800897c:	da00      	bge.n	8008980 <_dtoa_r+0x4b0>
 800897e:	e171      	b.n	8008c64 <_dtoa_r+0x794>
 8008980:	9a02      	ldr	r2, [sp, #8]
 8008982:	2a0e      	cmp	r2, #14
 8008984:	dd00      	ble.n	8008988 <_dtoa_r+0x4b8>
 8008986:	e16d      	b.n	8008c64 <_dtoa_r+0x794>
 8008988:	4b77      	ldr	r3, [pc, #476]	; (8008b68 <_dtoa_r+0x698>)
 800898a:	00d2      	lsls	r2, r2, #3
 800898c:	189b      	adds	r3, r3, r2
 800898e:	685c      	ldr	r4, [r3, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	9308      	str	r3, [sp, #32]
 8008994:	9409      	str	r4, [sp, #36]	; 0x24
 8008996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008998:	2b00      	cmp	r3, #0
 800899a:	db00      	blt.n	800899e <_dtoa_r+0x4ce>
 800899c:	e0f6      	b.n	8008b8c <_dtoa_r+0x6bc>
 800899e:	9b06      	ldr	r3, [sp, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dd00      	ble.n	80089a6 <_dtoa_r+0x4d6>
 80089a4:	e0f2      	b.n	8008b8c <_dtoa_r+0x6bc>
 80089a6:	d000      	beq.n	80089aa <_dtoa_r+0x4da>
 80089a8:	e288      	b.n	8008ebc <_dtoa_r+0x9ec>
 80089aa:	9808      	ldr	r0, [sp, #32]
 80089ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b73      	ldr	r3, [pc, #460]	; (8008b80 <_dtoa_r+0x6b0>)
 80089b2:	f7f9 f9d1 	bl	8001d58 <__aeabi_dmul>
 80089b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ba:	f7f7 fd63 	bl	8000484 <__aeabi_dcmpge>
 80089be:	9e06      	ldr	r6, [sp, #24]
 80089c0:	0035      	movs	r5, r6
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d000      	beq.n	80089c8 <_dtoa_r+0x4f8>
 80089c6:	e25f      	b.n	8008e88 <_dtoa_r+0x9b8>
 80089c8:	9b05      	ldr	r3, [sp, #20]
 80089ca:	9a05      	ldr	r2, [sp, #20]
 80089cc:	3301      	adds	r3, #1
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	2331      	movs	r3, #49	; 0x31
 80089d2:	7013      	strb	r3, [r2, #0]
 80089d4:	9b02      	ldr	r3, [sp, #8]
 80089d6:	3301      	adds	r3, #1
 80089d8:	9302      	str	r3, [sp, #8]
 80089da:	e25a      	b.n	8008e92 <_dtoa_r+0x9c2>
 80089dc:	4234      	tst	r4, r6
 80089de:	d007      	beq.n	80089f0 <_dtoa_r+0x520>
 80089e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089e2:	3301      	adds	r3, #1
 80089e4:	9310      	str	r3, [sp, #64]	; 0x40
 80089e6:	682a      	ldr	r2, [r5, #0]
 80089e8:	686b      	ldr	r3, [r5, #4]
 80089ea:	f7f9 f9b5 	bl	8001d58 <__aeabi_dmul>
 80089ee:	0033      	movs	r3, r6
 80089f0:	1064      	asrs	r4, r4, #1
 80089f2:	3508      	adds	r5, #8
 80089f4:	e75a      	b.n	80088ac <_dtoa_r+0x3dc>
 80089f6:	9e02      	ldr	r6, [sp, #8]
 80089f8:	9b06      	ldr	r3, [sp, #24]
 80089fa:	e780      	b.n	80088fe <_dtoa_r+0x42e>
 80089fc:	9b07      	ldr	r3, [sp, #28]
 80089fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008a00:	1e5a      	subs	r2, r3, #1
 8008a02:	4b59      	ldr	r3, [pc, #356]	; (8008b68 <_dtoa_r+0x698>)
 8008a04:	00d2      	lsls	r2, r2, #3
 8008a06:	189b      	adds	r3, r3, r2
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d051      	beq.n	8008ab4 <_dtoa_r+0x5e4>
 8008a10:	2000      	movs	r0, #0
 8008a12:	495d      	ldr	r1, [pc, #372]	; (8008b88 <_dtoa_r+0x6b8>)
 8008a14:	f7f8 fd9a 	bl	800154c <__aeabi_ddiv>
 8008a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a1c:	f7f9 fc08 	bl	8002230 <__aeabi_dsub>
 8008a20:	9a05      	ldr	r2, [sp, #20]
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	4694      	mov	ip, r2
 8008a26:	9310      	str	r3, [sp, #64]	; 0x40
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	900a      	str	r0, [sp, #40]	; 0x28
 8008a2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a2e:	4463      	add	r3, ip
 8008a30:	9319      	str	r3, [sp, #100]	; 0x64
 8008a32:	0029      	movs	r1, r5
 8008a34:	0020      	movs	r0, r4
 8008a36:	f7f9 ff8d 	bl	8002954 <__aeabi_d2iz>
 8008a3a:	9017      	str	r0, [sp, #92]	; 0x5c
 8008a3c:	f7f9 ffc0 	bl	80029c0 <__aeabi_i2d>
 8008a40:	0002      	movs	r2, r0
 8008a42:	000b      	movs	r3, r1
 8008a44:	0020      	movs	r0, r4
 8008a46:	0029      	movs	r1, r5
 8008a48:	f7f9 fbf2 	bl	8002230 <__aeabi_dsub>
 8008a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008a50:	3301      	adds	r3, #1
 8008a52:	9307      	str	r3, [sp, #28]
 8008a54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a56:	0004      	movs	r4, r0
 8008a58:	3330      	adds	r3, #48	; 0x30
 8008a5a:	7013      	strb	r3, [r2, #0]
 8008a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a60:	000d      	movs	r5, r1
 8008a62:	f7f7 fcf1 	bl	8000448 <__aeabi_dcmplt>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d175      	bne.n	8008b56 <_dtoa_r+0x686>
 8008a6a:	0022      	movs	r2, r4
 8008a6c:	002b      	movs	r3, r5
 8008a6e:	2000      	movs	r0, #0
 8008a70:	493f      	ldr	r1, [pc, #252]	; (8008b70 <_dtoa_r+0x6a0>)
 8008a72:	f7f9 fbdd 	bl	8002230 <__aeabi_dsub>
 8008a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7a:	f7f7 fce5 	bl	8000448 <__aeabi_dcmplt>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d000      	beq.n	8008a84 <_dtoa_r+0x5b4>
 8008a82:	e0d1      	b.n	8008c28 <_dtoa_r+0x758>
 8008a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a86:	9a07      	ldr	r2, [sp, #28]
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <_dtoa_r+0x5be>
 8008a8c:	e770      	b.n	8008970 <_dtoa_r+0x4a0>
 8008a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008a90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a92:	2200      	movs	r2, #0
 8008a94:	4b37      	ldr	r3, [pc, #220]	; (8008b74 <_dtoa_r+0x6a4>)
 8008a96:	f7f9 f95f 	bl	8001d58 <__aeabi_dmul>
 8008a9a:	4b36      	ldr	r3, [pc, #216]	; (8008b74 <_dtoa_r+0x6a4>)
 8008a9c:	900a      	str	r0, [sp, #40]	; 0x28
 8008a9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	0020      	movs	r0, r4
 8008aa4:	0029      	movs	r1, r5
 8008aa6:	f7f9 f957 	bl	8001d58 <__aeabi_dmul>
 8008aaa:	9b07      	ldr	r3, [sp, #28]
 8008aac:	0004      	movs	r4, r0
 8008aae:	000d      	movs	r5, r1
 8008ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ab2:	e7be      	b.n	8008a32 <_dtoa_r+0x562>
 8008ab4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008ab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ab8:	f7f9 f94e 	bl	8001d58 <__aeabi_dmul>
 8008abc:	9a05      	ldr	r2, [sp, #20]
 8008abe:	9b05      	ldr	r3, [sp, #20]
 8008ac0:	4694      	mov	ip, r2
 8008ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac4:	9b07      	ldr	r3, [sp, #28]
 8008ac6:	9010      	str	r0, [sp, #64]	; 0x40
 8008ac8:	9111      	str	r1, [sp, #68]	; 0x44
 8008aca:	4463      	add	r3, ip
 8008acc:	9319      	str	r3, [sp, #100]	; 0x64
 8008ace:	0029      	movs	r1, r5
 8008ad0:	0020      	movs	r0, r4
 8008ad2:	f7f9 ff3f 	bl	8002954 <__aeabi_d2iz>
 8008ad6:	9017      	str	r0, [sp, #92]	; 0x5c
 8008ad8:	f7f9 ff72 	bl	80029c0 <__aeabi_i2d>
 8008adc:	0002      	movs	r2, r0
 8008ade:	000b      	movs	r3, r1
 8008ae0:	0020      	movs	r0, r4
 8008ae2:	0029      	movs	r1, r5
 8008ae4:	f7f9 fba4 	bl	8002230 <__aeabi_dsub>
 8008ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aec:	3330      	adds	r3, #48	; 0x30
 8008aee:	7013      	strb	r3, [r2, #0]
 8008af0:	0013      	movs	r3, r2
 8008af2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008af4:	3301      	adds	r3, #1
 8008af6:	0004      	movs	r4, r0
 8008af8:	000d      	movs	r5, r1
 8008afa:	930a      	str	r3, [sp, #40]	; 0x28
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d12c      	bne.n	8008b5a <_dtoa_r+0x68a>
 8008b00:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008b02:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008b04:	9a05      	ldr	r2, [sp, #20]
 8008b06:	9b07      	ldr	r3, [sp, #28]
 8008b08:	4694      	mov	ip, r2
 8008b0a:	4463      	add	r3, ip
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	9307      	str	r3, [sp, #28]
 8008b10:	4b1d      	ldr	r3, [pc, #116]	; (8008b88 <_dtoa_r+0x6b8>)
 8008b12:	f7f8 f9b1 	bl	8000e78 <__aeabi_dadd>
 8008b16:	0002      	movs	r2, r0
 8008b18:	000b      	movs	r3, r1
 8008b1a:	0020      	movs	r0, r4
 8008b1c:	0029      	movs	r1, r5
 8008b1e:	f7f7 fca7 	bl	8000470 <__aeabi_dcmpgt>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d000      	beq.n	8008b28 <_dtoa_r+0x658>
 8008b26:	e07f      	b.n	8008c28 <_dtoa_r+0x758>
 8008b28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	4916      	ldr	r1, [pc, #88]	; (8008b88 <_dtoa_r+0x6b8>)
 8008b30:	f7f9 fb7e 	bl	8002230 <__aeabi_dsub>
 8008b34:	0002      	movs	r2, r0
 8008b36:	000b      	movs	r3, r1
 8008b38:	0020      	movs	r0, r4
 8008b3a:	0029      	movs	r1, r5
 8008b3c:	f7f7 fc84 	bl	8000448 <__aeabi_dcmplt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d100      	bne.n	8008b46 <_dtoa_r+0x676>
 8008b44:	e714      	b.n	8008970 <_dtoa_r+0x4a0>
 8008b46:	9b07      	ldr	r3, [sp, #28]
 8008b48:	001a      	movs	r2, r3
 8008b4a:	3a01      	subs	r2, #1
 8008b4c:	9207      	str	r2, [sp, #28]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	2a30      	cmp	r2, #48	; 0x30
 8008b52:	d0f8      	beq.n	8008b46 <_dtoa_r+0x676>
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	9602      	str	r6, [sp, #8]
 8008b58:	e054      	b.n	8008c04 <_dtoa_r+0x734>
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_dtoa_r+0x6a4>)
 8008b5e:	f7f9 f8fb 	bl	8001d58 <__aeabi_dmul>
 8008b62:	0004      	movs	r4, r0
 8008b64:	000d      	movs	r5, r1
 8008b66:	e7b2      	b.n	8008ace <_dtoa_r+0x5fe>
 8008b68:	08009f68 	.word	0x08009f68
 8008b6c:	08009f40 	.word	0x08009f40
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	40240000 	.word	0x40240000
 8008b78:	401c0000 	.word	0x401c0000
 8008b7c:	fcc00000 	.word	0xfcc00000
 8008b80:	40140000 	.word	0x40140000
 8008b84:	7cc00000 	.word	0x7cc00000
 8008b88:	3fe00000 	.word	0x3fe00000
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	9e05      	ldr	r6, [sp, #20]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	199b      	adds	r3, r3, r6
 8008b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008b98:	930a      	str	r3, [sp, #40]	; 0x28
 8008b9a:	9a08      	ldr	r2, [sp, #32]
 8008b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9e:	0020      	movs	r0, r4
 8008ba0:	0029      	movs	r1, r5
 8008ba2:	f7f8 fcd3 	bl	800154c <__aeabi_ddiv>
 8008ba6:	f7f9 fed5 	bl	8002954 <__aeabi_d2iz>
 8008baa:	9006      	str	r0, [sp, #24]
 8008bac:	f7f9 ff08 	bl	80029c0 <__aeabi_i2d>
 8008bb0:	9a08      	ldr	r2, [sp, #32]
 8008bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb4:	f7f9 f8d0 	bl	8001d58 <__aeabi_dmul>
 8008bb8:	0002      	movs	r2, r0
 8008bba:	000b      	movs	r3, r1
 8008bbc:	0020      	movs	r0, r4
 8008bbe:	0029      	movs	r1, r5
 8008bc0:	f7f9 fb36 	bl	8002230 <__aeabi_dsub>
 8008bc4:	0033      	movs	r3, r6
 8008bc6:	9a06      	ldr	r2, [sp, #24]
 8008bc8:	3601      	adds	r6, #1
 8008bca:	3230      	adds	r2, #48	; 0x30
 8008bcc:	701a      	strb	r2, [r3, #0]
 8008bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd0:	9607      	str	r6, [sp, #28]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d139      	bne.n	8008c4a <_dtoa_r+0x77a>
 8008bd6:	0002      	movs	r2, r0
 8008bd8:	000b      	movs	r3, r1
 8008bda:	f7f8 f94d 	bl	8000e78 <__aeabi_dadd>
 8008bde:	9a08      	ldr	r2, [sp, #32]
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	0004      	movs	r4, r0
 8008be4:	000d      	movs	r5, r1
 8008be6:	f7f7 fc43 	bl	8000470 <__aeabi_dcmpgt>
 8008bea:	2800      	cmp	r0, #0
 8008bec:	d11b      	bne.n	8008c26 <_dtoa_r+0x756>
 8008bee:	9a08      	ldr	r2, [sp, #32]
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	0020      	movs	r0, r4
 8008bf4:	0029      	movs	r1, r5
 8008bf6:	f7f7 fc21 	bl	800043c <__aeabi_dcmpeq>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d002      	beq.n	8008c04 <_dtoa_r+0x734>
 8008bfe:	9b06      	ldr	r3, [sp, #24]
 8008c00:	07db      	lsls	r3, r3, #31
 8008c02:	d410      	bmi.n	8008c26 <_dtoa_r+0x756>
 8008c04:	0038      	movs	r0, r7
 8008c06:	9904      	ldr	r1, [sp, #16]
 8008c08:	f7fe fcb4 	bl	8007574 <_Bfree>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	9a07      	ldr	r2, [sp, #28]
 8008c10:	9802      	ldr	r0, [sp, #8]
 8008c12:	7013      	strb	r3, [r2, #0]
 8008c14:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008c16:	3001      	adds	r0, #1
 8008c18:	6018      	str	r0, [r3, #0]
 8008c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d100      	bne.n	8008c22 <_dtoa_r+0x752>
 8008c20:	e4a3      	b.n	800856a <_dtoa_r+0x9a>
 8008c22:	601a      	str	r2, [r3, #0]
 8008c24:	e4a1      	b.n	800856a <_dtoa_r+0x9a>
 8008c26:	9e02      	ldr	r6, [sp, #8]
 8008c28:	9b07      	ldr	r3, [sp, #28]
 8008c2a:	9307      	str	r3, [sp, #28]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	2a39      	cmp	r2, #57	; 0x39
 8008c32:	d106      	bne.n	8008c42 <_dtoa_r+0x772>
 8008c34:	9a05      	ldr	r2, [sp, #20]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d1f7      	bne.n	8008c2a <_dtoa_r+0x75a>
 8008c3a:	2230      	movs	r2, #48	; 0x30
 8008c3c:	9905      	ldr	r1, [sp, #20]
 8008c3e:	3601      	adds	r6, #1
 8008c40:	700a      	strb	r2, [r1, #0]
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	3201      	adds	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	e785      	b.n	8008b56 <_dtoa_r+0x686>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	4bad      	ldr	r3, [pc, #692]	; (8008f04 <_dtoa_r+0xa34>)
 8008c4e:	f7f9 f883 	bl	8001d58 <__aeabi_dmul>
 8008c52:	2200      	movs	r2, #0
 8008c54:	2300      	movs	r3, #0
 8008c56:	0004      	movs	r4, r0
 8008c58:	000d      	movs	r5, r1
 8008c5a:	f7f7 fbef 	bl	800043c <__aeabi_dcmpeq>
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d09b      	beq.n	8008b9a <_dtoa_r+0x6ca>
 8008c62:	e7cf      	b.n	8008c04 <_dtoa_r+0x734>
 8008c64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d100      	bne.n	8008c6c <_dtoa_r+0x79c>
 8008c6a:	e082      	b.n	8008d72 <_dtoa_r+0x8a2>
 8008c6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c6e:	2a01      	cmp	r2, #1
 8008c70:	dc66      	bgt.n	8008d40 <_dtoa_r+0x870>
 8008c72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d05f      	beq.n	8008d38 <_dtoa_r+0x868>
 8008c78:	4aa3      	ldr	r2, [pc, #652]	; (8008f08 <_dtoa_r+0xa38>)
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008c7e:	9c08      	ldr	r4, [sp, #32]
 8008c80:	9a08      	ldr	r2, [sp, #32]
 8008c82:	2101      	movs	r1, #1
 8008c84:	18d2      	adds	r2, r2, r3
 8008c86:	9208      	str	r2, [sp, #32]
 8008c88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c8a:	0038      	movs	r0, r7
 8008c8c:	18d3      	adds	r3, r2, r3
 8008c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c90:	f7fe fd20 	bl	80076d4 <__i2b>
 8008c94:	0005      	movs	r5, r0
 8008c96:	2c00      	cmp	r4, #0
 8008c98:	dd0e      	ble.n	8008cb8 <_dtoa_r+0x7e8>
 8008c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dd0b      	ble.n	8008cb8 <_dtoa_r+0x7e8>
 8008ca0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ca2:	0023      	movs	r3, r4
 8008ca4:	4294      	cmp	r4, r2
 8008ca6:	dd00      	ble.n	8008caa <_dtoa_r+0x7da>
 8008ca8:	0013      	movs	r3, r2
 8008caa:	9a08      	ldr	r2, [sp, #32]
 8008cac:	1ae4      	subs	r4, r4, r3
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	9208      	str	r2, [sp, #32]
 8008cb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8008cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d01f      	beq.n	8008cfe <_dtoa_r+0x82e>
 8008cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d05a      	beq.n	8008d7a <_dtoa_r+0x8aa>
 8008cc4:	2e00      	cmp	r6, #0
 8008cc6:	dd11      	ble.n	8008cec <_dtoa_r+0x81c>
 8008cc8:	0029      	movs	r1, r5
 8008cca:	0032      	movs	r2, r6
 8008ccc:	0038      	movs	r0, r7
 8008cce:	f7fe fdc7 	bl	8007860 <__pow5mult>
 8008cd2:	9a04      	ldr	r2, [sp, #16]
 8008cd4:	0001      	movs	r1, r0
 8008cd6:	0005      	movs	r5, r0
 8008cd8:	0038      	movs	r0, r7
 8008cda:	f7fe fd11 	bl	8007700 <__multiply>
 8008cde:	9904      	ldr	r1, [sp, #16]
 8008ce0:	9007      	str	r0, [sp, #28]
 8008ce2:	0038      	movs	r0, r7
 8008ce4:	f7fe fc46 	bl	8007574 <_Bfree>
 8008ce8:	9b07      	ldr	r3, [sp, #28]
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cee:	1b9a      	subs	r2, r3, r6
 8008cf0:	42b3      	cmp	r3, r6
 8008cf2:	d004      	beq.n	8008cfe <_dtoa_r+0x82e>
 8008cf4:	0038      	movs	r0, r7
 8008cf6:	9904      	ldr	r1, [sp, #16]
 8008cf8:	f7fe fdb2 	bl	8007860 <__pow5mult>
 8008cfc:	9004      	str	r0, [sp, #16]
 8008cfe:	2101      	movs	r1, #1
 8008d00:	0038      	movs	r0, r7
 8008d02:	f7fe fce7 	bl	80076d4 <__i2b>
 8008d06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d08:	0006      	movs	r6, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	dd37      	ble.n	8008d7e <_dtoa_r+0x8ae>
 8008d0e:	001a      	movs	r2, r3
 8008d10:	0001      	movs	r1, r0
 8008d12:	0038      	movs	r0, r7
 8008d14:	f7fe fda4 	bl	8007860 <__pow5mult>
 8008d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d1a:	0006      	movs	r6, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	dd33      	ble.n	8008d88 <_dtoa_r+0x8b8>
 8008d20:	2300      	movs	r3, #0
 8008d22:	9307      	str	r3, [sp, #28]
 8008d24:	6933      	ldr	r3, [r6, #16]
 8008d26:	3303      	adds	r3, #3
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	18f3      	adds	r3, r6, r3
 8008d2c:	6858      	ldr	r0, [r3, #4]
 8008d2e:	f7fe fc89 	bl	8007644 <__hi0bits>
 8008d32:	2320      	movs	r3, #32
 8008d34:	1a18      	subs	r0, r3, r0
 8008d36:	e03f      	b.n	8008db8 <_dtoa_r+0x8e8>
 8008d38:	2336      	movs	r3, #54	; 0x36
 8008d3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d3c:	1a9b      	subs	r3, r3, r2
 8008d3e:	e79d      	b.n	8008c7c <_dtoa_r+0x7ac>
 8008d40:	9b06      	ldr	r3, [sp, #24]
 8008d42:	1e5e      	subs	r6, r3, #1
 8008d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d46:	42b3      	cmp	r3, r6
 8008d48:	db08      	blt.n	8008d5c <_dtoa_r+0x88c>
 8008d4a:	1b9e      	subs	r6, r3, r6
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da0c      	bge.n	8008d6c <_dtoa_r+0x89c>
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	9a06      	ldr	r2, [sp, #24]
 8008d56:	1a9c      	subs	r4, r3, r2
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e791      	b.n	8008c80 <_dtoa_r+0x7b0>
 8008d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d60:	1af3      	subs	r3, r6, r3
 8008d62:	18d3      	adds	r3, r2, r3
 8008d64:	960e      	str	r6, [sp, #56]	; 0x38
 8008d66:	9314      	str	r3, [sp, #80]	; 0x50
 8008d68:	2600      	movs	r6, #0
 8008d6a:	e7ef      	b.n	8008d4c <_dtoa_r+0x87c>
 8008d6c:	9c08      	ldr	r4, [sp, #32]
 8008d6e:	9b06      	ldr	r3, [sp, #24]
 8008d70:	e786      	b.n	8008c80 <_dtoa_r+0x7b0>
 8008d72:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008d74:	9c08      	ldr	r4, [sp, #32]
 8008d76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d78:	e78d      	b.n	8008c96 <_dtoa_r+0x7c6>
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d7c:	e7ba      	b.n	8008cf4 <_dtoa_r+0x824>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9307      	str	r3, [sp, #28]
 8008d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	dc13      	bgt.n	8008db0 <_dtoa_r+0x8e0>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10e      	bne.n	8008db0 <_dtoa_r+0x8e0>
 8008d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d94:	031b      	lsls	r3, r3, #12
 8008d96:	d10b      	bne.n	8008db0 <_dtoa_r+0x8e0>
 8008d98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008d9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d9c:	4213      	tst	r3, r2
 8008d9e:	d007      	beq.n	8008db0 <_dtoa_r+0x8e0>
 8008da0:	9b08      	ldr	r3, [sp, #32]
 8008da2:	3301      	adds	r3, #1
 8008da4:	9308      	str	r3, [sp, #32]
 8008da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da8:	3301      	adds	r3, #1
 8008daa:	930d      	str	r3, [sp, #52]	; 0x34
 8008dac:	2301      	movs	r3, #1
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008db2:	2001      	movs	r0, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1b5      	bne.n	8008d24 <_dtoa_r+0x854>
 8008db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dba:	221f      	movs	r2, #31
 8008dbc:	1818      	adds	r0, r3, r0
 8008dbe:	0003      	movs	r3, r0
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	4210      	tst	r0, r2
 8008dc4:	d046      	beq.n	8008e54 <_dtoa_r+0x984>
 8008dc6:	3201      	adds	r2, #1
 8008dc8:	1ad2      	subs	r2, r2, r3
 8008dca:	2a04      	cmp	r2, #4
 8008dcc:	dd3f      	ble.n	8008e4e <_dtoa_r+0x97e>
 8008dce:	221c      	movs	r2, #28
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	9a08      	ldr	r2, [sp, #32]
 8008dd4:	18e4      	adds	r4, r4, r3
 8008dd6:	18d2      	adds	r2, r2, r3
 8008dd8:	9208      	str	r2, [sp, #32]
 8008dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ddc:	18d3      	adds	r3, r2, r3
 8008dde:	930d      	str	r3, [sp, #52]	; 0x34
 8008de0:	9b08      	ldr	r3, [sp, #32]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dd05      	ble.n	8008df2 <_dtoa_r+0x922>
 8008de6:	001a      	movs	r2, r3
 8008de8:	0038      	movs	r0, r7
 8008dea:	9904      	ldr	r1, [sp, #16]
 8008dec:	f7fe fd94 	bl	8007918 <__lshift>
 8008df0:	9004      	str	r0, [sp, #16]
 8008df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dd05      	ble.n	8008e04 <_dtoa_r+0x934>
 8008df8:	0031      	movs	r1, r6
 8008dfa:	001a      	movs	r2, r3
 8008dfc:	0038      	movs	r0, r7
 8008dfe:	f7fe fd8b 	bl	8007918 <__lshift>
 8008e02:	0006      	movs	r6, r0
 8008e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d026      	beq.n	8008e58 <_dtoa_r+0x988>
 8008e0a:	0031      	movs	r1, r6
 8008e0c:	9804      	ldr	r0, [sp, #16]
 8008e0e:	f7fe fdf3 	bl	80079f8 <__mcmp>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	da20      	bge.n	8008e58 <_dtoa_r+0x988>
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	220a      	movs	r2, #10
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	9302      	str	r3, [sp, #8]
 8008e1e:	0038      	movs	r0, r7
 8008e20:	2300      	movs	r3, #0
 8008e22:	9904      	ldr	r1, [sp, #16]
 8008e24:	f7fe fbca 	bl	80075bc <__multadd>
 8008e28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e2a:	9004      	str	r0, [sp, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d100      	bne.n	8008e32 <_dtoa_r+0x962>
 8008e30:	e160      	b.n	80090f4 <_dtoa_r+0xc24>
 8008e32:	2300      	movs	r3, #0
 8008e34:	0029      	movs	r1, r5
 8008e36:	220a      	movs	r2, #10
 8008e38:	0038      	movs	r0, r7
 8008e3a:	f7fe fbbf 	bl	80075bc <__multadd>
 8008e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e40:	0005      	movs	r5, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	dc47      	bgt.n	8008ed6 <_dtoa_r+0xa06>
 8008e46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	dc0d      	bgt.n	8008e68 <_dtoa_r+0x998>
 8008e4c:	e043      	b.n	8008ed6 <_dtoa_r+0xa06>
 8008e4e:	2a04      	cmp	r2, #4
 8008e50:	d0c6      	beq.n	8008de0 <_dtoa_r+0x910>
 8008e52:	0013      	movs	r3, r2
 8008e54:	331c      	adds	r3, #28
 8008e56:	e7bc      	b.n	8008dd2 <_dtoa_r+0x902>
 8008e58:	9b06      	ldr	r3, [sp, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	dc35      	bgt.n	8008eca <_dtoa_r+0x9fa>
 8008e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	dd32      	ble.n	8008eca <_dtoa_r+0x9fa>
 8008e64:	9b06      	ldr	r3, [sp, #24]
 8008e66:	930c      	str	r3, [sp, #48]	; 0x30
 8008e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10c      	bne.n	8008e88 <_dtoa_r+0x9b8>
 8008e6e:	0031      	movs	r1, r6
 8008e70:	2205      	movs	r2, #5
 8008e72:	0038      	movs	r0, r7
 8008e74:	f7fe fba2 	bl	80075bc <__multadd>
 8008e78:	0006      	movs	r6, r0
 8008e7a:	0001      	movs	r1, r0
 8008e7c:	9804      	ldr	r0, [sp, #16]
 8008e7e:	f7fe fdbb 	bl	80079f8 <__mcmp>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	dd00      	ble.n	8008e88 <_dtoa_r+0x9b8>
 8008e86:	e59f      	b.n	80089c8 <_dtoa_r+0x4f8>
 8008e88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e8a:	43db      	mvns	r3, r3
 8008e8c:	9302      	str	r3, [sp, #8]
 8008e8e:	9b05      	ldr	r3, [sp, #20]
 8008e90:	9307      	str	r3, [sp, #28]
 8008e92:	2400      	movs	r4, #0
 8008e94:	0031      	movs	r1, r6
 8008e96:	0038      	movs	r0, r7
 8008e98:	f7fe fb6c 	bl	8007574 <_Bfree>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	d100      	bne.n	8008ea2 <_dtoa_r+0x9d2>
 8008ea0:	e6b0      	b.n	8008c04 <_dtoa_r+0x734>
 8008ea2:	2c00      	cmp	r4, #0
 8008ea4:	d005      	beq.n	8008eb2 <_dtoa_r+0x9e2>
 8008ea6:	42ac      	cmp	r4, r5
 8008ea8:	d003      	beq.n	8008eb2 <_dtoa_r+0x9e2>
 8008eaa:	0021      	movs	r1, r4
 8008eac:	0038      	movs	r0, r7
 8008eae:	f7fe fb61 	bl	8007574 <_Bfree>
 8008eb2:	0029      	movs	r1, r5
 8008eb4:	0038      	movs	r0, r7
 8008eb6:	f7fe fb5d 	bl	8007574 <_Bfree>
 8008eba:	e6a3      	b.n	8008c04 <_dtoa_r+0x734>
 8008ebc:	2600      	movs	r6, #0
 8008ebe:	0035      	movs	r5, r6
 8008ec0:	e7e2      	b.n	8008e88 <_dtoa_r+0x9b8>
 8008ec2:	9602      	str	r6, [sp, #8]
 8008ec4:	9e07      	ldr	r6, [sp, #28]
 8008ec6:	0035      	movs	r5, r6
 8008ec8:	e57e      	b.n	80089c8 <_dtoa_r+0x4f8>
 8008eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d100      	bne.n	8008ed2 <_dtoa_r+0xa02>
 8008ed0:	e0c8      	b.n	8009064 <_dtoa_r+0xb94>
 8008ed2:	9b06      	ldr	r3, [sp, #24]
 8008ed4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed6:	2c00      	cmp	r4, #0
 8008ed8:	dd05      	ble.n	8008ee6 <_dtoa_r+0xa16>
 8008eda:	0029      	movs	r1, r5
 8008edc:	0022      	movs	r2, r4
 8008ede:	0038      	movs	r0, r7
 8008ee0:	f7fe fd1a 	bl	8007918 <__lshift>
 8008ee4:	0005      	movs	r5, r0
 8008ee6:	9b07      	ldr	r3, [sp, #28]
 8008ee8:	0028      	movs	r0, r5
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01f      	beq.n	8008f2e <_dtoa_r+0xa5e>
 8008eee:	0038      	movs	r0, r7
 8008ef0:	6869      	ldr	r1, [r5, #4]
 8008ef2:	f7fe fafb 	bl	80074ec <_Balloc>
 8008ef6:	1e04      	subs	r4, r0, #0
 8008ef8:	d10c      	bne.n	8008f14 <_dtoa_r+0xa44>
 8008efa:	0002      	movs	r2, r0
 8008efc:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <_dtoa_r+0xa3c>)
 8008efe:	4904      	ldr	r1, [pc, #16]	; (8008f10 <_dtoa_r+0xa40>)
 8008f00:	f7ff fafb 	bl	80084fa <_dtoa_r+0x2a>
 8008f04:	40240000 	.word	0x40240000
 8008f08:	00000433 	.word	0x00000433
 8008f0c:	08009f2b 	.word	0x08009f2b
 8008f10:	000002ea 	.word	0x000002ea
 8008f14:	0029      	movs	r1, r5
 8008f16:	692b      	ldr	r3, [r5, #16]
 8008f18:	310c      	adds	r1, #12
 8008f1a:	1c9a      	adds	r2, r3, #2
 8008f1c:	0092      	lsls	r2, r2, #2
 8008f1e:	300c      	adds	r0, #12
 8008f20:	f000 f919 	bl	8009156 <memcpy>
 8008f24:	2201      	movs	r2, #1
 8008f26:	0021      	movs	r1, r4
 8008f28:	0038      	movs	r0, r7
 8008f2a:	f7fe fcf5 	bl	8007918 <__lshift>
 8008f2e:	002c      	movs	r4, r5
 8008f30:	0005      	movs	r5, r0
 8008f32:	9b05      	ldr	r3, [sp, #20]
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	0031      	movs	r1, r6
 8008f38:	9804      	ldr	r0, [sp, #16]
 8008f3a:	f7ff fa3d 	bl	80083b8 <quorem>
 8008f3e:	0003      	movs	r3, r0
 8008f40:	0021      	movs	r1, r4
 8008f42:	3330      	adds	r3, #48	; 0x30
 8008f44:	900e      	str	r0, [sp, #56]	; 0x38
 8008f46:	9804      	ldr	r0, [sp, #16]
 8008f48:	9306      	str	r3, [sp, #24]
 8008f4a:	f7fe fd55 	bl	80079f8 <__mcmp>
 8008f4e:	002a      	movs	r2, r5
 8008f50:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f52:	0031      	movs	r1, r6
 8008f54:	0038      	movs	r0, r7
 8008f56:	f7fe fd6b 	bl	8007a30 <__mdiff>
 8008f5a:	68c3      	ldr	r3, [r0, #12]
 8008f5c:	9007      	str	r0, [sp, #28]
 8008f5e:	9310      	str	r3, [sp, #64]	; 0x40
 8008f60:	2301      	movs	r3, #1
 8008f62:	930d      	str	r3, [sp, #52]	; 0x34
 8008f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <_dtoa_r+0xaa4>
 8008f6a:	0001      	movs	r1, r0
 8008f6c:	9804      	ldr	r0, [sp, #16]
 8008f6e:	f7fe fd43 	bl	80079f8 <__mcmp>
 8008f72:	900d      	str	r0, [sp, #52]	; 0x34
 8008f74:	0038      	movs	r0, r7
 8008f76:	9907      	ldr	r1, [sp, #28]
 8008f78:	f7fe fafc 	bl	8007574 <_Bfree>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f82:	4018      	ands	r0, r3
 8008f84:	9b08      	ldr	r3, [sp, #32]
 8008f86:	3301      	adds	r3, #1
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	4303      	orrs	r3, r0
 8008f90:	d10c      	bne.n	8008fac <_dtoa_r+0xadc>
 8008f92:	9b06      	ldr	r3, [sp, #24]
 8008f94:	2b39      	cmp	r3, #57	; 0x39
 8008f96:	d025      	beq.n	8008fe4 <_dtoa_r+0xb14>
 8008f98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd02      	ble.n	8008fa4 <_dtoa_r+0xad4>
 8008f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa0:	3331      	adds	r3, #49	; 0x31
 8008fa2:	9306      	str	r3, [sp, #24]
 8008fa4:	9b08      	ldr	r3, [sp, #32]
 8008fa6:	9a06      	ldr	r2, [sp, #24]
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	e773      	b.n	8008e94 <_dtoa_r+0x9c4>
 8008fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	db03      	blt.n	8008fba <_dtoa_r+0xaea>
 8008fb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	4303      	orrs	r3, r0
 8008fb8:	d11f      	bne.n	8008ffa <_dtoa_r+0xb2a>
 8008fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	ddf1      	ble.n	8008fa4 <_dtoa_r+0xad4>
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	0038      	movs	r0, r7
 8008fc6:	f7fe fca7 	bl	8007918 <__lshift>
 8008fca:	0031      	movs	r1, r6
 8008fcc:	9004      	str	r0, [sp, #16]
 8008fce:	f7fe fd13 	bl	80079f8 <__mcmp>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	dc03      	bgt.n	8008fde <_dtoa_r+0xb0e>
 8008fd6:	d1e5      	bne.n	8008fa4 <_dtoa_r+0xad4>
 8008fd8:	9b06      	ldr	r3, [sp, #24]
 8008fda:	07db      	lsls	r3, r3, #31
 8008fdc:	d5e2      	bpl.n	8008fa4 <_dtoa_r+0xad4>
 8008fde:	9b06      	ldr	r3, [sp, #24]
 8008fe0:	2b39      	cmp	r3, #57	; 0x39
 8008fe2:	d1dc      	bne.n	8008f9e <_dtoa_r+0xace>
 8008fe4:	2339      	movs	r3, #57	; 0x39
 8008fe6:	9a08      	ldr	r2, [sp, #32]
 8008fe8:	7013      	strb	r3, [r2, #0]
 8008fea:	9b07      	ldr	r3, [sp, #28]
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	781a      	ldrb	r2, [r3, #0]
 8008ff2:	2a39      	cmp	r2, #57	; 0x39
 8008ff4:	d06c      	beq.n	80090d0 <_dtoa_r+0xc00>
 8008ff6:	3201      	adds	r2, #1
 8008ff8:	e7d6      	b.n	8008fa8 <_dtoa_r+0xad8>
 8008ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd07      	ble.n	8009010 <_dtoa_r+0xb40>
 8009000:	9b06      	ldr	r3, [sp, #24]
 8009002:	2b39      	cmp	r3, #57	; 0x39
 8009004:	d0ee      	beq.n	8008fe4 <_dtoa_r+0xb14>
 8009006:	9b06      	ldr	r3, [sp, #24]
 8009008:	9a08      	ldr	r2, [sp, #32]
 800900a:	3301      	adds	r3, #1
 800900c:	7013      	strb	r3, [r2, #0]
 800900e:	e741      	b.n	8008e94 <_dtoa_r+0x9c4>
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	9a06      	ldr	r2, [sp, #24]
 8009014:	701a      	strb	r2, [r3, #0]
 8009016:	2301      	movs	r3, #1
 8009018:	9a05      	ldr	r2, [sp, #20]
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	9a08      	ldr	r2, [sp, #32]
 800901e:	189b      	adds	r3, r3, r2
 8009020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009022:	429a      	cmp	r2, r3
 8009024:	d03e      	beq.n	80090a4 <_dtoa_r+0xbd4>
 8009026:	2300      	movs	r3, #0
 8009028:	220a      	movs	r2, #10
 800902a:	9904      	ldr	r1, [sp, #16]
 800902c:	0038      	movs	r0, r7
 800902e:	f7fe fac5 	bl	80075bc <__multadd>
 8009032:	2300      	movs	r3, #0
 8009034:	9004      	str	r0, [sp, #16]
 8009036:	220a      	movs	r2, #10
 8009038:	0021      	movs	r1, r4
 800903a:	0038      	movs	r0, r7
 800903c:	42ac      	cmp	r4, r5
 800903e:	d106      	bne.n	800904e <_dtoa_r+0xb7e>
 8009040:	f7fe fabc 	bl	80075bc <__multadd>
 8009044:	0004      	movs	r4, r0
 8009046:	0005      	movs	r5, r0
 8009048:	9b07      	ldr	r3, [sp, #28]
 800904a:	9308      	str	r3, [sp, #32]
 800904c:	e773      	b.n	8008f36 <_dtoa_r+0xa66>
 800904e:	f7fe fab5 	bl	80075bc <__multadd>
 8009052:	0029      	movs	r1, r5
 8009054:	0004      	movs	r4, r0
 8009056:	2300      	movs	r3, #0
 8009058:	220a      	movs	r2, #10
 800905a:	0038      	movs	r0, r7
 800905c:	f7fe faae 	bl	80075bc <__multadd>
 8009060:	0005      	movs	r5, r0
 8009062:	e7f1      	b.n	8009048 <_dtoa_r+0xb78>
 8009064:	9b06      	ldr	r3, [sp, #24]
 8009066:	930c      	str	r3, [sp, #48]	; 0x30
 8009068:	2400      	movs	r4, #0
 800906a:	0031      	movs	r1, r6
 800906c:	9804      	ldr	r0, [sp, #16]
 800906e:	f7ff f9a3 	bl	80083b8 <quorem>
 8009072:	9b05      	ldr	r3, [sp, #20]
 8009074:	3030      	adds	r0, #48	; 0x30
 8009076:	5518      	strb	r0, [r3, r4]
 8009078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800907a:	3401      	adds	r4, #1
 800907c:	9006      	str	r0, [sp, #24]
 800907e:	42a3      	cmp	r3, r4
 8009080:	dd07      	ble.n	8009092 <_dtoa_r+0xbc2>
 8009082:	2300      	movs	r3, #0
 8009084:	220a      	movs	r2, #10
 8009086:	0038      	movs	r0, r7
 8009088:	9904      	ldr	r1, [sp, #16]
 800908a:	f7fe fa97 	bl	80075bc <__multadd>
 800908e:	9004      	str	r0, [sp, #16]
 8009090:	e7eb      	b.n	800906a <_dtoa_r+0xb9a>
 8009092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009094:	2001      	movs	r0, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd00      	ble.n	800909c <_dtoa_r+0xbcc>
 800909a:	0018      	movs	r0, r3
 800909c:	2400      	movs	r4, #0
 800909e:	9b05      	ldr	r3, [sp, #20]
 80090a0:	181b      	adds	r3, r3, r0
 80090a2:	9307      	str	r3, [sp, #28]
 80090a4:	9904      	ldr	r1, [sp, #16]
 80090a6:	2201      	movs	r2, #1
 80090a8:	0038      	movs	r0, r7
 80090aa:	f7fe fc35 	bl	8007918 <__lshift>
 80090ae:	0031      	movs	r1, r6
 80090b0:	9004      	str	r0, [sp, #16]
 80090b2:	f7fe fca1 	bl	80079f8 <__mcmp>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dc97      	bgt.n	8008fea <_dtoa_r+0xb1a>
 80090ba:	d102      	bne.n	80090c2 <_dtoa_r+0xbf2>
 80090bc:	9b06      	ldr	r3, [sp, #24]
 80090be:	07db      	lsls	r3, r3, #31
 80090c0:	d493      	bmi.n	8008fea <_dtoa_r+0xb1a>
 80090c2:	9b07      	ldr	r3, [sp, #28]
 80090c4:	9307      	str	r3, [sp, #28]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	781a      	ldrb	r2, [r3, #0]
 80090ca:	2a30      	cmp	r2, #48	; 0x30
 80090cc:	d0fa      	beq.n	80090c4 <_dtoa_r+0xbf4>
 80090ce:	e6e1      	b.n	8008e94 <_dtoa_r+0x9c4>
 80090d0:	9a05      	ldr	r2, [sp, #20]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d18a      	bne.n	8008fec <_dtoa_r+0xb1c>
 80090d6:	9b02      	ldr	r3, [sp, #8]
 80090d8:	3301      	adds	r3, #1
 80090da:	9302      	str	r3, [sp, #8]
 80090dc:	2331      	movs	r3, #49	; 0x31
 80090de:	e795      	b.n	800900c <_dtoa_r+0xb3c>
 80090e0:	4b08      	ldr	r3, [pc, #32]	; (8009104 <_dtoa_r+0xc34>)
 80090e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	4b08      	ldr	r3, [pc, #32]	; (8009108 <_dtoa_r+0xc38>)
 80090e8:	2a00      	cmp	r2, #0
 80090ea:	d001      	beq.n	80090f0 <_dtoa_r+0xc20>
 80090ec:	f7ff fa3b 	bl	8008566 <_dtoa_r+0x96>
 80090f0:	f7ff fa3b 	bl	800856a <_dtoa_r+0x9a>
 80090f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dcb6      	bgt.n	8009068 <_dtoa_r+0xb98>
 80090fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	dd00      	ble.n	8009102 <_dtoa_r+0xc32>
 8009100:	e6b2      	b.n	8008e68 <_dtoa_r+0x998>
 8009102:	e7b1      	b.n	8009068 <_dtoa_r+0xb98>
 8009104:	0800a0ab 	.word	0x0800a0ab
 8009108:	0800a0b3 	.word	0x0800a0b3

0800910c <fiprintf>:
 800910c:	b40e      	push	{r1, r2, r3}
 800910e:	b503      	push	{r0, r1, lr}
 8009110:	0001      	movs	r1, r0
 8009112:	ab03      	add	r3, sp, #12
 8009114:	4804      	ldr	r0, [pc, #16]	; (8009128 <fiprintf+0x1c>)
 8009116:	cb04      	ldmia	r3!, {r2}
 8009118:	6800      	ldr	r0, [r0, #0]
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	f000 f8c2 	bl	80092a4 <_vfiprintf_r>
 8009120:	b002      	add	sp, #8
 8009122:	bc08      	pop	{r3}
 8009124:	b003      	add	sp, #12
 8009126:	4718      	bx	r3
 8009128:	20000010 	.word	0x20000010

0800912c <malloc>:
 800912c:	b510      	push	{r4, lr}
 800912e:	4b03      	ldr	r3, [pc, #12]	; (800913c <malloc+0x10>)
 8009130:	0001      	movs	r1, r0
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	f7fe fda0 	bl	8007c78 <_malloc_r>
 8009138:	bd10      	pop	{r4, pc}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	20000010 	.word	0x20000010

08009140 <memchr>:
 8009140:	b2c9      	uxtb	r1, r1
 8009142:	1882      	adds	r2, r0, r2
 8009144:	4290      	cmp	r0, r2
 8009146:	d101      	bne.n	800914c <memchr+0xc>
 8009148:	2000      	movs	r0, #0
 800914a:	4770      	bx	lr
 800914c:	7803      	ldrb	r3, [r0, #0]
 800914e:	428b      	cmp	r3, r1
 8009150:	d0fb      	beq.n	800914a <memchr+0xa>
 8009152:	3001      	adds	r0, #1
 8009154:	e7f6      	b.n	8009144 <memchr+0x4>

08009156 <memcpy>:
 8009156:	2300      	movs	r3, #0
 8009158:	b510      	push	{r4, lr}
 800915a:	429a      	cmp	r2, r3
 800915c:	d100      	bne.n	8009160 <memcpy+0xa>
 800915e:	bd10      	pop	{r4, pc}
 8009160:	5ccc      	ldrb	r4, [r1, r3]
 8009162:	54c4      	strb	r4, [r0, r3]
 8009164:	3301      	adds	r3, #1
 8009166:	e7f8      	b.n	800915a <memcpy+0x4>

08009168 <memmove>:
 8009168:	b510      	push	{r4, lr}
 800916a:	4288      	cmp	r0, r1
 800916c:	d902      	bls.n	8009174 <memmove+0xc>
 800916e:	188b      	adds	r3, r1, r2
 8009170:	4298      	cmp	r0, r3
 8009172:	d303      	bcc.n	800917c <memmove+0x14>
 8009174:	2300      	movs	r3, #0
 8009176:	e007      	b.n	8009188 <memmove+0x20>
 8009178:	5c8b      	ldrb	r3, [r1, r2]
 800917a:	5483      	strb	r3, [r0, r2]
 800917c:	3a01      	subs	r2, #1
 800917e:	d2fb      	bcs.n	8009178 <memmove+0x10>
 8009180:	bd10      	pop	{r4, pc}
 8009182:	5ccc      	ldrb	r4, [r1, r3]
 8009184:	54c4      	strb	r4, [r0, r3]
 8009186:	3301      	adds	r3, #1
 8009188:	429a      	cmp	r2, r3
 800918a:	d1fa      	bne.n	8009182 <memmove+0x1a>
 800918c:	e7f8      	b.n	8009180 <memmove+0x18>
	...

08009190 <__malloc_lock>:
 8009190:	b510      	push	{r4, lr}
 8009192:	4802      	ldr	r0, [pc, #8]	; (800919c <__malloc_lock+0xc>)
 8009194:	f000 fc65 	bl	8009a62 <__retarget_lock_acquire_recursive>
 8009198:	bd10      	pop	{r4, pc}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	2000028c 	.word	0x2000028c

080091a0 <__malloc_unlock>:
 80091a0:	b510      	push	{r4, lr}
 80091a2:	4802      	ldr	r0, [pc, #8]	; (80091ac <__malloc_unlock+0xc>)
 80091a4:	f000 fc5e 	bl	8009a64 <__retarget_lock_release_recursive>
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	46c0      	nop			; (mov r8, r8)
 80091ac:	2000028c 	.word	0x2000028c

080091b0 <_free_r>:
 80091b0:	b570      	push	{r4, r5, r6, lr}
 80091b2:	0005      	movs	r5, r0
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d010      	beq.n	80091da <_free_r+0x2a>
 80091b8:	1f0c      	subs	r4, r1, #4
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da00      	bge.n	80091c2 <_free_r+0x12>
 80091c0:	18e4      	adds	r4, r4, r3
 80091c2:	0028      	movs	r0, r5
 80091c4:	f7ff ffe4 	bl	8009190 <__malloc_lock>
 80091c8:	4a1d      	ldr	r2, [pc, #116]	; (8009240 <_free_r+0x90>)
 80091ca:	6813      	ldr	r3, [r2, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d105      	bne.n	80091dc <_free_r+0x2c>
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	6014      	str	r4, [r2, #0]
 80091d4:	0028      	movs	r0, r5
 80091d6:	f7ff ffe3 	bl	80091a0 <__malloc_unlock>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d908      	bls.n	80091f2 <_free_r+0x42>
 80091e0:	6821      	ldr	r1, [r4, #0]
 80091e2:	1860      	adds	r0, r4, r1
 80091e4:	4283      	cmp	r3, r0
 80091e6:	d1f3      	bne.n	80091d0 <_free_r+0x20>
 80091e8:	6818      	ldr	r0, [r3, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	1841      	adds	r1, r0, r1
 80091ee:	6021      	str	r1, [r4, #0]
 80091f0:	e7ee      	b.n	80091d0 <_free_r+0x20>
 80091f2:	001a      	movs	r2, r3
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <_free_r+0x4e>
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	d9f9      	bls.n	80091f2 <_free_r+0x42>
 80091fe:	6811      	ldr	r1, [r2, #0]
 8009200:	1850      	adds	r0, r2, r1
 8009202:	42a0      	cmp	r0, r4
 8009204:	d10b      	bne.n	800921e <_free_r+0x6e>
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	1809      	adds	r1, r1, r0
 800920a:	1850      	adds	r0, r2, r1
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	4283      	cmp	r3, r0
 8009210:	d1e0      	bne.n	80091d4 <_free_r+0x24>
 8009212:	6818      	ldr	r0, [r3, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	1841      	adds	r1, r0, r1
 8009218:	6011      	str	r1, [r2, #0]
 800921a:	6053      	str	r3, [r2, #4]
 800921c:	e7da      	b.n	80091d4 <_free_r+0x24>
 800921e:	42a0      	cmp	r0, r4
 8009220:	d902      	bls.n	8009228 <_free_r+0x78>
 8009222:	230c      	movs	r3, #12
 8009224:	602b      	str	r3, [r5, #0]
 8009226:	e7d5      	b.n	80091d4 <_free_r+0x24>
 8009228:	6821      	ldr	r1, [r4, #0]
 800922a:	1860      	adds	r0, r4, r1
 800922c:	4283      	cmp	r3, r0
 800922e:	d103      	bne.n	8009238 <_free_r+0x88>
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	1841      	adds	r1, r0, r1
 8009236:	6021      	str	r1, [r4, #0]
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	6054      	str	r4, [r2, #4]
 800923c:	e7ca      	b.n	80091d4 <_free_r+0x24>
 800923e:	46c0      	nop			; (mov r8, r8)
 8009240:	20000094 	.word	0x20000094

08009244 <_malloc_usable_size_r>:
 8009244:	1f0b      	subs	r3, r1, #4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	1f18      	subs	r0, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	da01      	bge.n	8009252 <_malloc_usable_size_r+0xe>
 800924e:	580b      	ldr	r3, [r1, r0]
 8009250:	18c0      	adds	r0, r0, r3
 8009252:	4770      	bx	lr

08009254 <__sfputc_r>:
 8009254:	6893      	ldr	r3, [r2, #8]
 8009256:	b510      	push	{r4, lr}
 8009258:	3b01      	subs	r3, #1
 800925a:	6093      	str	r3, [r2, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	da04      	bge.n	800926a <__sfputc_r+0x16>
 8009260:	6994      	ldr	r4, [r2, #24]
 8009262:	42a3      	cmp	r3, r4
 8009264:	db07      	blt.n	8009276 <__sfputc_r+0x22>
 8009266:	290a      	cmp	r1, #10
 8009268:	d005      	beq.n	8009276 <__sfputc_r+0x22>
 800926a:	6813      	ldr	r3, [r2, #0]
 800926c:	1c58      	adds	r0, r3, #1
 800926e:	6010      	str	r0, [r2, #0]
 8009270:	7019      	strb	r1, [r3, #0]
 8009272:	0008      	movs	r0, r1
 8009274:	bd10      	pop	{r4, pc}
 8009276:	f000 f94f 	bl	8009518 <__swbuf_r>
 800927a:	0001      	movs	r1, r0
 800927c:	e7f9      	b.n	8009272 <__sfputc_r+0x1e>

0800927e <__sfputs_r>:
 800927e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009280:	0006      	movs	r6, r0
 8009282:	000f      	movs	r7, r1
 8009284:	0014      	movs	r4, r2
 8009286:	18d5      	adds	r5, r2, r3
 8009288:	42ac      	cmp	r4, r5
 800928a:	d101      	bne.n	8009290 <__sfputs_r+0x12>
 800928c:	2000      	movs	r0, #0
 800928e:	e007      	b.n	80092a0 <__sfputs_r+0x22>
 8009290:	7821      	ldrb	r1, [r4, #0]
 8009292:	003a      	movs	r2, r7
 8009294:	0030      	movs	r0, r6
 8009296:	f7ff ffdd 	bl	8009254 <__sfputc_r>
 800929a:	3401      	adds	r4, #1
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d1f3      	bne.n	8009288 <__sfputs_r+0xa>
 80092a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092a4 <_vfiprintf_r>:
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	b0a1      	sub	sp, #132	; 0x84
 80092a8:	0006      	movs	r6, r0
 80092aa:	000c      	movs	r4, r1
 80092ac:	001f      	movs	r7, r3
 80092ae:	9203      	str	r2, [sp, #12]
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d004      	beq.n	80092be <_vfiprintf_r+0x1a>
 80092b4:	6983      	ldr	r3, [r0, #24]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <_vfiprintf_r+0x1a>
 80092ba:	f000 fb31 	bl	8009920 <__sinit>
 80092be:	4b8e      	ldr	r3, [pc, #568]	; (80094f8 <_vfiprintf_r+0x254>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	d11c      	bne.n	80092fe <_vfiprintf_r+0x5a>
 80092c4:	6874      	ldr	r4, [r6, #4]
 80092c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092c8:	07db      	lsls	r3, r3, #31
 80092ca:	d405      	bmi.n	80092d8 <_vfiprintf_r+0x34>
 80092cc:	89a3      	ldrh	r3, [r4, #12]
 80092ce:	059b      	lsls	r3, r3, #22
 80092d0:	d402      	bmi.n	80092d8 <_vfiprintf_r+0x34>
 80092d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092d4:	f000 fbc5 	bl	8009a62 <__retarget_lock_acquire_recursive>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	071b      	lsls	r3, r3, #28
 80092dc:	d502      	bpl.n	80092e4 <_vfiprintf_r+0x40>
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d11d      	bne.n	8009320 <_vfiprintf_r+0x7c>
 80092e4:	0021      	movs	r1, r4
 80092e6:	0030      	movs	r0, r6
 80092e8:	f000 f96c 	bl	80095c4 <__swsetup_r>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d017      	beq.n	8009320 <_vfiprintf_r+0x7c>
 80092f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092f2:	07db      	lsls	r3, r3, #31
 80092f4:	d50d      	bpl.n	8009312 <_vfiprintf_r+0x6e>
 80092f6:	2001      	movs	r0, #1
 80092f8:	4240      	negs	r0, r0
 80092fa:	b021      	add	sp, #132	; 0x84
 80092fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fe:	4b7f      	ldr	r3, [pc, #508]	; (80094fc <_vfiprintf_r+0x258>)
 8009300:	429c      	cmp	r4, r3
 8009302:	d101      	bne.n	8009308 <_vfiprintf_r+0x64>
 8009304:	68b4      	ldr	r4, [r6, #8]
 8009306:	e7de      	b.n	80092c6 <_vfiprintf_r+0x22>
 8009308:	4b7d      	ldr	r3, [pc, #500]	; (8009500 <_vfiprintf_r+0x25c>)
 800930a:	429c      	cmp	r4, r3
 800930c:	d1db      	bne.n	80092c6 <_vfiprintf_r+0x22>
 800930e:	68f4      	ldr	r4, [r6, #12]
 8009310:	e7d9      	b.n	80092c6 <_vfiprintf_r+0x22>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	059b      	lsls	r3, r3, #22
 8009316:	d4ee      	bmi.n	80092f6 <_vfiprintf_r+0x52>
 8009318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931a:	f000 fba3 	bl	8009a64 <__retarget_lock_release_recursive>
 800931e:	e7ea      	b.n	80092f6 <_vfiprintf_r+0x52>
 8009320:	2300      	movs	r3, #0
 8009322:	ad08      	add	r5, sp, #32
 8009324:	616b      	str	r3, [r5, #20]
 8009326:	3320      	adds	r3, #32
 8009328:	766b      	strb	r3, [r5, #25]
 800932a:	3310      	adds	r3, #16
 800932c:	76ab      	strb	r3, [r5, #26]
 800932e:	9707      	str	r7, [sp, #28]
 8009330:	9f03      	ldr	r7, [sp, #12]
 8009332:	783b      	ldrb	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d001      	beq.n	800933c <_vfiprintf_r+0x98>
 8009338:	2b25      	cmp	r3, #37	; 0x25
 800933a:	d14e      	bne.n	80093da <_vfiprintf_r+0x136>
 800933c:	9b03      	ldr	r3, [sp, #12]
 800933e:	1afb      	subs	r3, r7, r3
 8009340:	9305      	str	r3, [sp, #20]
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	429f      	cmp	r7, r3
 8009346:	d00d      	beq.n	8009364 <_vfiprintf_r+0xc0>
 8009348:	9b05      	ldr	r3, [sp, #20]
 800934a:	0021      	movs	r1, r4
 800934c:	0030      	movs	r0, r6
 800934e:	9a03      	ldr	r2, [sp, #12]
 8009350:	f7ff ff95 	bl	800927e <__sfputs_r>
 8009354:	1c43      	adds	r3, r0, #1
 8009356:	d100      	bne.n	800935a <_vfiprintf_r+0xb6>
 8009358:	e0b5      	b.n	80094c6 <_vfiprintf_r+0x222>
 800935a:	696a      	ldr	r2, [r5, #20]
 800935c:	9b05      	ldr	r3, [sp, #20]
 800935e:	4694      	mov	ip, r2
 8009360:	4463      	add	r3, ip
 8009362:	616b      	str	r3, [r5, #20]
 8009364:	783b      	ldrb	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d100      	bne.n	800936c <_vfiprintf_r+0xc8>
 800936a:	e0ac      	b.n	80094c6 <_vfiprintf_r+0x222>
 800936c:	2201      	movs	r2, #1
 800936e:	1c7b      	adds	r3, r7, #1
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	2300      	movs	r3, #0
 8009374:	4252      	negs	r2, r2
 8009376:	606a      	str	r2, [r5, #4]
 8009378:	a904      	add	r1, sp, #16
 800937a:	3254      	adds	r2, #84	; 0x54
 800937c:	1852      	adds	r2, r2, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	60eb      	str	r3, [r5, #12]
 8009382:	60ab      	str	r3, [r5, #8]
 8009384:	7013      	strb	r3, [r2, #0]
 8009386:	65ab      	str	r3, [r5, #88]	; 0x58
 8009388:	9b03      	ldr	r3, [sp, #12]
 800938a:	2205      	movs	r2, #5
 800938c:	7819      	ldrb	r1, [r3, #0]
 800938e:	485d      	ldr	r0, [pc, #372]	; (8009504 <_vfiprintf_r+0x260>)
 8009390:	f7ff fed6 	bl	8009140 <memchr>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1c5f      	adds	r7, r3, #1
 8009398:	2800      	cmp	r0, #0
 800939a:	d120      	bne.n	80093de <_vfiprintf_r+0x13a>
 800939c:	682a      	ldr	r2, [r5, #0]
 800939e:	06d3      	lsls	r3, r2, #27
 80093a0:	d504      	bpl.n	80093ac <_vfiprintf_r+0x108>
 80093a2:	2353      	movs	r3, #83	; 0x53
 80093a4:	a904      	add	r1, sp, #16
 80093a6:	185b      	adds	r3, r3, r1
 80093a8:	2120      	movs	r1, #32
 80093aa:	7019      	strb	r1, [r3, #0]
 80093ac:	0713      	lsls	r3, r2, #28
 80093ae:	d504      	bpl.n	80093ba <_vfiprintf_r+0x116>
 80093b0:	2353      	movs	r3, #83	; 0x53
 80093b2:	a904      	add	r1, sp, #16
 80093b4:	185b      	adds	r3, r3, r1
 80093b6:	212b      	movs	r1, #43	; 0x2b
 80093b8:	7019      	strb	r1, [r3, #0]
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b2a      	cmp	r3, #42	; 0x2a
 80093c0:	d016      	beq.n	80093f0 <_vfiprintf_r+0x14c>
 80093c2:	2100      	movs	r1, #0
 80093c4:	68eb      	ldr	r3, [r5, #12]
 80093c6:	9f03      	ldr	r7, [sp, #12]
 80093c8:	783a      	ldrb	r2, [r7, #0]
 80093ca:	1c78      	adds	r0, r7, #1
 80093cc:	3a30      	subs	r2, #48	; 0x30
 80093ce:	4684      	mov	ip, r0
 80093d0:	2a09      	cmp	r2, #9
 80093d2:	d94f      	bls.n	8009474 <_vfiprintf_r+0x1d0>
 80093d4:	2900      	cmp	r1, #0
 80093d6:	d111      	bne.n	80093fc <_vfiprintf_r+0x158>
 80093d8:	e017      	b.n	800940a <_vfiprintf_r+0x166>
 80093da:	3701      	adds	r7, #1
 80093dc:	e7a9      	b.n	8009332 <_vfiprintf_r+0x8e>
 80093de:	4b49      	ldr	r3, [pc, #292]	; (8009504 <_vfiprintf_r+0x260>)
 80093e0:	682a      	ldr	r2, [r5, #0]
 80093e2:	1ac0      	subs	r0, r0, r3
 80093e4:	2301      	movs	r3, #1
 80093e6:	4083      	lsls	r3, r0
 80093e8:	4313      	orrs	r3, r2
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	9703      	str	r7, [sp, #12]
 80093ee:	e7cb      	b.n	8009388 <_vfiprintf_r+0xe4>
 80093f0:	9b07      	ldr	r3, [sp, #28]
 80093f2:	1d19      	adds	r1, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	9107      	str	r1, [sp, #28]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	db01      	blt.n	8009400 <_vfiprintf_r+0x15c>
 80093fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80093fe:	e004      	b.n	800940a <_vfiprintf_r+0x166>
 8009400:	425b      	negs	r3, r3
 8009402:	60eb      	str	r3, [r5, #12]
 8009404:	2302      	movs	r3, #2
 8009406:	4313      	orrs	r3, r2
 8009408:	602b      	str	r3, [r5, #0]
 800940a:	783b      	ldrb	r3, [r7, #0]
 800940c:	2b2e      	cmp	r3, #46	; 0x2e
 800940e:	d10a      	bne.n	8009426 <_vfiprintf_r+0x182>
 8009410:	787b      	ldrb	r3, [r7, #1]
 8009412:	2b2a      	cmp	r3, #42	; 0x2a
 8009414:	d137      	bne.n	8009486 <_vfiprintf_r+0x1e2>
 8009416:	9b07      	ldr	r3, [sp, #28]
 8009418:	3702      	adds	r7, #2
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	9207      	str	r2, [sp, #28]
 8009420:	2b00      	cmp	r3, #0
 8009422:	db2d      	blt.n	8009480 <_vfiprintf_r+0x1dc>
 8009424:	9309      	str	r3, [sp, #36]	; 0x24
 8009426:	2203      	movs	r2, #3
 8009428:	7839      	ldrb	r1, [r7, #0]
 800942a:	4837      	ldr	r0, [pc, #220]	; (8009508 <_vfiprintf_r+0x264>)
 800942c:	f7ff fe88 	bl	8009140 <memchr>
 8009430:	2800      	cmp	r0, #0
 8009432:	d007      	beq.n	8009444 <_vfiprintf_r+0x1a0>
 8009434:	4b34      	ldr	r3, [pc, #208]	; (8009508 <_vfiprintf_r+0x264>)
 8009436:	682a      	ldr	r2, [r5, #0]
 8009438:	1ac0      	subs	r0, r0, r3
 800943a:	2340      	movs	r3, #64	; 0x40
 800943c:	4083      	lsls	r3, r0
 800943e:	4313      	orrs	r3, r2
 8009440:	3701      	adds	r7, #1
 8009442:	602b      	str	r3, [r5, #0]
 8009444:	7839      	ldrb	r1, [r7, #0]
 8009446:	1c7b      	adds	r3, r7, #1
 8009448:	2206      	movs	r2, #6
 800944a:	4830      	ldr	r0, [pc, #192]	; (800950c <_vfiprintf_r+0x268>)
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	7629      	strb	r1, [r5, #24]
 8009450:	f7ff fe76 	bl	8009140 <memchr>
 8009454:	2800      	cmp	r0, #0
 8009456:	d045      	beq.n	80094e4 <_vfiprintf_r+0x240>
 8009458:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <_vfiprintf_r+0x26c>)
 800945a:	2b00      	cmp	r3, #0
 800945c:	d127      	bne.n	80094ae <_vfiprintf_r+0x20a>
 800945e:	2207      	movs	r2, #7
 8009460:	9b07      	ldr	r3, [sp, #28]
 8009462:	3307      	adds	r3, #7
 8009464:	4393      	bics	r3, r2
 8009466:	3308      	adds	r3, #8
 8009468:	9307      	str	r3, [sp, #28]
 800946a:	696b      	ldr	r3, [r5, #20]
 800946c:	9a04      	ldr	r2, [sp, #16]
 800946e:	189b      	adds	r3, r3, r2
 8009470:	616b      	str	r3, [r5, #20]
 8009472:	e75d      	b.n	8009330 <_vfiprintf_r+0x8c>
 8009474:	210a      	movs	r1, #10
 8009476:	434b      	muls	r3, r1
 8009478:	4667      	mov	r7, ip
 800947a:	189b      	adds	r3, r3, r2
 800947c:	3909      	subs	r1, #9
 800947e:	e7a3      	b.n	80093c8 <_vfiprintf_r+0x124>
 8009480:	2301      	movs	r3, #1
 8009482:	425b      	negs	r3, r3
 8009484:	e7ce      	b.n	8009424 <_vfiprintf_r+0x180>
 8009486:	2300      	movs	r3, #0
 8009488:	001a      	movs	r2, r3
 800948a:	3701      	adds	r7, #1
 800948c:	606b      	str	r3, [r5, #4]
 800948e:	7839      	ldrb	r1, [r7, #0]
 8009490:	1c78      	adds	r0, r7, #1
 8009492:	3930      	subs	r1, #48	; 0x30
 8009494:	4684      	mov	ip, r0
 8009496:	2909      	cmp	r1, #9
 8009498:	d903      	bls.n	80094a2 <_vfiprintf_r+0x1fe>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c3      	beq.n	8009426 <_vfiprintf_r+0x182>
 800949e:	9209      	str	r2, [sp, #36]	; 0x24
 80094a0:	e7c1      	b.n	8009426 <_vfiprintf_r+0x182>
 80094a2:	230a      	movs	r3, #10
 80094a4:	435a      	muls	r2, r3
 80094a6:	4667      	mov	r7, ip
 80094a8:	1852      	adds	r2, r2, r1
 80094aa:	3b09      	subs	r3, #9
 80094ac:	e7ef      	b.n	800948e <_vfiprintf_r+0x1ea>
 80094ae:	ab07      	add	r3, sp, #28
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	0022      	movs	r2, r4
 80094b4:	0029      	movs	r1, r5
 80094b6:	0030      	movs	r0, r6
 80094b8:	4b16      	ldr	r3, [pc, #88]	; (8009514 <_vfiprintf_r+0x270>)
 80094ba:	e000      	b.n	80094be <_vfiprintf_r+0x21a>
 80094bc:	bf00      	nop
 80094be:	9004      	str	r0, [sp, #16]
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	3301      	adds	r3, #1
 80094c4:	d1d1      	bne.n	800946a <_vfiprintf_r+0x1c6>
 80094c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094c8:	07db      	lsls	r3, r3, #31
 80094ca:	d405      	bmi.n	80094d8 <_vfiprintf_r+0x234>
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	059b      	lsls	r3, r3, #22
 80094d0:	d402      	bmi.n	80094d8 <_vfiprintf_r+0x234>
 80094d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094d4:	f000 fac6 	bl	8009a64 <__retarget_lock_release_recursive>
 80094d8:	89a3      	ldrh	r3, [r4, #12]
 80094da:	065b      	lsls	r3, r3, #25
 80094dc:	d500      	bpl.n	80094e0 <_vfiprintf_r+0x23c>
 80094de:	e70a      	b.n	80092f6 <_vfiprintf_r+0x52>
 80094e0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80094e2:	e70a      	b.n	80092fa <_vfiprintf_r+0x56>
 80094e4:	ab07      	add	r3, sp, #28
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	0022      	movs	r2, r4
 80094ea:	0029      	movs	r1, r5
 80094ec:	0030      	movs	r0, r6
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <_vfiprintf_r+0x270>)
 80094f0:	f7fe fe18 	bl	8008124 <_printf_i>
 80094f4:	e7e3      	b.n	80094be <_vfiprintf_r+0x21a>
 80094f6:	46c0      	nop			; (mov r8, r8)
 80094f8:	0800a13c 	.word	0x0800a13c
 80094fc:	0800a15c 	.word	0x0800a15c
 8009500:	0800a11c 	.word	0x0800a11c
 8009504:	0800a03c 	.word	0x0800a03c
 8009508:	0800a042 	.word	0x0800a042
 800950c:	0800a046 	.word	0x0800a046
 8009510:	00000000 	.word	0x00000000
 8009514:	0800927f 	.word	0x0800927f

08009518 <__swbuf_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	0005      	movs	r5, r0
 800951c:	000e      	movs	r6, r1
 800951e:	0014      	movs	r4, r2
 8009520:	2800      	cmp	r0, #0
 8009522:	d004      	beq.n	800952e <__swbuf_r+0x16>
 8009524:	6983      	ldr	r3, [r0, #24]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <__swbuf_r+0x16>
 800952a:	f000 f9f9 	bl	8009920 <__sinit>
 800952e:	4b22      	ldr	r3, [pc, #136]	; (80095b8 <__swbuf_r+0xa0>)
 8009530:	429c      	cmp	r4, r3
 8009532:	d12e      	bne.n	8009592 <__swbuf_r+0x7a>
 8009534:	686c      	ldr	r4, [r5, #4]
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	60a3      	str	r3, [r4, #8]
 800953a:	89a3      	ldrh	r3, [r4, #12]
 800953c:	071b      	lsls	r3, r3, #28
 800953e:	d532      	bpl.n	80095a6 <__swbuf_r+0x8e>
 8009540:	6923      	ldr	r3, [r4, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d02f      	beq.n	80095a6 <__swbuf_r+0x8e>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	6922      	ldr	r2, [r4, #16]
 800954a:	b2f7      	uxtb	r7, r6
 800954c:	1a98      	subs	r0, r3, r2
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	b2f6      	uxtb	r6, r6
 8009552:	4283      	cmp	r3, r0
 8009554:	dc05      	bgt.n	8009562 <__swbuf_r+0x4a>
 8009556:	0021      	movs	r1, r4
 8009558:	0028      	movs	r0, r5
 800955a:	f000 f93f 	bl	80097dc <_fflush_r>
 800955e:	2800      	cmp	r0, #0
 8009560:	d127      	bne.n	80095b2 <__swbuf_r+0x9a>
 8009562:	68a3      	ldr	r3, [r4, #8]
 8009564:	3001      	adds	r0, #1
 8009566:	3b01      	subs	r3, #1
 8009568:	60a3      	str	r3, [r4, #8]
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	6022      	str	r2, [r4, #0]
 8009570:	701f      	strb	r7, [r3, #0]
 8009572:	6963      	ldr	r3, [r4, #20]
 8009574:	4283      	cmp	r3, r0
 8009576:	d004      	beq.n	8009582 <__swbuf_r+0x6a>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	07db      	lsls	r3, r3, #31
 800957c:	d507      	bpl.n	800958e <__swbuf_r+0x76>
 800957e:	2e0a      	cmp	r6, #10
 8009580:	d105      	bne.n	800958e <__swbuf_r+0x76>
 8009582:	0021      	movs	r1, r4
 8009584:	0028      	movs	r0, r5
 8009586:	f000 f929 	bl	80097dc <_fflush_r>
 800958a:	2800      	cmp	r0, #0
 800958c:	d111      	bne.n	80095b2 <__swbuf_r+0x9a>
 800958e:	0030      	movs	r0, r6
 8009590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <__swbuf_r+0xa4>)
 8009594:	429c      	cmp	r4, r3
 8009596:	d101      	bne.n	800959c <__swbuf_r+0x84>
 8009598:	68ac      	ldr	r4, [r5, #8]
 800959a:	e7cc      	b.n	8009536 <__swbuf_r+0x1e>
 800959c:	4b08      	ldr	r3, [pc, #32]	; (80095c0 <__swbuf_r+0xa8>)
 800959e:	429c      	cmp	r4, r3
 80095a0:	d1c9      	bne.n	8009536 <__swbuf_r+0x1e>
 80095a2:	68ec      	ldr	r4, [r5, #12]
 80095a4:	e7c7      	b.n	8009536 <__swbuf_r+0x1e>
 80095a6:	0021      	movs	r1, r4
 80095a8:	0028      	movs	r0, r5
 80095aa:	f000 f80b 	bl	80095c4 <__swsetup_r>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d0c9      	beq.n	8009546 <__swbuf_r+0x2e>
 80095b2:	2601      	movs	r6, #1
 80095b4:	4276      	negs	r6, r6
 80095b6:	e7ea      	b.n	800958e <__swbuf_r+0x76>
 80095b8:	0800a13c 	.word	0x0800a13c
 80095bc:	0800a15c 	.word	0x0800a15c
 80095c0:	0800a11c 	.word	0x0800a11c

080095c4 <__swsetup_r>:
 80095c4:	4b37      	ldr	r3, [pc, #220]	; (80096a4 <__swsetup_r+0xe0>)
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	681d      	ldr	r5, [r3, #0]
 80095ca:	0006      	movs	r6, r0
 80095cc:	000c      	movs	r4, r1
 80095ce:	2d00      	cmp	r5, #0
 80095d0:	d005      	beq.n	80095de <__swsetup_r+0x1a>
 80095d2:	69ab      	ldr	r3, [r5, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <__swsetup_r+0x1a>
 80095d8:	0028      	movs	r0, r5
 80095da:	f000 f9a1 	bl	8009920 <__sinit>
 80095de:	4b32      	ldr	r3, [pc, #200]	; (80096a8 <__swsetup_r+0xe4>)
 80095e0:	429c      	cmp	r4, r3
 80095e2:	d10f      	bne.n	8009604 <__swsetup_r+0x40>
 80095e4:	686c      	ldr	r4, [r5, #4]
 80095e6:	230c      	movs	r3, #12
 80095e8:	5ee2      	ldrsh	r2, [r4, r3]
 80095ea:	b293      	uxth	r3, r2
 80095ec:	0711      	lsls	r1, r2, #28
 80095ee:	d42d      	bmi.n	800964c <__swsetup_r+0x88>
 80095f0:	06d9      	lsls	r1, r3, #27
 80095f2:	d411      	bmi.n	8009618 <__swsetup_r+0x54>
 80095f4:	2309      	movs	r3, #9
 80095f6:	2001      	movs	r0, #1
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	3337      	adds	r3, #55	; 0x37
 80095fc:	4313      	orrs	r3, r2
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	4240      	negs	r0, r0
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	4b29      	ldr	r3, [pc, #164]	; (80096ac <__swsetup_r+0xe8>)
 8009606:	429c      	cmp	r4, r3
 8009608:	d101      	bne.n	800960e <__swsetup_r+0x4a>
 800960a:	68ac      	ldr	r4, [r5, #8]
 800960c:	e7eb      	b.n	80095e6 <__swsetup_r+0x22>
 800960e:	4b28      	ldr	r3, [pc, #160]	; (80096b0 <__swsetup_r+0xec>)
 8009610:	429c      	cmp	r4, r3
 8009612:	d1e8      	bne.n	80095e6 <__swsetup_r+0x22>
 8009614:	68ec      	ldr	r4, [r5, #12]
 8009616:	e7e6      	b.n	80095e6 <__swsetup_r+0x22>
 8009618:	075b      	lsls	r3, r3, #29
 800961a:	d513      	bpl.n	8009644 <__swsetup_r+0x80>
 800961c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800961e:	2900      	cmp	r1, #0
 8009620:	d008      	beq.n	8009634 <__swsetup_r+0x70>
 8009622:	0023      	movs	r3, r4
 8009624:	3344      	adds	r3, #68	; 0x44
 8009626:	4299      	cmp	r1, r3
 8009628:	d002      	beq.n	8009630 <__swsetup_r+0x6c>
 800962a:	0030      	movs	r0, r6
 800962c:	f7ff fdc0 	bl	80091b0 <_free_r>
 8009630:	2300      	movs	r3, #0
 8009632:	6363      	str	r3, [r4, #52]	; 0x34
 8009634:	2224      	movs	r2, #36	; 0x24
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	4393      	bics	r3, r2
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	2300      	movs	r3, #0
 800963e:	6063      	str	r3, [r4, #4]
 8009640:	6923      	ldr	r3, [r4, #16]
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	2308      	movs	r3, #8
 8009646:	89a2      	ldrh	r2, [r4, #12]
 8009648:	4313      	orrs	r3, r2
 800964a:	81a3      	strh	r3, [r4, #12]
 800964c:	6923      	ldr	r3, [r4, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d10b      	bne.n	800966a <__swsetup_r+0xa6>
 8009652:	21a0      	movs	r1, #160	; 0xa0
 8009654:	2280      	movs	r2, #128	; 0x80
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	0089      	lsls	r1, r1, #2
 800965a:	0092      	lsls	r2, r2, #2
 800965c:	400b      	ands	r3, r1
 800965e:	4293      	cmp	r3, r2
 8009660:	d003      	beq.n	800966a <__swsetup_r+0xa6>
 8009662:	0021      	movs	r1, r4
 8009664:	0030      	movs	r0, r6
 8009666:	f000 fa27 	bl	8009ab8 <__smakebuf_r>
 800966a:	220c      	movs	r2, #12
 800966c:	5ea3      	ldrsh	r3, [r4, r2]
 800966e:	2001      	movs	r0, #1
 8009670:	001a      	movs	r2, r3
 8009672:	b299      	uxth	r1, r3
 8009674:	4002      	ands	r2, r0
 8009676:	4203      	tst	r3, r0
 8009678:	d00f      	beq.n	800969a <__swsetup_r+0xd6>
 800967a:	2200      	movs	r2, #0
 800967c:	60a2      	str	r2, [r4, #8]
 800967e:	6962      	ldr	r2, [r4, #20]
 8009680:	4252      	negs	r2, r2
 8009682:	61a2      	str	r2, [r4, #24]
 8009684:	2000      	movs	r0, #0
 8009686:	6922      	ldr	r2, [r4, #16]
 8009688:	4282      	cmp	r2, r0
 800968a:	d1ba      	bne.n	8009602 <__swsetup_r+0x3e>
 800968c:	060a      	lsls	r2, r1, #24
 800968e:	d5b8      	bpl.n	8009602 <__swsetup_r+0x3e>
 8009690:	2240      	movs	r2, #64	; 0x40
 8009692:	4313      	orrs	r3, r2
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	3801      	subs	r0, #1
 8009698:	e7b3      	b.n	8009602 <__swsetup_r+0x3e>
 800969a:	0788      	lsls	r0, r1, #30
 800969c:	d400      	bmi.n	80096a0 <__swsetup_r+0xdc>
 800969e:	6962      	ldr	r2, [r4, #20]
 80096a0:	60a2      	str	r2, [r4, #8]
 80096a2:	e7ef      	b.n	8009684 <__swsetup_r+0xc0>
 80096a4:	20000010 	.word	0x20000010
 80096a8:	0800a13c 	.word	0x0800a13c
 80096ac:	0800a15c 	.word	0x0800a15c
 80096b0:	0800a11c 	.word	0x0800a11c

080096b4 <abort>:
 80096b4:	2006      	movs	r0, #6
 80096b6:	b510      	push	{r4, lr}
 80096b8:	f000 fa6c 	bl	8009b94 <raise>
 80096bc:	2001      	movs	r0, #1
 80096be:	f7fa fe75 	bl	80043ac <_exit>
	...

080096c4 <__sflush_r>:
 80096c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096c6:	898b      	ldrh	r3, [r1, #12]
 80096c8:	0005      	movs	r5, r0
 80096ca:	000c      	movs	r4, r1
 80096cc:	071a      	lsls	r2, r3, #28
 80096ce:	d45f      	bmi.n	8009790 <__sflush_r+0xcc>
 80096d0:	684a      	ldr	r2, [r1, #4]
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	dc04      	bgt.n	80096e0 <__sflush_r+0x1c>
 80096d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80096d8:	2a00      	cmp	r2, #0
 80096da:	dc01      	bgt.n	80096e0 <__sflush_r+0x1c>
 80096dc:	2000      	movs	r0, #0
 80096de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80096e2:	2f00      	cmp	r7, #0
 80096e4:	d0fa      	beq.n	80096dc <__sflush_r+0x18>
 80096e6:	2200      	movs	r2, #0
 80096e8:	2180      	movs	r1, #128	; 0x80
 80096ea:	682e      	ldr	r6, [r5, #0]
 80096ec:	602a      	str	r2, [r5, #0]
 80096ee:	001a      	movs	r2, r3
 80096f0:	0149      	lsls	r1, r1, #5
 80096f2:	400a      	ands	r2, r1
 80096f4:	420b      	tst	r3, r1
 80096f6:	d034      	beq.n	8009762 <__sflush_r+0x9e>
 80096f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	075b      	lsls	r3, r3, #29
 80096fe:	d506      	bpl.n	800970e <__sflush_r+0x4a>
 8009700:	6863      	ldr	r3, [r4, #4]
 8009702:	1ac0      	subs	r0, r0, r3
 8009704:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <__sflush_r+0x4a>
 800970a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800970c:	1ac0      	subs	r0, r0, r3
 800970e:	0002      	movs	r2, r0
 8009710:	6a21      	ldr	r1, [r4, #32]
 8009712:	2300      	movs	r3, #0
 8009714:	0028      	movs	r0, r5
 8009716:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009718:	47b8      	blx	r7
 800971a:	89a1      	ldrh	r1, [r4, #12]
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d106      	bne.n	800972e <__sflush_r+0x6a>
 8009720:	682b      	ldr	r3, [r5, #0]
 8009722:	2b1d      	cmp	r3, #29
 8009724:	d831      	bhi.n	800978a <__sflush_r+0xc6>
 8009726:	4a2c      	ldr	r2, [pc, #176]	; (80097d8 <__sflush_r+0x114>)
 8009728:	40da      	lsrs	r2, r3
 800972a:	07d3      	lsls	r3, r2, #31
 800972c:	d52d      	bpl.n	800978a <__sflush_r+0xc6>
 800972e:	2300      	movs	r3, #0
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	6923      	ldr	r3, [r4, #16]
 8009734:	6023      	str	r3, [r4, #0]
 8009736:	04cb      	lsls	r3, r1, #19
 8009738:	d505      	bpl.n	8009746 <__sflush_r+0x82>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	d102      	bne.n	8009744 <__sflush_r+0x80>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d100      	bne.n	8009746 <__sflush_r+0x82>
 8009744:	6560      	str	r0, [r4, #84]	; 0x54
 8009746:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009748:	602e      	str	r6, [r5, #0]
 800974a:	2900      	cmp	r1, #0
 800974c:	d0c6      	beq.n	80096dc <__sflush_r+0x18>
 800974e:	0023      	movs	r3, r4
 8009750:	3344      	adds	r3, #68	; 0x44
 8009752:	4299      	cmp	r1, r3
 8009754:	d002      	beq.n	800975c <__sflush_r+0x98>
 8009756:	0028      	movs	r0, r5
 8009758:	f7ff fd2a 	bl	80091b0 <_free_r>
 800975c:	2000      	movs	r0, #0
 800975e:	6360      	str	r0, [r4, #52]	; 0x34
 8009760:	e7bd      	b.n	80096de <__sflush_r+0x1a>
 8009762:	2301      	movs	r3, #1
 8009764:	0028      	movs	r0, r5
 8009766:	6a21      	ldr	r1, [r4, #32]
 8009768:	47b8      	blx	r7
 800976a:	1c43      	adds	r3, r0, #1
 800976c:	d1c5      	bne.n	80096fa <__sflush_r+0x36>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0c2      	beq.n	80096fa <__sflush_r+0x36>
 8009774:	2b1d      	cmp	r3, #29
 8009776:	d001      	beq.n	800977c <__sflush_r+0xb8>
 8009778:	2b16      	cmp	r3, #22
 800977a:	d101      	bne.n	8009780 <__sflush_r+0xbc>
 800977c:	602e      	str	r6, [r5, #0]
 800977e:	e7ad      	b.n	80096dc <__sflush_r+0x18>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	89a2      	ldrh	r2, [r4, #12]
 8009784:	4313      	orrs	r3, r2
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	e7a9      	b.n	80096de <__sflush_r+0x1a>
 800978a:	2340      	movs	r3, #64	; 0x40
 800978c:	430b      	orrs	r3, r1
 800978e:	e7fa      	b.n	8009786 <__sflush_r+0xc2>
 8009790:	690f      	ldr	r7, [r1, #16]
 8009792:	2f00      	cmp	r7, #0
 8009794:	d0a2      	beq.n	80096dc <__sflush_r+0x18>
 8009796:	680a      	ldr	r2, [r1, #0]
 8009798:	600f      	str	r7, [r1, #0]
 800979a:	1bd2      	subs	r2, r2, r7
 800979c:	9201      	str	r2, [sp, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	079b      	lsls	r3, r3, #30
 80097a2:	d100      	bne.n	80097a6 <__sflush_r+0xe2>
 80097a4:	694a      	ldr	r2, [r1, #20]
 80097a6:	60a2      	str	r2, [r4, #8]
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dc00      	bgt.n	80097b0 <__sflush_r+0xec>
 80097ae:	e795      	b.n	80096dc <__sflush_r+0x18>
 80097b0:	003a      	movs	r2, r7
 80097b2:	0028      	movs	r0, r5
 80097b4:	9b01      	ldr	r3, [sp, #4]
 80097b6:	6a21      	ldr	r1, [r4, #32]
 80097b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097ba:	47b0      	blx	r6
 80097bc:	2800      	cmp	r0, #0
 80097be:	dc06      	bgt.n	80097ce <__sflush_r+0x10a>
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	2001      	movs	r0, #1
 80097c4:	89a2      	ldrh	r2, [r4, #12]
 80097c6:	4240      	negs	r0, r0
 80097c8:	4313      	orrs	r3, r2
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	e787      	b.n	80096de <__sflush_r+0x1a>
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	183f      	adds	r7, r7, r0
 80097d2:	1a1b      	subs	r3, r3, r0
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	e7e7      	b.n	80097a8 <__sflush_r+0xe4>
 80097d8:	20400001 	.word	0x20400001

080097dc <_fflush_r>:
 80097dc:	690b      	ldr	r3, [r1, #16]
 80097de:	b570      	push	{r4, r5, r6, lr}
 80097e0:	0005      	movs	r5, r0
 80097e2:	000c      	movs	r4, r1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <_fflush_r+0x12>
 80097e8:	2500      	movs	r5, #0
 80097ea:	0028      	movs	r0, r5
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d004      	beq.n	80097fc <_fflush_r+0x20>
 80097f2:	6983      	ldr	r3, [r0, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <_fflush_r+0x20>
 80097f8:	f000 f892 	bl	8009920 <__sinit>
 80097fc:	4b14      	ldr	r3, [pc, #80]	; (8009850 <_fflush_r+0x74>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d11b      	bne.n	800983a <_fflush_r+0x5e>
 8009802:	686c      	ldr	r4, [r5, #4]
 8009804:	220c      	movs	r2, #12
 8009806:	5ea3      	ldrsh	r3, [r4, r2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0ed      	beq.n	80097e8 <_fflush_r+0xc>
 800980c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800980e:	07d2      	lsls	r2, r2, #31
 8009810:	d404      	bmi.n	800981c <_fflush_r+0x40>
 8009812:	059b      	lsls	r3, r3, #22
 8009814:	d402      	bmi.n	800981c <_fflush_r+0x40>
 8009816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009818:	f000 f923 	bl	8009a62 <__retarget_lock_acquire_recursive>
 800981c:	0028      	movs	r0, r5
 800981e:	0021      	movs	r1, r4
 8009820:	f7ff ff50 	bl	80096c4 <__sflush_r>
 8009824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009826:	0005      	movs	r5, r0
 8009828:	07db      	lsls	r3, r3, #31
 800982a:	d4de      	bmi.n	80097ea <_fflush_r+0xe>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	059b      	lsls	r3, r3, #22
 8009830:	d4db      	bmi.n	80097ea <_fflush_r+0xe>
 8009832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009834:	f000 f916 	bl	8009a64 <__retarget_lock_release_recursive>
 8009838:	e7d7      	b.n	80097ea <_fflush_r+0xe>
 800983a:	4b06      	ldr	r3, [pc, #24]	; (8009854 <_fflush_r+0x78>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d101      	bne.n	8009844 <_fflush_r+0x68>
 8009840:	68ac      	ldr	r4, [r5, #8]
 8009842:	e7df      	b.n	8009804 <_fflush_r+0x28>
 8009844:	4b04      	ldr	r3, [pc, #16]	; (8009858 <_fflush_r+0x7c>)
 8009846:	429c      	cmp	r4, r3
 8009848:	d1dc      	bne.n	8009804 <_fflush_r+0x28>
 800984a:	68ec      	ldr	r4, [r5, #12]
 800984c:	e7da      	b.n	8009804 <_fflush_r+0x28>
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	0800a13c 	.word	0x0800a13c
 8009854:	0800a15c 	.word	0x0800a15c
 8009858:	0800a11c 	.word	0x0800a11c

0800985c <std>:
 800985c:	2300      	movs	r3, #0
 800985e:	b510      	push	{r4, lr}
 8009860:	0004      	movs	r4, r0
 8009862:	6003      	str	r3, [r0, #0]
 8009864:	6043      	str	r3, [r0, #4]
 8009866:	6083      	str	r3, [r0, #8]
 8009868:	8181      	strh	r1, [r0, #12]
 800986a:	6643      	str	r3, [r0, #100]	; 0x64
 800986c:	0019      	movs	r1, r3
 800986e:	81c2      	strh	r2, [r0, #14]
 8009870:	6103      	str	r3, [r0, #16]
 8009872:	6143      	str	r3, [r0, #20]
 8009874:	6183      	str	r3, [r0, #24]
 8009876:	2208      	movs	r2, #8
 8009878:	305c      	adds	r0, #92	; 0x5c
 800987a:	f7fd fcc1 	bl	8007200 <memset>
 800987e:	4b05      	ldr	r3, [pc, #20]	; (8009894 <std+0x38>)
 8009880:	6263      	str	r3, [r4, #36]	; 0x24
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <std+0x3c>)
 8009884:	6224      	str	r4, [r4, #32]
 8009886:	62a3      	str	r3, [r4, #40]	; 0x28
 8009888:	4b04      	ldr	r3, [pc, #16]	; (800989c <std+0x40>)
 800988a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800988c:	4b04      	ldr	r3, [pc, #16]	; (80098a0 <std+0x44>)
 800988e:	6323      	str	r3, [r4, #48]	; 0x30
 8009890:	bd10      	pop	{r4, pc}
 8009892:	46c0      	nop			; (mov r8, r8)
 8009894:	08009bd5 	.word	0x08009bd5
 8009898:	08009bfd 	.word	0x08009bfd
 800989c:	08009c35 	.word	0x08009c35
 80098a0:	08009c61 	.word	0x08009c61

080098a4 <_cleanup_r>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4902      	ldr	r1, [pc, #8]	; (80098b0 <_cleanup_r+0xc>)
 80098a8:	f000 f8ba 	bl	8009a20 <_fwalk_reent>
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	080097dd 	.word	0x080097dd

080098b4 <__sfmoreglue>:
 80098b4:	b570      	push	{r4, r5, r6, lr}
 80098b6:	2568      	movs	r5, #104	; 0x68
 80098b8:	1e4a      	subs	r2, r1, #1
 80098ba:	4355      	muls	r5, r2
 80098bc:	000e      	movs	r6, r1
 80098be:	0029      	movs	r1, r5
 80098c0:	3174      	adds	r1, #116	; 0x74
 80098c2:	f7fe f9d9 	bl	8007c78 <_malloc_r>
 80098c6:	1e04      	subs	r4, r0, #0
 80098c8:	d008      	beq.n	80098dc <__sfmoreglue+0x28>
 80098ca:	2100      	movs	r1, #0
 80098cc:	002a      	movs	r2, r5
 80098ce:	6001      	str	r1, [r0, #0]
 80098d0:	6046      	str	r6, [r0, #4]
 80098d2:	300c      	adds	r0, #12
 80098d4:	60a0      	str	r0, [r4, #8]
 80098d6:	3268      	adds	r2, #104	; 0x68
 80098d8:	f7fd fc92 	bl	8007200 <memset>
 80098dc:	0020      	movs	r0, r4
 80098de:	bd70      	pop	{r4, r5, r6, pc}

080098e0 <__sfp_lock_acquire>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	4802      	ldr	r0, [pc, #8]	; (80098ec <__sfp_lock_acquire+0xc>)
 80098e4:	f000 f8bd 	bl	8009a62 <__retarget_lock_acquire_recursive>
 80098e8:	bd10      	pop	{r4, pc}
 80098ea:	46c0      	nop			; (mov r8, r8)
 80098ec:	20000290 	.word	0x20000290

080098f0 <__sfp_lock_release>:
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4802      	ldr	r0, [pc, #8]	; (80098fc <__sfp_lock_release+0xc>)
 80098f4:	f000 f8b6 	bl	8009a64 <__retarget_lock_release_recursive>
 80098f8:	bd10      	pop	{r4, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	20000290 	.word	0x20000290

08009900 <__sinit_lock_acquire>:
 8009900:	b510      	push	{r4, lr}
 8009902:	4802      	ldr	r0, [pc, #8]	; (800990c <__sinit_lock_acquire+0xc>)
 8009904:	f000 f8ad 	bl	8009a62 <__retarget_lock_acquire_recursive>
 8009908:	bd10      	pop	{r4, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	2000028b 	.word	0x2000028b

08009910 <__sinit_lock_release>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4802      	ldr	r0, [pc, #8]	; (800991c <__sinit_lock_release+0xc>)
 8009914:	f000 f8a6 	bl	8009a64 <__retarget_lock_release_recursive>
 8009918:	bd10      	pop	{r4, pc}
 800991a:	46c0      	nop			; (mov r8, r8)
 800991c:	2000028b 	.word	0x2000028b

08009920 <__sinit>:
 8009920:	b513      	push	{r0, r1, r4, lr}
 8009922:	0004      	movs	r4, r0
 8009924:	f7ff ffec 	bl	8009900 <__sinit_lock_acquire>
 8009928:	69a3      	ldr	r3, [r4, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <__sinit+0x14>
 800992e:	f7ff ffef 	bl	8009910 <__sinit_lock_release>
 8009932:	bd13      	pop	{r0, r1, r4, pc}
 8009934:	64a3      	str	r3, [r4, #72]	; 0x48
 8009936:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009938:	6523      	str	r3, [r4, #80]	; 0x50
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <__sinit+0x68>)
 800993c:	4a13      	ldr	r2, [pc, #76]	; (800998c <__sinit+0x6c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	62a2      	str	r2, [r4, #40]	; 0x28
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	42a3      	cmp	r3, r4
 8009946:	d101      	bne.n	800994c <__sinit+0x2c>
 8009948:	2301      	movs	r3, #1
 800994a:	61a3      	str	r3, [r4, #24]
 800994c:	0020      	movs	r0, r4
 800994e:	f000 f81f 	bl	8009990 <__sfp>
 8009952:	6060      	str	r0, [r4, #4]
 8009954:	0020      	movs	r0, r4
 8009956:	f000 f81b 	bl	8009990 <__sfp>
 800995a:	60a0      	str	r0, [r4, #8]
 800995c:	0020      	movs	r0, r4
 800995e:	f000 f817 	bl	8009990 <__sfp>
 8009962:	2200      	movs	r2, #0
 8009964:	2104      	movs	r1, #4
 8009966:	60e0      	str	r0, [r4, #12]
 8009968:	6860      	ldr	r0, [r4, #4]
 800996a:	f7ff ff77 	bl	800985c <std>
 800996e:	2201      	movs	r2, #1
 8009970:	2109      	movs	r1, #9
 8009972:	68a0      	ldr	r0, [r4, #8]
 8009974:	f7ff ff72 	bl	800985c <std>
 8009978:	2202      	movs	r2, #2
 800997a:	2112      	movs	r1, #18
 800997c:	68e0      	ldr	r0, [r4, #12]
 800997e:	f7ff ff6d 	bl	800985c <std>
 8009982:	2301      	movs	r3, #1
 8009984:	61a3      	str	r3, [r4, #24]
 8009986:	e7d2      	b.n	800992e <__sinit+0xe>
 8009988:	08009eb0 	.word	0x08009eb0
 800998c:	080098a5 	.word	0x080098a5

08009990 <__sfp>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	0007      	movs	r7, r0
 8009994:	f7ff ffa4 	bl	80098e0 <__sfp_lock_acquire>
 8009998:	4b1f      	ldr	r3, [pc, #124]	; (8009a18 <__sfp+0x88>)
 800999a:	681e      	ldr	r6, [r3, #0]
 800999c:	69b3      	ldr	r3, [r6, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <__sfp+0x18>
 80099a2:	0030      	movs	r0, r6
 80099a4:	f7ff ffbc 	bl	8009920 <__sinit>
 80099a8:	3648      	adds	r6, #72	; 0x48
 80099aa:	68b4      	ldr	r4, [r6, #8]
 80099ac:	6873      	ldr	r3, [r6, #4]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	d504      	bpl.n	80099bc <__sfp+0x2c>
 80099b2:	6833      	ldr	r3, [r6, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d022      	beq.n	80099fe <__sfp+0x6e>
 80099b8:	6836      	ldr	r6, [r6, #0]
 80099ba:	e7f6      	b.n	80099aa <__sfp+0x1a>
 80099bc:	220c      	movs	r2, #12
 80099be:	5ea5      	ldrsh	r5, [r4, r2]
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	d11a      	bne.n	80099fa <__sfp+0x6a>
 80099c4:	0020      	movs	r0, r4
 80099c6:	4b15      	ldr	r3, [pc, #84]	; (8009a1c <__sfp+0x8c>)
 80099c8:	3058      	adds	r0, #88	; 0x58
 80099ca:	60e3      	str	r3, [r4, #12]
 80099cc:	6665      	str	r5, [r4, #100]	; 0x64
 80099ce:	f000 f847 	bl	8009a60 <__retarget_lock_init_recursive>
 80099d2:	f7ff ff8d 	bl	80098f0 <__sfp_lock_release>
 80099d6:	0020      	movs	r0, r4
 80099d8:	2208      	movs	r2, #8
 80099da:	0029      	movs	r1, r5
 80099dc:	6025      	str	r5, [r4, #0]
 80099de:	60a5      	str	r5, [r4, #8]
 80099e0:	6065      	str	r5, [r4, #4]
 80099e2:	6125      	str	r5, [r4, #16]
 80099e4:	6165      	str	r5, [r4, #20]
 80099e6:	61a5      	str	r5, [r4, #24]
 80099e8:	305c      	adds	r0, #92	; 0x5c
 80099ea:	f7fd fc09 	bl	8007200 <memset>
 80099ee:	6365      	str	r5, [r4, #52]	; 0x34
 80099f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80099f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80099f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80099f6:	0020      	movs	r0, r4
 80099f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fa:	3468      	adds	r4, #104	; 0x68
 80099fc:	e7d7      	b.n	80099ae <__sfp+0x1e>
 80099fe:	2104      	movs	r1, #4
 8009a00:	0038      	movs	r0, r7
 8009a02:	f7ff ff57 	bl	80098b4 <__sfmoreglue>
 8009a06:	1e04      	subs	r4, r0, #0
 8009a08:	6030      	str	r0, [r6, #0]
 8009a0a:	d1d5      	bne.n	80099b8 <__sfp+0x28>
 8009a0c:	f7ff ff70 	bl	80098f0 <__sfp_lock_release>
 8009a10:	230c      	movs	r3, #12
 8009a12:	603b      	str	r3, [r7, #0]
 8009a14:	e7ef      	b.n	80099f6 <__sfp+0x66>
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	08009eb0 	.word	0x08009eb0
 8009a1c:	ffff0001 	.word	0xffff0001

08009a20 <_fwalk_reent>:
 8009a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a22:	0004      	movs	r4, r0
 8009a24:	0006      	movs	r6, r0
 8009a26:	2700      	movs	r7, #0
 8009a28:	9101      	str	r1, [sp, #4]
 8009a2a:	3448      	adds	r4, #72	; 0x48
 8009a2c:	6863      	ldr	r3, [r4, #4]
 8009a2e:	68a5      	ldr	r5, [r4, #8]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	9b00      	ldr	r3, [sp, #0]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	d504      	bpl.n	8009a44 <_fwalk_reent+0x24>
 8009a3a:	6824      	ldr	r4, [r4, #0]
 8009a3c:	2c00      	cmp	r4, #0
 8009a3e:	d1f5      	bne.n	8009a2c <_fwalk_reent+0xc>
 8009a40:	0038      	movs	r0, r7
 8009a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a44:	89ab      	ldrh	r3, [r5, #12]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d908      	bls.n	8009a5c <_fwalk_reent+0x3c>
 8009a4a:	220e      	movs	r2, #14
 8009a4c:	5eab      	ldrsh	r3, [r5, r2]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	d004      	beq.n	8009a5c <_fwalk_reent+0x3c>
 8009a52:	0029      	movs	r1, r5
 8009a54:	0030      	movs	r0, r6
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	4798      	blx	r3
 8009a5a:	4307      	orrs	r7, r0
 8009a5c:	3568      	adds	r5, #104	; 0x68
 8009a5e:	e7e8      	b.n	8009a32 <_fwalk_reent+0x12>

08009a60 <__retarget_lock_init_recursive>:
 8009a60:	4770      	bx	lr

08009a62 <__retarget_lock_acquire_recursive>:
 8009a62:	4770      	bx	lr

08009a64 <__retarget_lock_release_recursive>:
 8009a64:	4770      	bx	lr
	...

08009a68 <__swhatbuf_r>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	000e      	movs	r6, r1
 8009a6c:	001d      	movs	r5, r3
 8009a6e:	230e      	movs	r3, #14
 8009a70:	5ec9      	ldrsh	r1, [r1, r3]
 8009a72:	0014      	movs	r4, r2
 8009a74:	b096      	sub	sp, #88	; 0x58
 8009a76:	2900      	cmp	r1, #0
 8009a78:	da07      	bge.n	8009a8a <__swhatbuf_r+0x22>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	602b      	str	r3, [r5, #0]
 8009a7e:	89b3      	ldrh	r3, [r6, #12]
 8009a80:	061b      	lsls	r3, r3, #24
 8009a82:	d411      	bmi.n	8009aa8 <__swhatbuf_r+0x40>
 8009a84:	2380      	movs	r3, #128	; 0x80
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	e00f      	b.n	8009aaa <__swhatbuf_r+0x42>
 8009a8a:	466a      	mov	r2, sp
 8009a8c:	f000 f914 	bl	8009cb8 <_fstat_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	dbf2      	blt.n	8009a7a <__swhatbuf_r+0x12>
 8009a94:	23f0      	movs	r3, #240	; 0xf0
 8009a96:	9901      	ldr	r1, [sp, #4]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	4019      	ands	r1, r3
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <__swhatbuf_r+0x4c>)
 8009a9e:	18c9      	adds	r1, r1, r3
 8009aa0:	424b      	negs	r3, r1
 8009aa2:	4159      	adcs	r1, r3
 8009aa4:	6029      	str	r1, [r5, #0]
 8009aa6:	e7ed      	b.n	8009a84 <__swhatbuf_r+0x1c>
 8009aa8:	2340      	movs	r3, #64	; 0x40
 8009aaa:	2000      	movs	r0, #0
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	b016      	add	sp, #88	; 0x58
 8009ab0:	bd70      	pop	{r4, r5, r6, pc}
 8009ab2:	46c0      	nop			; (mov r8, r8)
 8009ab4:	ffffe000 	.word	0xffffe000

08009ab8 <__smakebuf_r>:
 8009ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aba:	2602      	movs	r6, #2
 8009abc:	898b      	ldrh	r3, [r1, #12]
 8009abe:	0005      	movs	r5, r0
 8009ac0:	000c      	movs	r4, r1
 8009ac2:	4233      	tst	r3, r6
 8009ac4:	d006      	beq.n	8009ad4 <__smakebuf_r+0x1c>
 8009ac6:	0023      	movs	r3, r4
 8009ac8:	3347      	adds	r3, #71	; 0x47
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	6123      	str	r3, [r4, #16]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	6163      	str	r3, [r4, #20]
 8009ad2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009ad4:	466a      	mov	r2, sp
 8009ad6:	ab01      	add	r3, sp, #4
 8009ad8:	f7ff ffc6 	bl	8009a68 <__swhatbuf_r>
 8009adc:	9900      	ldr	r1, [sp, #0]
 8009ade:	0007      	movs	r7, r0
 8009ae0:	0028      	movs	r0, r5
 8009ae2:	f7fe f8c9 	bl	8007c78 <_malloc_r>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d108      	bne.n	8009afc <__smakebuf_r+0x44>
 8009aea:	220c      	movs	r2, #12
 8009aec:	5ea3      	ldrsh	r3, [r4, r2]
 8009aee:	059a      	lsls	r2, r3, #22
 8009af0:	d4ef      	bmi.n	8009ad2 <__smakebuf_r+0x1a>
 8009af2:	2203      	movs	r2, #3
 8009af4:	4393      	bics	r3, r2
 8009af6:	431e      	orrs	r6, r3
 8009af8:	81a6      	strh	r6, [r4, #12]
 8009afa:	e7e4      	b.n	8009ac6 <__smakebuf_r+0xe>
 8009afc:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <__smakebuf_r+0x84>)
 8009afe:	62ab      	str	r3, [r5, #40]	; 0x28
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	89a2      	ldrh	r2, [r4, #12]
 8009b04:	6020      	str	r0, [r4, #0]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	9b00      	ldr	r3, [sp, #0]
 8009b0c:	6120      	str	r0, [r4, #16]
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00d      	beq.n	8009b32 <__smakebuf_r+0x7a>
 8009b16:	0028      	movs	r0, r5
 8009b18:	230e      	movs	r3, #14
 8009b1a:	5ee1      	ldrsh	r1, [r4, r3]
 8009b1c:	f000 f8de 	bl	8009cdc <_isatty_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d006      	beq.n	8009b32 <__smakebuf_r+0x7a>
 8009b24:	2203      	movs	r2, #3
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	4393      	bics	r3, r2
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	89a0      	ldrh	r0, [r4, #12]
 8009b34:	4307      	orrs	r7, r0
 8009b36:	81a7      	strh	r7, [r4, #12]
 8009b38:	e7cb      	b.n	8009ad2 <__smakebuf_r+0x1a>
 8009b3a:	46c0      	nop			; (mov r8, r8)
 8009b3c:	080098a5 	.word	0x080098a5

08009b40 <_raise_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	0004      	movs	r4, r0
 8009b44:	000d      	movs	r5, r1
 8009b46:	291f      	cmp	r1, #31
 8009b48:	d904      	bls.n	8009b54 <_raise_r+0x14>
 8009b4a:	2316      	movs	r3, #22
 8009b4c:	6003      	str	r3, [r0, #0]
 8009b4e:	2001      	movs	r0, #1
 8009b50:	4240      	negs	r0, r0
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <_raise_r+0x24>
 8009b5a:	008a      	lsls	r2, r1, #2
 8009b5c:	189b      	adds	r3, r3, r2
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	d108      	bne.n	8009b76 <_raise_r+0x36>
 8009b64:	0020      	movs	r0, r4
 8009b66:	f000 f831 	bl	8009bcc <_getpid_r>
 8009b6a:	002a      	movs	r2, r5
 8009b6c:	0001      	movs	r1, r0
 8009b6e:	0020      	movs	r0, r4
 8009b70:	f000 f81a 	bl	8009ba8 <_kill_r>
 8009b74:	e7ed      	b.n	8009b52 <_raise_r+0x12>
 8009b76:	2000      	movs	r0, #0
 8009b78:	2a01      	cmp	r2, #1
 8009b7a:	d0ea      	beq.n	8009b52 <_raise_r+0x12>
 8009b7c:	1c51      	adds	r1, r2, #1
 8009b7e:	d103      	bne.n	8009b88 <_raise_r+0x48>
 8009b80:	2316      	movs	r3, #22
 8009b82:	3001      	adds	r0, #1
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	e7e4      	b.n	8009b52 <_raise_r+0x12>
 8009b88:	2400      	movs	r4, #0
 8009b8a:	0028      	movs	r0, r5
 8009b8c:	601c      	str	r4, [r3, #0]
 8009b8e:	4790      	blx	r2
 8009b90:	0020      	movs	r0, r4
 8009b92:	e7de      	b.n	8009b52 <_raise_r+0x12>

08009b94 <raise>:
 8009b94:	b510      	push	{r4, lr}
 8009b96:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <raise+0x10>)
 8009b98:	0001      	movs	r1, r0
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	f7ff ffd0 	bl	8009b40 <_raise_r>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	20000010 	.word	0x20000010

08009ba8 <_kill_r>:
 8009ba8:	2300      	movs	r3, #0
 8009baa:	b570      	push	{r4, r5, r6, lr}
 8009bac:	4d06      	ldr	r5, [pc, #24]	; (8009bc8 <_kill_r+0x20>)
 8009bae:	0004      	movs	r4, r0
 8009bb0:	0008      	movs	r0, r1
 8009bb2:	0011      	movs	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7fa fbe9 	bl	800438c <_kill>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d103      	bne.n	8009bc6 <_kill_r+0x1e>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d000      	beq.n	8009bc6 <_kill_r+0x1e>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	20000284 	.word	0x20000284

08009bcc <_getpid_r>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	f7fa fbd7 	bl	8004380 <_getpid>
 8009bd2:	bd10      	pop	{r4, pc}

08009bd4 <__sread>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	000c      	movs	r4, r1
 8009bd8:	250e      	movs	r5, #14
 8009bda:	5f49      	ldrsh	r1, [r1, r5]
 8009bdc:	f000 f8a4 	bl	8009d28 <_read_r>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	db03      	blt.n	8009bec <__sread+0x18>
 8009be4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009be6:	181b      	adds	r3, r3, r0
 8009be8:	6563      	str	r3, [r4, #84]	; 0x54
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	4a02      	ldr	r2, [pc, #8]	; (8009bf8 <__sread+0x24>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	e7f9      	b.n	8009bea <__sread+0x16>
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	ffffefff 	.word	0xffffefff

08009bfc <__swrite>:
 8009bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfe:	001f      	movs	r7, r3
 8009c00:	898b      	ldrh	r3, [r1, #12]
 8009c02:	0005      	movs	r5, r0
 8009c04:	000c      	movs	r4, r1
 8009c06:	0016      	movs	r6, r2
 8009c08:	05db      	lsls	r3, r3, #23
 8009c0a:	d505      	bpl.n	8009c18 <__swrite+0x1c>
 8009c0c:	230e      	movs	r3, #14
 8009c0e:	5ec9      	ldrsh	r1, [r1, r3]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2302      	movs	r3, #2
 8009c14:	f000 f874 	bl	8009d00 <_lseek_r>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	4a05      	ldr	r2, [pc, #20]	; (8009c30 <__swrite+0x34>)
 8009c1c:	0028      	movs	r0, r5
 8009c1e:	4013      	ands	r3, r2
 8009c20:	81a3      	strh	r3, [r4, #12]
 8009c22:	0032      	movs	r2, r6
 8009c24:	230e      	movs	r3, #14
 8009c26:	5ee1      	ldrsh	r1, [r4, r3]
 8009c28:	003b      	movs	r3, r7
 8009c2a:	f000 f81f 	bl	8009c6c <_write_r>
 8009c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c30:	ffffefff 	.word	0xffffefff

08009c34 <__sseek>:
 8009c34:	b570      	push	{r4, r5, r6, lr}
 8009c36:	000c      	movs	r4, r1
 8009c38:	250e      	movs	r5, #14
 8009c3a:	5f49      	ldrsh	r1, [r1, r5]
 8009c3c:	f000 f860 	bl	8009d00 <_lseek_r>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	1c42      	adds	r2, r0, #1
 8009c44:	d103      	bne.n	8009c4e <__sseek+0x1a>
 8009c46:	4a05      	ldr	r2, [pc, #20]	; (8009c5c <__sseek+0x28>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	bd70      	pop	{r4, r5, r6, pc}
 8009c4e:	2280      	movs	r2, #128	; 0x80
 8009c50:	0152      	lsls	r2, r2, #5
 8009c52:	4313      	orrs	r3, r2
 8009c54:	81a3      	strh	r3, [r4, #12]
 8009c56:	6560      	str	r0, [r4, #84]	; 0x54
 8009c58:	e7f8      	b.n	8009c4c <__sseek+0x18>
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	ffffefff 	.word	0xffffefff

08009c60 <__sclose>:
 8009c60:	b510      	push	{r4, lr}
 8009c62:	230e      	movs	r3, #14
 8009c64:	5ec9      	ldrsh	r1, [r1, r3]
 8009c66:	f000 f815 	bl	8009c94 <_close_r>
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <_write_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	0004      	movs	r4, r0
 8009c70:	0008      	movs	r0, r1
 8009c72:	0011      	movs	r1, r2
 8009c74:	001a      	movs	r2, r3
 8009c76:	2300      	movs	r3, #0
 8009c78:	4d05      	ldr	r5, [pc, #20]	; (8009c90 <_write_r+0x24>)
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7fa fbbf 	bl	80043fe <_write>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d103      	bne.n	8009c8c <_write_r+0x20>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d000      	beq.n	8009c8c <_write_r+0x20>
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	46c0      	nop			; (mov r8, r8)
 8009c90:	20000284 	.word	0x20000284

08009c94 <_close_r>:
 8009c94:	2300      	movs	r3, #0
 8009c96:	b570      	push	{r4, r5, r6, lr}
 8009c98:	4d06      	ldr	r5, [pc, #24]	; (8009cb4 <_close_r+0x20>)
 8009c9a:	0004      	movs	r4, r0
 8009c9c:	0008      	movs	r0, r1
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	f7fa fbc9 	bl	8004436 <_close>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d103      	bne.n	8009cb0 <_close_r+0x1c>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d000      	beq.n	8009cb0 <_close_r+0x1c>
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	bd70      	pop	{r4, r5, r6, pc}
 8009cb2:	46c0      	nop			; (mov r8, r8)
 8009cb4:	20000284 	.word	0x20000284

08009cb8 <_fstat_r>:
 8009cb8:	2300      	movs	r3, #0
 8009cba:	b570      	push	{r4, r5, r6, lr}
 8009cbc:	4d06      	ldr	r5, [pc, #24]	; (8009cd8 <_fstat_r+0x20>)
 8009cbe:	0004      	movs	r4, r0
 8009cc0:	0008      	movs	r0, r1
 8009cc2:	0011      	movs	r1, r2
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	f7fa fbc0 	bl	800444a <_fstat>
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	d103      	bne.n	8009cd6 <_fstat_r+0x1e>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d000      	beq.n	8009cd6 <_fstat_r+0x1e>
 8009cd4:	6023      	str	r3, [r4, #0]
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	20000284 	.word	0x20000284

08009cdc <_isatty_r>:
 8009cdc:	2300      	movs	r3, #0
 8009cde:	b570      	push	{r4, r5, r6, lr}
 8009ce0:	4d06      	ldr	r5, [pc, #24]	; (8009cfc <_isatty_r+0x20>)
 8009ce2:	0004      	movs	r4, r0
 8009ce4:	0008      	movs	r0, r1
 8009ce6:	602b      	str	r3, [r5, #0]
 8009ce8:	f7fa fbbd 	bl	8004466 <_isatty>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d103      	bne.n	8009cf8 <_isatty_r+0x1c>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d000      	beq.n	8009cf8 <_isatty_r+0x1c>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	20000284 	.word	0x20000284

08009d00 <_lseek_r>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	0004      	movs	r4, r0
 8009d04:	0008      	movs	r0, r1
 8009d06:	0011      	movs	r1, r2
 8009d08:	001a      	movs	r2, r3
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4d05      	ldr	r5, [pc, #20]	; (8009d24 <_lseek_r+0x24>)
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	f7fa fbb2 	bl	8004478 <_lseek>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d103      	bne.n	8009d20 <_lseek_r+0x20>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d000      	beq.n	8009d20 <_lseek_r+0x20>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	20000284 	.word	0x20000284

08009d28 <_read_r>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	0004      	movs	r4, r0
 8009d2c:	0008      	movs	r0, r1
 8009d2e:	0011      	movs	r1, r2
 8009d30:	001a      	movs	r2, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	4d05      	ldr	r5, [pc, #20]	; (8009d4c <_read_r+0x24>)
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7fa fb44 	bl	80043c4 <_read>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d103      	bne.n	8009d48 <_read_r+0x20>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d000      	beq.n	8009d48 <_read_r+0x20>
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	bd70      	pop	{r4, r5, r6, pc}
 8009d4a:	46c0      	nop			; (mov r8, r8)
 8009d4c:	20000284 	.word	0x20000284

08009d50 <_init>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	46c0      	nop			; (mov r8, r8)
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr

08009d5c <_fini>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	46c0      	nop			; (mov r8, r8)
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr
